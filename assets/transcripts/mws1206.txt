Creating a Site with CSS Grid and Bootstrap 4
by Mario Duilio Macari

Layout a site professionally and execute a well thought out web site design from a UX/UI designer with the help of Bootstrap 4, the world’s most popular front-end component library and the robust CSS Grid module, the go to code for responsive pages.

Activate the twin powers of Bootstrap 4 and the CSS Grid Module for mastering responsive layout. In this course, Creating a Site with CSS Grid and Bootstrap 4, you will gain the ability to use the world’s most popular front-end component library while at the same time dividing a page into major regions by using the CSS Grid module. First, you will learn how to apply Bootstrap 4 CSS. Next, you will discover the power of the CSS Grid module to do exciting designs that change with responsive breakpoints by defining the relationship of HTML elements in terms of size and position. Finally, you will explore how to combine Bootstrap 4 components and the CSS Grid Module effectively. When you're finished with this course, you will have gained powerful skills and experience in Bootstrap 4 and the CSS Grid module by executing a well thought out web site design from a professional UX/UI designer.

Course author
Author: Mario Duilio Macari	
Mario Duilio Macari
Mario Macari has spent more than ten plus years as a coder specializing in HTML5, CSS3, Javascript and other client and server side languages. He is also an award-winning artist and holds a BFA in...

Course info
Level
Intermediate
Rating
3.6 stars with 24 raters(24)
My rating
null stars

Duration
2h 14m
Released
19 Feb 2019
Share course

Course Overview
Course Overview
Hi everyone. My name is Mario Macari, and welcome to my course, Creating a Site with CSS Grid and Bootstrap 4. I am a front end developer, freelancer, college professor, and Pluralsight author. Bootstrap 4 has the world's most popular front end component library and now with the power of the CSS grid module, design layouts for your sites can easily change at every single browser widths. It will add new eye candy and excitement to your site. In this course, we're going to take our CSS and Bootstrap 4 skills and use them to execute a well-thought-out website design from a UX/UI designer. Some of the major topics that we will cover include using Bootstrap 4 to help us execute this design, using the CSS Grid module for layouts that change at different web browser sizes, customizing the site to meet the needs of the design. By the end of this course, you'll know how to combine the Bootstrap 4 framework with the CSS Grid module. Before beginning this course, you should be familiar with CSS Grid and Bootstrap 4 basics. I hope you'll join me on this journey to learn how to implement CSS Grid and Bootstrap 4 with the Creating a Site with CSS Grid and Bootstrap 4 course at Pluralsight.

Setting up Our Project
Introduction
In this course, we're going to explore using the CSS Grid module with the Bootstrap 4 framework to give you the ultimate control over your design and responses situations. Here's a scroll of the site we'll be building. Now let's size it down, and you can see that everything is responsive. That's thanks to the brilliance of the CSS Grid module and Bootstrap 4. So what exactly is the CSS Grid? Well, here's the page devoted to it at the w3.org website whose address you can see on the screen. This is according to the W3C's abstract. The CSS Grid module defines a two-dimensional grid-based layout system optimized for user interface design. In the grid layout model, the children of a grid container can be positioned into arbitrary slots in a predefined flexible or fixed-size layout grid, which basically means that this is easier to show you than to tell you. Here's the CSS Grid module in action. As I resize the browser window, you can see that the items will swap position based on the size of the screen. Each screen can have its own unique and distinct layout yet keep the flow of the HTML page intact and in its original state. Nothing is rearranged in the original HTML page code, yet through the use of the CSS Grid, we can manipulate the position of each element to a new spot. This has nothing to do with Bootstrap's responsive web sizes either. I'll explain CSS Grid more in the next clip, but I'm limited to how deep I can get into CSS Grid in this course. Even though for this course, it'll be pretty easy to pick up, for a deeper dive into the CSS Grid module, check all Pluralsight's courses on the topic. We'll also be using the Bootstrap 4 CSS JavaScript framework, which is very easy to use and has many prebuilt JavaScript interactions accessible in it. Bootstrap is located here at getbootstrap.com. So what is Bootstrap? Well, according to the Bootstrap 4 web page, Bootstrap is an open source toolkit for developing with HTML, CSS, and JavaScript. Quickly prototype your ideas or build your entire app with Bootstrap's grid system, extensive prebuilt components, and powerful plugins built on jQuery. For more exploration into Bootstrap, check out my other Pluralsight course, Bootstrap 4 for the Developer. Now for our code editor, we'll be using the open source Brackets editor in this course because it's simple to use, and it's available to everyone free of charge. Brackets is located at brackets.io. You'll also need a copy of Google Chrome because that's the browser that seamlessly integrates with Brackets. Google Chrome is located here, google.com /chrome. Finally, for our logos and icons, we'll be using Font Awesome. There are two versions of Font Awesome, a free version, which contains all the icons we need for this course, and a paid version, which contains many more graphics. Font Awesome is located here at fontawesome.com. All the Font Awesome icons are vector, so they will be infinitely resizable, and they'll be treated like fonts on our web page. So there you are. Our tools are defined for this course. In the next clip, we'll do a brief overview of the CSS Grid. See you there.

A Look at How CSS Grid Will Work on Our Site
In this clip, we'll take a look at how CSS Grid will work with our Rembrandt course website. Here's the About section, which includes a short bio of Rembrandt and one of his self-portraits on the right. Before we start resizing the page, notice a section headline appears above the bio and the self-portrait on our web page. This is what the user sees at the full size or desktop size. Bootstrap breaks websites into different sizes, which we'll talk about later. As I move the width of my browser to the left, notice that the site pops up in different sizes that are determined by the media queries of the Bootstrap framework. The first pop is laptop size, and in this case, it's the same layout as the desktop size. Now it gets interesting. When we get down to the tablet size, the layout completely changes. See how the self-portrait is on the left so the top of it aligns itself with the top section of the headline. We'll make the browser smaller in width to match a phone screen, and the layout completely shifts once more. Here's a slide with the three different layouts next to each other. You can see here that there are three different layouts all controlled by media breakpoints. We'll use these Bootstrap 4 suggested breakpoints for device widths. For small devices, the minimum width is 576 pixels. Medium devices have a minimum width of 768 pixels. Large devices have a minimum width of 992 pixels. And extra-large devices have a minimum width of 1200 pixels. That covers phone widths, tablet widths, laptop widths, and desktop widths. What the CSS Grid module allows you to do is to create entirely different layouts of your content based the size of the screen the site is displayed on. Now you may have heard of the CSS flexbox module, which is built into Bootstrap 4 and is used for layout as well. CSS flexbox is completely different from the CSS Grid module. flexbox rearranges things that are linear while CSS Grid allows movement of elements anywhere in a grid that you define. Let's take a look at flexbox on an HTML page. As I make this HTML page smaller, you can see through the power of flexbox elements just re-stack in a linear manner. Here's what the Mozilla developer's network describes as the difference between the two. The basic difference is that flexbox was designed for layout in one dimension, either a row or a column. Grid was designed for two-dimensional layout, rows and columns at the same time. The design grid is as old as print. Well, actually older, but we'll start by considering illuminated manuscripts from the Middle Ages. Notice the sample of an illuminated manuscript has a two-column layout. When the printing press was invented, layout at first imitated hand-drawn manuscripts. To the left, you can see the same illuminated manuscript and next to it a page printed by Gutenberg's press. You can see the layout and the look of the printed page followed the medieval manuscript. As printing technology advanced, so did the use of the grid system. Newspapers eventually evolved from printed flyers and books. The newspaper publishers use a grid system for layouts since there are multiple editions printed each day. And they needed to do layouts quickly. You're looking at a couple of newspapers from around 1918 with multicolumn grid layouts. When web pages were first being hacked together, the 12-column grid system evolved since the first web designers are basically drafted print designers. Here's the site of the famous 960 Grid System that fell out of use because of the development of responsive web design. The 960 grid isn't responsive, but it adopted the 12-column grid system. A 12-column grid is used simply because it's easily divided into halves, thirds, and quarters. In the days of created multicolumn web designs with hacked floats, the 12-column grid system was standard. Bootstrap 4 still uses the 12-column grid system using CSS floats, flexbox, and containers. But with the CSS Grid module, we are no longer tied down to a 12-column layout. Here's an illustrator file diagramming a normal flow in an HTML document. Each block represents a block level element. Let's say these elements on the left are elements that are flowing in order as they appear in the code. What we can do with the CSS Grid module is to use the layout grid. And on this case, we'll make it 6 columns by 6 rows so there are 36 squares. Now I'm moving these blocks around in Adobe Illustrator because I want these vector images to stretch like rubber. I'll take the sign element and stretch it across the top third, maybe set it one block in and three blocks over. Then I'll take the blue block and place it into the second third. I'll reposition it a little. I'll make it one-sixth tall and leave a block on either end. I'll go back to the cyan block and move it so it has the same layout. Now I'll move the aqua block over to the lower half. I'll stretch this element out into the entire lower half. So let's say this is our desktop layout. Now I want to reposition the elements for a tablet size screen. I'll move aside the blue and the aqua blocks. I'll grab the cyan block and position it to the right. Then I'll stretch the element to the right half of the grid. I'll grab the blue block and set it to the left half. Then I'll go to the aqua block, and I'll move that element around. So there's our tablet size. Finally, I'll do the phone size layout. Once more I'll move the blue and aqua element to the left. I'll reposition everything, and now we have a phone layout. By playing with it, now I have an entirely new layout. If we go back to the About section slide, you can see the essence of how it was laid out. And that's what's so powerful about the CSS Grid module. I can make as many grid squares as I want in any size, and change the layout instantly. In the next clip, we'll set up Brackets with the coding extension called Emmet. See you there.

Setting up Brackets with Emmet
In this course, we're going to be using Brackets, which is available at brackets.io. And it's downloadable for free. According to the website, Brackets is a lightweight yet powerful modern text editor. So you simply go to brackets.io and download Brackets, whatever the current version is. Once you have Brackets downloaded and installed, open it up. There you'll see by default the Getting Started HTML page. Now Brackets can take plugins, and one of the plugins is to make our job coding a whole lot easier is something called the Emmet plugin, and that's available at emmet.io. According to the Emmet website, Emmet is the essential toolkit for web developers. It makes coding a lot easier. So that's where we're going to be using it in this course. And once you load in the page, you want to go to the button that says Download. Once on the Download page, You're going to choose the Brackets button. And that is going to give us instructions on how to load Emmet into Brackets. I'll let you read the instructions on this Emmet page by yourself, but for now I'll move it over. Then we'll be back in Brackets, and we'll choose File, Extension Manager, and once that comes to life, I'm going to type in Emmet, and there's the plugin. Now mine's already installed, so I don't need to reinstall it, so you just go ahead and click on the Install button. And once you're done, hit the Close button. And now we have Brackets with Emmet installed. So what can you do with Emmet? Well, let's move Brackets out of the way and take a look at the website again. Go ahead and click the Watch demo button. In the first line, it's shorthand for create an unordered list with and ID of nav. Inside of that, place li.item so the class of item concatenated with the number. That's what the dollar sign is for. And multiply it by 4 so there are 4 of them. Then inside each li element, place the word number for whatever number you're on. Hit the Tab key and Emmet creates all those elements and attributes. I'll let you watch the rest of this demo video on your own, but for now, let's go into Brackets and see how it works there. I'll move the Brackets interface over again. Let's go and choose New from the file menu. Now in order for Emmet to work, we need to use it on an HTML page, so we need to save this as an HTML page first. I'll hit the keyboard shortcut for saving, Cmd or Ctrl+S. Then I'll move the demo file to My Desktop. Call the file desktop.html and click Save. I'll type an exclamation mark and hit the Tab key. Emmet immediately adds the boilerplate for the HTML, which is a lot simpler than typing it all in by hand. Let's put Demo Doc in the title tag. In the body tag, let's add a div and add a class with a dot named helloWorld. Click the Tab key and the code is generated. We'll be using Emmet for the rest of this course to make typing in HTML and Bootstrap 4 classes easier. For more on working with Emmet, check out Pluralsight's courses on Emmet. In the next clip, let's set up the boilerplate for our Rembrandt site. See you there.

Let's Get This Site Started
In this clip, we'll set up the Bootstrap 4 boilerplate code and the site folder. What's on my desktop right now is a zipped asset file folder included with this course. When we double-click it, the zip folder is decompressed with the name of Rembrandt on the folder. I'll move this folder over to the upper right-hand corner of my screen and open it. Inside, we have the images folder for our site. Inside the images folder are subfolders of images broken down for different areas of the site. Opening the drawings subfolder, we see that that contains two more subfolders, the images broken in the thumbnails and the images for the Bootstrap modal window. We'll use that modal window for our lightbox interaction. If I look inside the drawings with a width of 700 pixels folder, we see we have 16 Rembrandt drawings. We'll hit the Back button a couple times and then look into the paintings folder. Here we have 10 painting images, which will serve as both the thumbnail and the lightbox image. Let's go back out to the root level of the site and take a look at the contents of the text file. I'll hit the Spacebar on my Mac to get a quick look at the text. Inside here we have info that will help us construct the site. This file also contains the site's copy or text. I'll close off this preview and then the window. Then I'll get rid of the zip file. Let's bring back the Brackets interface window over. An easy way to establish the site folder in Brackets is simply to drop it into the sidebar. So grab the Rembrandt folder and drop it into Brackets sidebar. I'll move the Brackets interface into the video window. Brackets will now list the contents of the Rembrandt folder. Open the image twirl down arrow, and you can see all the image folder subfolders. Twirl it up again. If I click on the text file, the text appears in the window. I'll right-click on the sidebar and choose New File from the pop-up window. Brackets is ready to accept a name for this file, so let's call it index.html. If I move the interface down and we look inside the site folder, you'll see that the index file was created inside the site folder. I'll close off this window and pull up the interface again. Now, as I showed you earlier, Emmet allows us to add boilerplate HTML code. All we need to do is simply type an exclamation mark and press the Tab key. But we need to link our site to Bootstrap. And my preferred method is to use the CDN or the Bootstrap content delivery network. For that code, let's go over to the Bootstrap website at getbootstrap.com. If we click on the Get Started button, we'll be taken into the intro page. From there, we simply scroll down until we see the section on the starter template. Let's copy this to our clipboard by hitting the Copy button. Now we'll go back to Brackets. I'll select all the existing code and paste the HTML from our clipboard over it. You can see in the header that we have a stylesheet link to the Bootstrap server. If we scroll down, we can see a bunch of JavaScript links too including jQuery. I'll save this file by choosing File, Save. Then in the upper right-hand corner of the Brackets interface, we'll click on the lightning bolt live preview button. This will boot up Chrome. Bracket currently works hand in glove with Chrome, so if you haven't installed yet, go ahead. Bracket launches its own built-in server software too when you hit the live preview button, but it can't contain any of your own custom backend app logic. Once everything is ready to go, our page appears. The Hello, World and the Bootstrap native font tells us that we've linked to the CDN correctly. If I pull aside the Chrome window, you can see that in Brackets the Hello, World message is inside of h1 tags and the stylings from the Bootstrap CSS we linked to. In the next clip, we'll add our own special Google fonts. See you there.

Adding Google Fonts
In this clip, we'll be adding our site's Google fonts. So here I am on the Google fonts page, which you can find at fonts.google .com. Google updates the interface on the site fairly often, so the site of your screen may not look exactly like mine. Now the trouble with using straight out-of-the-box Bootstrap 4 is that all the sites that use it look exactly the same. So by using a font from Google for our body copy and headlines, we can avoid that trap. I'm going to go over to the Categories column right here, and I'm going unselect everything except the display fonts. And then I'll scroll down the page and show you all the different display fonts that are available, well, at least on this page. Let's choose luckiest guy. And what I'm going to do is select all the type, and then I'll type in Rembrandt. So you can type in whatever you want inside this space and see how it looks with the font you think you want to use. I'll scroll back up to the top again, and this time I'll search for the font that I picked out already for our website. And that is Princess, and as soon as I type in Princess, it says No fonts found. And the reason why is the only thing I have selected is the display fonts. So I'm going to come back over here and turn everything on. And as soon as we do that, there is the font I'm looking for, Princess Sofia. I want to see more information about this font, so I'm going to click on the font name. And here we can see all the characters that are embedded inside the font, different styles. And right over here, if you are not a graphic designer, we have popular pairings with Princess Sofia. What that tells us is that of all the people in the world using this font, these are the fonts that they combined together when this font is used. So like I said if you're not a graphic designer, you can use this chart here to decide what other font you want to use with the font that you've picked out. So you can see Great Vibes goes with this. On the right, you're going to see samples of the two fonts together. Now in this case, we're using Sacramento as the headline font and Princess Sofia as the body copy, which I think is really hard to read. We also have Allura and Princess Sofia, and then Tangerine and Princess Sofia. Of all these, what I want to do is come back up to the top and select this as our font. You can see now at the bottom a pop-up screen appears, and it says 1 Family Selected. I'll choose a search magnifying glass again. This time I will type in Open Sans, which is a very good sans serif body copy font. If I click on the title of Open Sans, we get more information about it. Take a notice that this font has a lot more glyphs included inside of it. So I'm going to click on the Select This Font. And now it says 2 Families Selected in the pop-up menu. I'm going to click on the pop-up menu, and I want to point out that the load time is fast currently. If I go over to Customize, all these different numbers represent different weights of the fonts. So 300 is light usually, and semi-bold 600. If I click on any of these other combinations, the download time is going to increase. So when you're doing this, you simply want to choose the font you're going to use in your website and don't have anything else chosen that you need to load. I'll uncheck semi-bold, then we'll return back to the Embed tab. I'm going to use this link right here to embed it in our HTML page. I'll right-click and choose Copy, and we'll return over to Brackets. Underneath the Bootstrap CDN CSS, I'm going to paste that in place. Right here after the family, you can see that we have Open Sans and Princess Sofia chosen. There's Open Sans and there's Princess Sofia. If I pull over the site copy and paste code.txt file, you can see in the google fonts section I have them separated. It doesn't matter if you separate the fonts on their own CSS lines or combine them in one single CSS line. I also want to point out these two numbers 400 and 700. Those are the two different weights that we're including with the Open Sans font remembering that each weight you include increases download time. I'll copy this code to my clipboard, return over to line 10 inside of Brackets, and paste it in, and then I'll Tab it over. Now if I go to the Customize menu, you can see that the bold 700 is there. Tab this one over. I want to demonstrate how this new font works inside our page, so I'm going to select the h1 tags. I'm going to add a style attribute. Go back to the Google Fonts page and return to the Embed tab. Right over here, it says Specify in CSS. I'm going to copy the very first line. Return to Brackets, and I'll paste it inside the quotation marks of the HTML style attribute. Now we're not going to use in-line styles throughout this course, but I just wanted to demonstrate how this font looks. Click on the live preview button, wait for it to boot up, and there is our Google font. In the next clip, we'll add Font Awesome, so I'll see you there.

Using Font Awesome
In this clip, we'll add the free version of Font Awesome to our site and test it. So here I am on the Font Awesome website. You can find it at fontawesome.com. Font Awesome updates the interface of this website often, so the site on your screen may not look exactly like mine. As you can see, there are two versions available, free and Pro. The Pro version of Font Awesome increases the amount of icons available to you. We'll be using the free icons in this course, so click on the Start Using Free button. The Pro version will lead you to a different link code. On this page is a link to the free version of the CDN. Notice that there are earlier versions available in this drop-down menu. You can always access them here. Click on the clipboard icon in the lower right-hand corner to copy this link to your clipboard. Let's go into Brackets again. Right underneath the links to the Google Fonts, let's paste the link to Font Awesome. Now save your file and let's test it. Scroll down to the body, and underneath the h1 tag, let's make some room. I'll type in Facebook, Twitter, LinkedIn, and Instagram. We want to use these icons on our site. Now let's go back to the Font Awesome website and click on the Icons menu button. When the page loads, you'll see more icons. The ones in black are free. The ones grayed out are included in the Pro version. Let's type in Facebook. I want the big logo with the box, so I'll click on the second icon. Here's the line of HTML tags. Notice there isn't anything that goes in between the i tags. If you want to use the i tag for its intended purpose, then use a different set of i tags if that's the case. I'll click on the HTML i tag to copy to my clipboard. Then I'll pull over Brackets. Let's paste the tag after the Facebook text. Now let's see it in Chrome. So press the live preview button. I'll pull Chrome over, and there's our icon. It's inline and treated as a font, so any CSS that affects a font will affect the icon. Let's go back to Brackets and pull the interface over again. I'll hit the Back button on the website to show you the icon page once more. Now I'll find the HTML for Twitter. Here are the icons, and I'll click the first one. Once more, we're taken to the icons page. I'll copy the HTML tag to my clipboard. Let's return to Brackets and paste it in after the word Twitter. Return to the website and hit the Back button. Now we'll find the LinkedIn icon. Click on the first icon, and then click again on the HTML tag. Return to Brackets and paste it into the HTML page. Once more, we'll go back to the website and find the Instagram logo. There's only one, so click on the icon. Click on the HTML tag and copy to the clipboard. Return to Brackets and paste. So now we have all four icons there. We're going to use these icons in our footer leader. Let's go ahead and get rid of these placeholder words. And now let's see how they look on the web page. So there they are. I'll pull over the text file again to show you that I've added the link to the CDN and the HTML tags into the text file if you want to use that instead of looking them up yourself. In the next clip, we'll add the JavaScript that animates the scrolling on our web page. See you there.

Animating the Scroll
In this clip, we'll add the JavaScript that will eventually animate the linked scrolls. Here's our site without the scroll animation. When I click on a link, the browser pops to that position on the page. As I click on these other links, the user of the page might get confused as to where they are on the website. Let's pull this page aside, and now here's our site with animated scrolls provided by JavaScript. Now when I click on these links, the page scrolls showing you where you are on the site. It makes the user experience a little bit better, and the user doesn't get lost. Let's move this browser out of the video window, and here's our code in Brackets. I'll pull up the provided text file, and let's scroll to the bottom. Here's the jQuery that's used. I'll copy this to my clipboard, and let's return to Brackets. I'll scroll down to the bottom of the HTML, and before the closing body tag, let's go ahead and paste that jQuery. Bootstrap installed jQuery for us when we cut and pasted the code from the Bootstrap website a few clips back, along with Popper.js and Bootstrap's custom JavaScript. jQuery's on line 27 on my page, although your line numbers may be different. On line 28 of my page is Bootstrap-provided CDN to the Popper.js utility code. According to the Popper.js GitHub page, Popper.js is a positioning engine. Its purpose is to calculate the position of an element to make it possible to position it near a given reference element. So Bootstrap uses Popper with their components. Finally, on line 29, we have the Bootstrap-provided JavaScript to get the components to work. So with all that, our page is now set up.

Summary
In this module, we set up our web page for Bootstrap 4. We started by learning how the CSS Grid module affects our responsive web design and what tools we'll use for this course. Then we had an overview of multicolumn layouts and how CSS Grid can be used for responsive design. We downloaded Brackets and installed Emmet. After that we explored the assets for our website. We went out to Google fonts and installed a font into our website. We then installed Font Awesome, and we found all our social media icons for our footer. After that we added an animated scroll to our site using jQuery. In the next module, we'll set up our HTML. See you there.

Adding the Unstylized Content
Introduction
In this module, we'll add the un-stylized content. We looked at the finished site before, but to get there, we need to add the plain old content, and that's what this module is for. It'll be just the HTML with nothing more than Bootstrap defaults. Here's what we'll be building in this module. We'll start by dividing the page into different sections. First, we'll add the header section content. Then we'll set up the content for the prints, paintings, and drawings section. Following that, it's a painting of the week content. After that, we'll add the bio section. Then we'll set up the Prints gallery, the Paintings gallery, and the Drawings gallery. From there, we'll add the contact section. And, finally, wrap it all up with the footer section including the copyright. So let's get started.

Setting up the Sections
In this clip, we'll be adding the sections to our site. If we take a look at all the final code here, you can see that our site is very complex between the HTML Bootstrap and the custom CSS we'll be adding. Here's our site as it appears. To simplify things, we'll separate the site into logical sections like we see here. Fortunately, the design designated the sections and the site with different colors. So we have a header, the prints, drawing, and painting section. Then we have the painting of the week, the about section, the prints section, the paintings section, the drawings section, the contact section, and the footer along with the copyright. If we take a look at the site-copy-and-paste-code text file, we can see the section names are provided so you don't have to watch me type. There'll be plenty of time to watch me type as we go through the course. I'm going to copy all this text to my clipboard, and we'll close off this file. Back in Brackets here, I'm going to make some room after the Hello, world h1 tag, move my cursor around, and then I'll paste. I'm going to tab over the s2. And, in fact, let's hold on the Option key, start at s10, and slide upwards before the s in each line, and then I'll hit the Tab key so everything moves at once. Now I'm going to hold down the Option key once more and slide it up from s10. And this time we'll type in a left bracket an exclamation mark, two hyphens, and turn all these into remarks. I'll use my arrow keys, and you can see when we get to the end because all these things are different lengths, it doesn't work. We can't just close off the remarks the way this is working right now. So I'm going to instead hold on my Cmd key and click at the end of each one of these lines, two hyphens, and a greater than sign. So now we have all these sections remarked off. Since the blinking cursor is now at the end of each one of these lines, I'm going to hit the Return key, and now there's a space between each of the lines. And once I'll hold on my Cmd key and click in between each one of these spaces, and I'll type in the word section and hit the Tab key. And it kicks in. I'm going to hold on my Cmd key and click in front of each one of these section tags and hit the Tab key so they're set inwards. Then I'm going to hold on my Cmd key once more and click after each end in section in the opening tag, put in a space, and then I'll type id=, and I'll copy s1_header, and paste it in the first ID, s2_trio, paste that one in the second section ID, and I'll continue through section 3, section 4. We'll do section 5, section 6, section 7, section 8, section 9. And I forgot the final one for section 10, so I'm just going to copy section 9 before I add the ID, tab it over, and paste it. And then I'll copy s9_footer and paste in the ID there. And then s10_copyright, paste it right there. Then I'll hold on my Cmd key and go in between each one of these tag sets, and I'll hit the Return key so now there're spaces in between each and every one of them. So that takes care of this clip. In the next clip, we'll set up the header section, and I'll see you there.

Adding the Header Text
In this clip, we'll add the header section content. Once more, we're back in the site-copy-and-paste text file. I'll copy the French name of the gallery to my clipboard. Let's go back to Brackets and paste it into the title tags. I no longer need this Hello, World sample sentence here, so I'm just going to delete it. Bootstrap uses a number of tag containers and nested tag containers. And as we work through the code, we may change our minds about everything often and tag placement as we try to get everything to work. Even though I have obviously worked through the entire site already, I'll be tweaking it to make things better as I work here. And that's what's nice about Bootstrap 4 and CSS. It allows you to do that easily. So I'll type in a section, a greater than sign, and in Emmet, that means nest the next tag set. Then we'll nest an aside, and then an h1 tag. I'll hit the Tab button, and you can see all the tags are set up. I'll go to the end of the h1 line, and we'll type in h5 tags. Let's go back to our text file, and then we'll copy Rembrandt's name to our clipboard. Back to Brackets, and we'll paste it in the h1 tag. Once more I'll go back to the copy file, and this time we'll copy what he does. I'll paste that in the h5 tags. Then we'll change this ampersand into the special HTML5 character ampersand by adding an amp;. And I'll widen up the work area of Brackets. In the next clip, we'll go ahead and work on the trio section. See you there.

Prints, Paintings, and Drawings
In this clip, we'll add the content for the trio section of drawing, prints, and paintings. Let's scroll down to the s2 trio area we created in clip one. I'll make some room. Then we'll set up the code for Emmet. I'll type aside and then a greater than sign to nest an h2 inside of it. We can designate content by adding some curly braces. I put in three x's because I can easily grab them when I double-click for cutting and pasting later. Then I'll add a plus sign so that the p tag and the h2 tags are siblings inside the same aside parent tag. I want to place an image inside these items, so I'll go back to beginning of the line, and I'll add an image with a plus sign. Now I'll put parentheses around the whole line and multiply it by three so we end up with three items. I'll hit the Tab key, and there's our skeleton HTML code. In the first h2, I'll double-click on the triple x's, and I'll type the word Prints. In the next h2, let's go ahead and add the word Paintings. And in the final one, we'll add the word Drawings in the h2 tags. We'll go back to the TXT file, and I'll scroll around until I find the paragraph underneath the Prints headline. And I'll paste it in the first paragraph. Go back to the text file, grab the second paragraph, and paste that one. And, finally, go to the text file again and grab the third paragraph, and paste that one. Now I'll drop the images into place, so I'll go up to the first image tag. And in the source menu, I'll type img/. That'll open up the drop-down menu. I'll go down to interface-imgs. And then from there, we will choose the s2- prints.png file. I'll put the word Prints into the alt tag. I'll copy the first line. I'll delete s2- prints.png with a slash, and that'll open up the drop-down menu again, and now we'll look for s2- paintings.png. And I'll give it the alt tag of Paintings. Finally, I'll paste the line again into the third occurrence of the image tag, and we'll get rid of the name once more replacing with a slash. And this time we want s2- drawings.png. Then we'll add the word Drawings into the alt tag, hit the live preview lightning bolt button that'll boot up Chrome. And inside Chrome, we can see the area we just finished with all the pictures and the text. In the next clip, we'll add the painting of the week section. See you there.

Painting of the Week
In this clip, we'll add the painting of the week section. We'll start out with an h1 tag, curly braces, and three x's. Then we'll add the plus sign and an image tag. And then I'll add a p with curly braces and some x's inside of it. Hit the Tab key, and the skeleton HTML appears. From the painting of the week section in our text file, we'll grab Highlighted Painting, copy it to a clipboard, and paste in the h1 tags. Go back to the text file, and copy the Castle Overlooking a River text. Copy that to our clipboard, and paste that in the paragraph tags. Then we'll go up to the image tag, and in the source I'll type img/. And that'll open up the drop-down menu. The painting of the week is at the root level of the images folder, so I'll just choose s3-painting-of-the-week. We'll put Painting of the Week into the alt tag. Then we'll hit the live preview lightning bolt button. And when Chrome boots up, we'll scroll down. And there is the painting of the week. In the next clip, we'll add the biography of Rembrandt. So I'll see you there.

About the Guy
In this clip, we'll add the Rembrandt biography section. Using Emmet once again, we'll add an img plus an h3 plus a p tag. Inside the source attribute, I'll type img/, and that triggers a drop-down menu. From there, we go down to the interface-imgs folder. Then we'll choose the s4_about_Rembrandt_Self-Portrait. In the alt tag, I'll just type Rembrandt. In the H3 tag, let's type About. Then we'll go to our site-copy-and-paste text file and grab the info about Rembrandt. Copy to the clipboard, go to Brackets, and paste. Just after the opening p tag, type the word strong and hit the Tab key. Copy Rembrandt's name to your clipboard, and paste it in between the strong tags. We'll go to live preview lightning bolt button and open Chrome. Let's scroll down, and there's the bio. In the next clip, we'll add the prints for Prints gallery. See you there.

Preparing the Prints Gallery
In this clip, we'll add the images to our Rembrandt's prints section. Let's type h1 and press Tab. In those tags, let's type in the word Prints. Go down a few lines, and using Emmet, we'll add an IMG and multiply that by 17, which is the amount of prints we have. Holding down your Option key, slide upwards between the quote marks. Type the word img/, and then add the folder name and another slash. We'll go into the next folder named prints-thumbs. Add another slash and add triple x for name placeholders. In the source attribute, let's type in img/ to trigger the drop-down menu. Notice that the drop-down menu is only triggered when you have a single item. It's not triggered when you have a whole group. We'll use interface-imgs, add another slash, and choose s5-prints from the drop-down. In this site, open copy-and-paste- code.txt in the print section. I have all the file names for all the prints there since there are 17 of them. Let's rearrange the interfaces. Now we have the tedious task of copying and pasting the filenames, but through the magic of video, I'll speed this up for you. But feel free to take your time. Let's check it out in Google by clicking on the live preview lightning bolt button. Scroll down, and there's the Rembrandt prints. The last one is a decoration for the background. In the next clip, we'll add the code for some very famous and expensive paintings. See you there.

Some Famous and Expensive Paintings
In this clip, we'll set up the HTML for the painting section. In the painting section and in h1, press the Tab key. Between the tags, type Paintings. Add a return and then type in div.paintings -$ and multiply it by 10. The dollar sign will increment the code so each class name will be unique. Press the Tab key, and we'll have the code for 10 paintings. We're going to add the images with CSS, so we won't be adding any image HTML. There's also nothing to see in the preview, so we'll just move on. In the next clip, we'll add the drawings section content. See you there.

Develop the Drawing Gallery
In this clip, we'll add the drawings. This is pretty much the same as the prints section we completed earlier, but I want to show you a trick with Brackets. So type in an h1, and then hit the Tab key. Place the word Drawings between the tags. Now from the site-copy-and-paste- code.txt file, copy the file names for the drawings to your clipboard. Return to Brackets, and I'm going to open up the drawings section. I'll move the cursor back up to the top. Then we'll paste the filenames. Using the Option key, I'll slide upwards in front of all the file names so everything lines up. This is why a monospaced font is so important. We'll start with a less than sign and an image tag. Then we'll add in the source attribute, opening quotation mark, img/drawings-img/drawing-thumb/. Then I'll click in an open area to make sure everything is deselected. I'll click after the g in the first image. Then I'll hold on the Cmd key and click after each g. Type in the closing quotation mark, add a space, then we'll add the alt tag and the closing greater than sign. And it seems like I missed a few of these in the sea of code, so I'll copy this line and paste it until the code color looks correct. Missed this on my line 144. Now I'll go to the end and add a new image tag. In the source attribute, add img/. Go to the interface-imgs folder in the drop-down. And then choose the s7- drawing.png file from the drop-down. Let's check this out in Chrome. We'll scroll down, and there are all the drawings. The large last image is for site decoration. In the next clip, we'll work on the contact section. See you there.

The Contact Section
In this clip, we'll add the content section. We'll start with an aside, and then nest an h1 plus a p tag. Hit the Tab key. Let's go back to the site-copy-and-paste- code.txt file, and from the contact section, copy the word Contacts. Return to Brackets and paste it into the h1 tag. I'll get rid of the s in Contacts. I'll open up the p tag. Return to the text file and copy the address lines. Return to Brackets and paste them. I'll put a break tag after the first line. Then I'll copy the break tag to my clipboard, and I'll paste it after the second line, then the third, and, finally, after the phone number. Let's get rid of the extra space after the email address. Hold on the Option key and slide upwards, then tab everything over so it aligns. I'll get rid of this extra space. After closing the aside tag, add a new p and hit the Tab key. Return to the site-copy-and-paste- code.txt file and grab the info for the Google Map in the iframe tags. Return to Brackets and paste the map code inside the paragraph tags. I'm going to change the 600 in the width attribute to 100% so it fills in the parent container. Then I'll set the height to 100% too. Now we'll put in the background image. Type the image tag and hit the Tab key. In the source attribute, add img/interface-imgs/s8- contact.png. Let's take a look at it in Chrome. Scroll down and there's the contact section. In the next clip, we'll take care of the footer, so I'll see you there.

The Footer Section
In this clip, we'll be adding the content for the footer. Type the word aside and then multiply it four times. Hit the Tab key. Open up the first aside tag set, add h1+p. Then hit the Tab key again. Return to your site-copy-and-paste- code.txt file, and scroll down to Column One. Copy the name of the gallery to your clipboard. And then paste it into the h1 tags. Return to the TXT file, and this time grab everything else underneath the gallery name. Copy it to your clipboard, and then paste it into the p tags. I'm going to add a br tag after the first line, copy that to my clipboard, and add it to the second line. Then I'll tab the content over. I'll make sure everything lines up. I'll put in some room, and then we'll scroll down, and we'll get all those social media icons we created earlier. I'll copy those to my clipboard, go underneath the last p closing tag, and paste. Then I'll tab those over. Place your cursor in between the second set of aside tags and open those up. Type an h1 plus a ul, a greater than symbol, li, and inside curly braces, let's add triple x's and multiply that by 8. Then hit the Tab key again. Inside the h1 tags, add Menu. I'm going to copy this whole aside section here, and I'm going to replace the third set with the copied ones. Go back to the TXT file, and grab the title, Some Museum Showing Rembrandts, and I'm going to replace the word Menu with that. And then I'll fix it so it's all on one line. I'll also fix the tabbing. I'll copy this whole side once more on my clipboard, and this time, we'll replace the fourth set of asides with it. Grab the h1 tag and delete it. This time we'll put in Painting Names. Copy this whole thing, paste it one more time. I'm going to mess around with the alignment again. I'll replace the h1 tag with Other Links. Go underneath everything, and I'll type in a new set of aside tags. In those, I'll place an image tag, and I'll set the source to img/, and we'll go down to the interface-imgs folder. And I'll scroll down to the bottom and choose s9-footer- drawing.jpg. Click the lightning bolt light preview button, and inside of Chrome, we'll scroll down, and we can see all the footer links there. Return to Brackets. I'm going to delete these extra sets of social media icons we no longer need. Scroll back up to the top. And I'm going to go to my TXT file again, and if I scroll down to Column Two, I can see what goes in the menu list. Copy all that to my clipboard. I'm going to hold on my Option key and slide up at the end, and I'm going to delete the li tags and then the triple x's. And I'm just going to paste. And then I'm going to restore the closing li tag. So you can that in Brackets, we can paste multiple lines at the same time. I'll do all the other replacements off-camera. In the meantime, let's go ahead and scroll down, type in div, greater than symbol, and a p tag, hit the Tab key. Return to the TXT file and copy this line of JavaScript right here. Return to Brackets and paste. And this little line of JavaScript right here is going to update the year every single time the page is loaded. Go back to looking at it in Chrome, and now you can see the copyright date is correct. So that's how we add the footer information.

Summary
In this module, we added the un-stylized content. We looked at the finished site and added the HTML. We started by dividing the page into the different sections. Then we added the header section content. Afterwards, we set up the prints, paintings, and drawings sections. Following that, we included the painting of the week. Afterwards, we had the bio section. Then we set up the Prints gallery, the Paintings gallery, and the Drawings gallery. From there we added the contact section. And, finally, we wrapped it all up with the footer section including the copyright. In the next module, we'll add the Bootstrap CSS. See you there.

Using Bootstrap Styles
Introduction
In this module, we'll add the Bootstrap for native styles and learn how to tweak them. We'll start by adding Bootstrap containers, font colors, and background colors. Next, we'll make our images into responsive images with a simple Bootstrap class. Then we'll divide content into Bootstrap card components. After that, we'll learn about creating borders, margins, and padding the Bootstrap way. Then we'll style the painting of the week and about sections. Afterwards, we'll use Bootstrap styles in the prints, paintings, and drawings sections. We'll wind up the Bootstrap styling with the content and footer sections. Then we'll learn how easy it is to change our minds with the classes in HTML and Bootstrap. From there, we'll customize some Bootstrap presets. And, finally, we'll wrap it up by adding the CSS background images. So let's get started.

Fonts, Colors, and Display Text
In this clip, we'll add Bootstrap font colors, background colors, and containers. But, first, we'll give our opening body tag an ID that we'll use later for navigation to the top. Type in an ID attribute and put top in the quotation marks. Now that that's done, let's start with the Bootstrap classes. Add a class attribute in the opening body today, and type in bg-dark. Notice in Chrome the background went dark. Now if you look at the Bootstrap for our website, you can see that there are only a handful of colors available for use. Here you see a color chart of the Bootstrap background colors with their keywords. We'll override the background colors later, but for now, we'll use the default colors. Let's scroll down to the first section tag. I'll readjust my interface so you can see what happens better. We'll put in a class attribute and set it to container. Containers in Bootstrap are used as the most basic layout element, and we'll use them in our Rembrandts site for Bootstrap's built-in responsive breakpoints, which we talked about in the last module. Notice in Chrome the header section's no longer starting at the left end of the browser. But now in the window, it's inset. I know it's dark type against the dark background, so let's change the font colors. Go to the opening h1 tag and add a class attribute, add text-danger, and in Chrome the h1 is now red. If we look at the Bootstrap 4 website, we can see the class names for all the font colors. Again, the keywords are used as themed ideas in Bootstrap. Danger is red, success is green, and so on. Go down to the h5 tag and add the class attribute. This time add text-white, and in Chrome the h5 goes white. Now we can go to Chrome and easily see that the text is set inwards away from the edge of the browser because we used a container class. If I go back to Brackets and cut out the container class out of the opening section tag and return to Chrome, we can see that the h1 and h5 are now flush left to the edge of the browser window. Let's go back to Brackets and paste it back. Now the h1 and h5 inset again. In the next clip, we'll make our images responsive using the img-fluid Bootstrap class. See you there.

Responsive Images
In this clip, we'll make our images responsive by using the Bootstrap img-fluid class. In Brackets, I'm at the painting of the week section because this huge image will best demonstrate what the class does. I'll start by adding a class attribute to the painting of the week image tag. Inside the quotation marks, I'll type in img-fluid. Let's go to Chrome, and I'll expand the width of the browser window to the width of my video window, and then down again to phone size, and back up again, and then down again. And you can see as I do this that the image grows and shrinks with the width of the browser window. It's responsive. Now that we know what it does, let's go back to Brackets. I'm going to copy the class="img-fluid" to my clipboard. I'm going to scroll up to the trio section, and I'm going to paste it into the first image. I'll copy it again, this time with the spaces, and I'll paste it in the paintings section. I'll go down to the drawings section and paste it once more. Scroll down to the about section and paste it into the image there. Then scroll down to the prints section, and you can see we have 17 of these to do. I'll scroll back up to the very first image and click after the g in image, and I'll hold on my Cmd key, and I'll go down the line of all 17 images, and I'll put my cursor after each g. Then I'll paste the img-fluid class. In the paintings section, we'll take care of responsive images by using custom CSS. So we'll skip that for now. Now scroll down to the drawings section. Once more, click after the very first g. Then hold down your Cmd key and click after each g until all the drawings are selected. Then I'll paste the img-fluid class. Go back to Chrome, and go down to the drawings section. You can see all the images now fit inside the browser width. We'll go back to Brackets and slide down to the contact section. There in the image tag, we'll paste the class again. Then I'll paste the img-fluid class. Finally, we'll go down to the image at the bottom of the footer section. I'll paste the class in one more time. Go back to Chrome and scroll around the page. If I missed any images, go ahead and paste in the class yourself. In the next clip, we'll go ahead and add Bootstrap cards to our Rembrandt page. See you there.

Bootstrap Cards
In this clip, we're going to talk about Bootstrap cards. This is a section we'll be building in this clip, but it won't be in three columns until later. If we go to the Bootstrap website, we can see that Bootstrap cards provide a flexible and extensible content container with multiple variance and options. I'll scroll down to the sample here, and in this case, we have an image and a card title and a button. So a Bootstrap card is defined as a card is a flexible and extensible content container. It includes options for headers and footers, a wide variety of content, contextual background colors, and powerful display options. It includes options for headers and footers. Let's go to Brackets and build a Bootstrap card section. I'm already at the s2_trio section. I'm going to put a line after the opening section tag. We'll type in div.container, and I'll hit the Tab key. Then I'll cut the closing div tag to my clipboard, and paste it in between the closing section tag and the closing aside tag. I'll put another line in after the div we just made. I want to isolate each one of these sections visually from each other in Brackets, so I'm going to put a line before the image and then after the closing aside tag. I'll go back before the prints image, and I'll type in div.card, hit the Tab key. I'm going to cut the closing tag from that and set it after the prints closing aside tag. I'll put in another space. We'll do the same thing before the paintings image, div.card, hit the Tab key, cut the closing div tag, and I'll paste it after the paintings aside closing div. And, finally, we'll do it one more time for the drawings section, div.card, hit the Tab key, cut the closing div tag, and paste it after the aside section. Then I'll put in another space. I'm going to put some space after the opening div.card for the prints section and the image. And then I'll type div.card -body, hit the Tab key, cut out that closing div, and I'll paste it between the prints card and the paintings card. So you can see this gets fairly complicated with all these nesting divs. Once more, I'm going to isolate the paintings card. So I'll type in div.card -body, hit the Tab key, and cut out that closing div tag, paste it once more underneath the closing aside closing div tag for the card. And I just noticed I copied this div instead of cutting it, so let me delete it now. That explains the error div that's in red at the bottom of the screen. And I'll create the card-body div for the drawings card. Type in div.card -body, hit the Tab key, cut out the closing div tag, and paste it in the right place. And if you go over to Chrome right now, you can see that we have our cards in place. We'll go back to Brackets. And in the h2 tag for paintings, let's put in a class attribute. And we'll fill it with text-danger. Then I'll copy this to my clipboard. We'll go down and paste it in the h2 for drawings. And we'll scroll up again and paste it in the h2 for prints. So it is easy to get lost in all the nested divs inside of Bootstrap. What I want to do is tab everything over so it makes sense. So I'll tab in the content for prints. Let's go down and tab in the content for paintings. I'm just going to fix everything up here so it aligns. And we'll go down and tab in the content for drawings. Go back to Chrome, and I'll hit the Refresh button. And once we do, you can see that we have our cards set across the whole width of the parent, but they're there. In the next clip, we'll talk about Bootstrap display text spacing and borders. And I'll see you there.

Display Text Spacing and Borders
In this clip, we're going to talk about Bootstrap display text spacing and borders. Here we are back in Brackets, and to the right, you can see our webpage displayed in Chrome. I'm just going to fix up the remark here so it's all on one line. I'll put a return after the remark. In the opening container div, let's go ahead and add a py-5. Here we are in the Bootstrap website looking at the spacing, and there's some shorthand responsive margin and padding utility classes that we'll go through right now. P stands for padding. M stands for margin. Y stands for vertical. And X stands for horizontal. If you don't put an X or a Y, then it goes all the way around in the CSS. So if I put in p-5, it would be a setting of 5 all the way around the object. And initially it's set up for the default space of 16 pixels. So setting a 1 is the margin or padding and the spacer times of .25. And I'll let you read the rest of these by yourself. So let's go back to Brackets, and in the opening card div for prints, let's add an mx-2. In the h2, we'll add the class my-2. And you can see right in Chrome that the margins are changing. We'll scroll down and go to the paintings card, put in a space, mx-2, and then I'll go to the h2 for paintings, and once more we'll add my-2. We'll scroll down in Chrome, and you can see that. Now we'll scroll down in Brackets. And in the card for drawings, I'll drop mx-2. And in the h2 for drawings, I'll put an my-2. Scroll back up in Chrome, and you can see the difference. Now, what we're going to do is go to the h1 tag in the header and change the size of Rembrandt's name. We'll do that with display sizes, which are new in Bootstrap 4. And if we go to the getbootstrap.com website, you can see that there are four settings for display type. Display 1, display 2, display 3, and display 4. The sizes are much bigger than an h1 tag. And you can always overwrite them with your own settings. So I'll go back to Brackets, and in the h1 tag, we'll add after text-danger a space, and add display-4. And I'll pull Chrome over, and you can see that now we have a much larger Rembrandt name. Put Chrome back over to the side again. This time we'll add a border around our images. Go back to Brackets, and scroll back down to our trio section. In the opening image tag after img-fluid, I'll put a space and the word border, and then border-dark. And right away in Chrome, you can see around the prints, there's now a single rule line, which is the default size of a border in bootstrap. I'll copy these classes to my clipboard, scroll down to the paintings image, paste, and once more we'll go down to the drawings and paste again. If we pull Chrome over and scroll downwards, you can see that now the paintings, drawings, and prints images have one rule borders around them. In the next clip, we'll go ahead and stylize the painting of the week section and the about section, so I'll see you there.

Styling the Painting of the Week and About Sections
In this clip, we're going to stylize the painting of the week section and the about section. So in Brackets, let's go to the highlighted painting h1 tag. We'll add a class attribute, and inside we'll put in text-danger. And in Chrome you can see it's changed to red. Then in the section tag, let's add a class and set that to text-center with a padding vertical of a setting a 5. Underneath that section tag, we'll put in a space, and we'll type in div.container, hit the Tab key, cut out the closing div tag, and paste it after the paragraph tag. Then inside that div class, we'll add padding-4 so it goes all the way around the image. In the image class attribute, let's type in my-3, and we'll add a border in border-light. And you can see now around the image in Chrome, there is a single pixel white border. We'll go into the p tag, and we'll type in class="text-white". If I pull Chrome over, you can see the differences that have been made. Back to Brackets, we'll scroll down to the about section. In the opening section tag, let's add a class attribute. Inside of that class attribute, let's put in padding vertical setting of 5. Scroll around Chrome, and you can see the about section now a little bit better. In the h3 about tag, we'll add a class attribute with text-danger in it. After that, I'll put in a return after the opening section tag in the about section, type in div.container, hit the Tab key, cut out the closing div tag, and paste it underneath the paragraph. In the next clip, we'll take care of the artwork sections, and I'll see you there.

The Art Sections
In this clip, we'll take care of styling the artwork sections. In Brackets, I'm in the s5 print section. I'm going to put a class in the opening section tag, and we'll set the class to padding vertical with a setting of 5. Then I'll choose the h1 prints tag and put in a line above it. And I'll type in div.container, hit my Tab key, grab the closing div tag, and scroll down beneath the rest of the prints, and right before the closing section, I'm going to paste the closing div tag. Go back up to the top. And in the container class, I'll put in a space, and I'll type in padding vertical with a setting up 5. Then we'll go into the h1 tag and add a class attribute. And we'll set this to text-danger. Scroll around in Chrome. We'll scroll down to the paintings, drawings. I'll go down to the painting section, and I forgot to put in the class of img-fluid in the background image, so I'll do that now. I'll add a class attribute, and I'll stick in img-fluid. Now we'll go down to the painting section. In the opening section tag, I'll add a class, and I'll put in the padding vertical with a setting of 5. Put in a return before and after all the paintings. Type div.container, hit my Tab key, cut out the closing div tag, and paste it before the closing section tag. I'll align these div tags up. Go after the container class, put in a space, and put padding vertical with a setting of 5. Go into the h1, add a class attribute, and set this to text-danger. Scroll down to the drawing section. In the opening section tag, I'll add a class. We'll set the class equal to padding vertical with a setting of 5. Put in a space after the opening section tag, and type in div.container. Hit the Tab key, and once more cut out the closing div tag, and paste it before the closing section tag. I'll tab everything in. Go back up, and in the h1, we'll add a class equal to text-danger. After the work container in the opening div, I'll put in a padding vertical of 5. Pull over Chrome, and I have a broken image there, which I'll fix off-camera. And if we scroll up and down, we can see that our padding is set up. In the next clip, we'll take care of our contact and footer section, so I'll see you there.

The Contact and Footer Section
In this clip, we'll add Bootstrap styling to the content and footer sections. In Brackets, I'm at the s8_contact section. In the opening section tag of the contact section, I'll add a class attribute. Inside that, I'll set the padding vertically at a setting of 5. Go down to the h1 tag and add a class attribute. Inside, we'll put text-danger. At the end of the opening section tag, let's put in a return. Then we'll add div.container, press the Tab key, cut the closing div tag out. Scroll down to after the interface image before the closing section tag, and paste. Scroll back up to the opening tag and add padding vertically at a setting of 5. Now I just noticed I have my footer under the wrong remark. The ID is also wrong. Sorry about that. We'll fix that later, but for now, let's pretend it's correct and add a class attribute. We'll set it to text-white, and right away in Chrome, the text goes white. I'll scroll up and down so you can see how beautiful that is. Back to Brackets. I'm going to delete what I had underneath the remark in section 9. Then I'll cut out the section 10 remark. I'll adjust everything so it lines up. Tab it over. Then I'll scroll to the ID and read s09_footer. I'll scroll down to just before the copyright. In the opening div, I'll give it an ID of copyright and then an s10_ in front of it. Then to be consistent, I'll change the div tags to section tags. After the ID, I'll add a class attribute and set the text to white. Then we'll add the bg-dark class. We'll set the font smaller by using the Bootstrap small class. I'll set the margins by using the my-5 class. Next, I'll set the copyright to the middle by using the text-center class. Pull over Chrome, and the copyright is now in the middle of the browser window. Back to Brackets and scroll up to the gallery name in the h1 tag. Add a class attribute to the h1 tag and set it to text-danger with a size of H3. In Bootstrap, you can change the size of your headline simply by adding the h size you want, as well as a display-class as we discussed earlier. I'll copy this line to my clipboard, paste it in the menu h1, scroll down, paste again in the museums h1. Then scroll down and add it to the painting names h1. Let's scroll down in Chrome so you can see the changes. Next, we'll do it in the other lists. We'll start to style the un-order list's ul tag with Bootstrap classes. I'll add a class attribute. Then we'll set it to the list-unstyled class. I'll scroll up in Chrome, and you can see that this list is no longer indented and the bullets are gone. I'll copy this class attribute and rule to my clipboard. Scroll down and paste it into the painting names opening ul tag. Scroll down again and paste it into the other links opening ul tag. Scroll up and add it to the menu ul tag. Now we need to set up an inner container div to inset the footer. I'll type div.container. I'll hit the Tab key, cut the closing div tag to your clipboard, scroll way down underneath the background image aside tag, paste it before the closing section tag. Pull Chrome over, and scrolling up and down, it looks like our footer is styled. In the next clip, we'll switch up some of our Bootstrap classes in HTML. See you there.

Switching up Some Bootstrap and HTML
In this clip, we'll switch up some of our Bootstrap classes in HTML. In the last clip, you saw how easy it is to get lost in all the container divs and classes of Bootstrap. You may have also seen how easy it is to fix things. That's the nice thing about Bootstrap is you are always using prebuilt classes so you have no emotional stake in them. You didn't build them so you're not attached to them. For instance, in the s1_header section, I put in two section tags. This may or may not have happened while I was recording, but it doesn't matter because I only need one section tag. So I'll cut this class attribute to my clipboard, then I'll paste it into my aside tag right underneath it. Then I'll delete the opening duplicate section tag, then the closing section tag. I'll delete the extra space, and we're done. Experiment with Bootstrap, and you'll see how easy and time-saving it is. In the next clip, we'll customize some of our Bootstrap presets. See you there.

Customizing Bootstrap Presets
In this clip, we'll customize some of our Bootstrap presets. Here we are in Brackets, and I'm going to right-click on the sidebar, choose New File from the drop-down menu. Let's make the sidebar wider. Then I'll slide the lower scroll bar so you can see it better. I'll name the new file mystyles.css. Now we'll return to our HTML page so we can link it. Before the title tag but after all the other links, I'll add a link tag. Then I'll hit the Tab key. We're automatically in the href tag, so I'll type in mystyles.css, and that's it. We're linked. So down to the s1_section. I want to start by grabbing the Bootstrap class named text-danger. I'll copy the class name to my clipboard. We'll go to the mystyles.css file we just created. Put in a dot and paste the class name. Then add curly braces. Then open the curly braces up. I'll resize the interface so you can see the text file. In the CSS, add the selector font-family:. In the quotation marks, single or double, it doesn't matter as long as they match, add the name of the Google font Princess Sofia. Move outside the quotation mark, then type in, cursive;. Under that, add color:. If you look right now at the text file, you'll see that the font color is listed. That's the number we're going to type in, #e5904d. Then add an exclamation point, important;. Otherwise, the Bootstrap default won't be overwritten. Now add a text-shadow selector. Set it to 1 pixel 1 pixel offset, and we'll set the color as black. If we go to Chrome, you can see that all the headline tags for the class of text-danger are customized. If I select Rembrandt's name, you can see the drop-shadow we added to increase the readability. Let's go back to Brackets, then choose a text file again. I'm going to copy all the background colors to my clipboard. Actually, let's first scroll down to the section names and copy those instead. These names will make it easier to set up the rules. Hold down my Option key and slide upwards. I'll set a hashtag before them. Then I'll click after the r in header. Hold down the Cmd key, click, and go down the rest of the list. Now add curly braces. Then type background:. Add a hashtag and triple x. In the text file, I'll scroll back up to the background colors in the color background section. I'll copy the first hexadecimal color code to my clipboard. Back in Brackets, double-click on the first triple x and paste. Back to the text file, copy the s2 background color, then paste in Brackets. Now I'll do the s3 copy and paste. And I'll accelerate the video so we get through the rest of them and I don't start sounding like a robot. Return to Chrome, and pull it over. Scroll down, and you can see each section is a correct color at least for now. Return to Brackets, and then bring the text file forward. Scroll down to the section names again. Copy the list to your clipboard. Return to the CSS page, and paste. Hold on the Option key and slide it up before each name. I'll type in a forward slash and an asterisk. This will change these lines into remarks. I'll add a space and a bunch of hyphens, another space. Click after the r in header. Hold down the Cmd key, click, and go down the rest of the list. Put in a space. Add more hyphens. Then type */ to close off the comments. Then I'll add a return to separate them all. These will be the areas we'll use in the next module when we set up the CSS Grid and other custom CSS for each one of these sections. In the next clip, we'll add the background images. See you there.

Adding the Background Images
In this clip, we'll add the background images for the painting section and the header section. From the background color rules, copy the hashtag s1_header file to your clipboard. Scroll down to beneath the s1_header we just created in the last clip. Open it up if you need to. Then paste. Add some curly braces, and open those up. Inside, type background: url("img/"). That'll open up the drop-down menu. From the drop-down menu, go to the interface-imgs/. Then choose s1-header-lg- center.jpeg. Put a semicolon after the closing parenthesis. Set the height to 100vh;. That's 100% of the vertical height of the screen no matter how high the browser window is. I'll put a space in above that and type background-position:. Then choose center for the horizontal position and bottom for the vertical position. Then we'll type background-repeat: and set that to no-repeat. Then we'll add background-size:. Beneath that, we'll set that to cover so the image is now responsive. Go over to Chrome, resize the browser window, and everything works. For the paintings in Chrome, scroll down to the painting section. Return to Brackets, and scroll down to the s6_paintings remark. I'll open that section up. I'll go back to the index.html file and scroll until I'm in the painting section. I'll copy all the painting divs to my clipboard. Return to the CSS file and paste. Starting at the bottom, I'll place my cursor before the opening quotation mark and the letter p. Then I'll hold down my Option key and slide upwards. Once selected, hit the Backspace key and delete everything before the letter p. Then type a dot. Now I'll use my right arrow key and go all the way to the right. The digit 10 messed this up, but I'll stop before the greater than sign. Then I'll delete everything up to the 0 in 10. I'll click off and then click again after the greater than sign in painting-9. Hold down the Option key and slide up. Then I'll delete the rest up to the digit. Click off and then delete the last two arguments before the digit 10. Now I'll hold on the Option key and slide up after the 9. Hold down my Cmd key and click after the 0 in 10. Add curly braces. Then type background:url("img/"). Now because we have multiple items selected, no drop-down appears. I'll type in paintings-img/, then a triple x as a placeholder. Use my right arrow key and move the cursors after the closing quotation mark in the right parenthesis. Add a semicolon. Let's pull over the text file. I have all the paintings' file names listed. I'll select them and copy them to my clipboard. Go back to Brackets and all the lines are still selected. I'll use my left arrow key to go to the left of the closing quotation mark. I'll delete the three x's. I thought I might cut and paste them all individually, but this will be better. All we need to do is paste. All the paintings' file names are now linked to the CSS rules. With all the cursors still going, I'll put in a space. Then I'll type background-position:. We'll type in center once for both the horizontal and vertical positions. Then add a space and add background-size:. Type in cover;. Add another space and type height: 100px;. This last line is just temporary so we can see the painting images in Chrome. I'll pull Chrome over, and there they are. I'll scroll up and down for a while. Then I'll move Chrome off-screen again. Now I'll delete the height declaration. Pull over Chrome and they are now all invisible because there's nothing in those painting divs on the HTML page. Remember, these are CSS background images. That prepares us for the CSS Grid stuff in the next module.

Summary
In this module, we learned about Bootstrap for native styles and how to tweak them. We started by adding Bootstrap containers, font colors, and background colors. After that, we made our images into responsive images with a simple Bootstrap class. We divided some of our content into Bootstrap card components. After that, we learned about creating borders, margins, and padding the Bootstrap way. Then we stylized the painting of the week and the about sections. Afterwards, we used Bootstrap styles on the prints, paintings, and drawings sections. We wound up the Bootstrap styling by finishing the contact and footer sections. We learned about how easy it is to change our minds with the glasses in HTML and Bootstrap. From there, we customized some Bootstrap presets. And, finally, we wrapped it up by adding the CSS background images. In the next module, we'll add the CSS Grid module and some custom CSS. See you there.

Using CSS Grid for Page Layout
Introduction
In this module, we'll use the CSS Grid to lay out all of our content. We have our HTML content entered and stylized to Bootstrap. Now we get to lay that content out for phones, tablets, laptops, and desktops. First, we'll start with the header section and introduce constructing the CSS Grid. After that, we'll nest CSS Grid and learn about naming content for the grid. From there, we'll set up the prints and drawings section so that the many images flow automatically based on the browser width. Following that, it's another nested grid of paintings at non-uniform sizes surrounded by a two-column grid. Afterwards, we'll lay out the contact section with the Google Map. And, finally, wrap it all up with the footer section where we'll add and subtract features based on the browser width. So let's get started.

The Header
In this clip, we'll lay out the CSS Grid for our header section. On the screen, you'll see I have Brackets above the Chrome and we'll start off by adding style tags. And just for this demonstration, I'm going to put the style tags right underneath the HTML, so we don't have to flip back and forth between the CSS and the HTML pages for right now. Open up the style tags, and I'm going to copy the id="s1_header" from the section ID, add a hashtag, and paste. Curly braces open those up. To use the CSS Grid module, all we have to do is display everything in between the section tags as a grid. The next line will divide the grid up into four columns, add grid-template-columns:, then add repeat(4, 1fr), and also after the parentheses, add a semicolon. Repeat means repeat the stuff in the parentheses as many times as indicated by the first number, in this case, 4. And what should be repeated is one flexible unit or fr. Notice in Chrome that the h1 and the h5 tags have jumped over into the first column of the grid columns we just made. Let's go ahead and take a look at what this means. A template is defined as a preset format for a document used so that the format does not have to be re-created each time it is used. So here's the header section area without the type, just the Rembrandt self-portrait background image. To lay a grid over it, we use the CSS Grid template columns declaration for the vertical lines. The line in CSS we just typed in creates four equally spaced columns, each with the same width. Fr, again, stands for a fractional unit, which is also a flexible unit. Let's go back to Brackets and add the following line. Add grid-template-rows/columns. Then we'll add the same value of repeat(4, 1fr), and also after the parentheses, add a semicolon. With this declaration of CSS, we've added the horizontal lines and created rows. The grid is complete, and this is what it would look like if it were visible, four columns and for rows. What the CSS Grid module also does invisibly is number the grid lines. And the numbering only starts with 1 instead of 0 because this was created by graphic designers for graphic designers, and not programmers. We're going to use these numbers to position things on our grid. Back in Brackets, if we look at our HTML, we see in the header we have the outer section set to display a grid. Then we have the aside tag, which is a direct child of the section tag. In this case, we have one direct child, and that's the aside tag. The h1 and h5 are grandchildren of the section tag, and they are not affected by the CSS Grid. Only direct children are affected. What we want to do now is attach the direct children of the section tag to the grid lines. We'll set up a new rule then to grab the only direct child. So I'm going to copy the s1_header tag to my clipboard. And underneath the first rule, I'll paste it. I'll delete the existing curly brace, type in the word aside, and then add a new set of curly braces and open those up. Inside add a text-align property and set the value to center;. In Chrome the h1 and h5 are now centered. Now we want to move the aside container on the grid. Type in the property grid-column:. Now I'll add the digit 2, and in Chrome the headline jumps to the second column. But you can see that it's still only one column wide. Add a slash, add the number 4, and the h1 and h5 tags now stretch across the grid. Then put in a semicolon. If we go to our graphic, and I superimpose a grid over the Chrome section of the screen, you can see how far it stretches. Now we'll position the aside container vertically. Add grid-row: 4 / 5. And you can see in Chrome that the aside tag jumped down. I'm going to change the numbers to 2 / 3. And now the aside tag is over Rembrandt's face. Let's go to Chrome and change the width of the browser window. We'll go down to the phone size, and then we'll go back up to the width of our video window. Go to the text file. Let's grab the media query for large devices and paste it into Brackets. Select the three dots and open up the curly braces. We can move the aside tag around the grid by placing different numbers in our CSS on our grid-column property and our grid-row property. I'm going to go above the media query and grab the entire s1_header aside rule and copy to my clipboard, and then I'll paste it into the media query. Delete the first two declarations because all you want to do is change the vertical position. Then we'll change the min to max so this will only kick in at the width of 992 pixels and below. Let's go to Chrome and test it. We'll go smaller and larger. I want to overwrite the size of the Bootstrap display-4 class at a smaller size. Let's go back to Brackets. Go ahead and tab everything over. Add a hashtag and copy the s1_selector to the clipboard. Paste it after the hashtag and add a .display -4. Put in curly braces. Now we'll set the font size property value to 28 pixels. I want to make the h5 value smaller as well. Copy the whole rule to your clipboard, put in a return, and paste it. Change the 28 pixels to 12 pixels. Delete the display-4 selector and replace it with an h5 selector. If we go back to Chrome now and fill the entire screen, we can see that the headline is now over the forehead of Rembrandt. If we readjust the browser window width to below 992 pixels, the headline jumps down to the lower row. So if we look at a slide of our grid, these are the areas the headlines exist at the two different sizes we designated with our CSS declarations. Let's go back to Brackets, and let's make the height of the background image take only 50% of the screen when we're at the width of 992 pixels and below. I'll copy the hashtag s1 header selector to my clipboard again, make room for it, and paste it. Then we'll add curly braces. Inside that we'll add the height property and set it to 50% of the viewport height. Add the semicolon. Go back to Chrome. When we get smaller, the Rembrandt painting and the headline changes with the viewport. I'll go back to Brackets. I really only want the headlines in the lower row and centered. So I'll change the numbers back to 4 / 5, then go ahead and delete the grid row rule so that the values cascade into the media query. Go back to Chrome and test it. I'm going to go ahead and move the rules to our CSS page off-camera. In the next clip, we'll have a look at nested CSS Grid modules, and I'll see you there.

Nested CSS Grids
In this clip, we'll lay out nested CSS grids for the trio section of prints, paintings, and drawings. And this is the final effect we're going to go for when we're at the desktop and laptop sizes. So my slide right here shows us all three sizes at the same time, the desktop, tablet, and phone sizes. To achieve this, we have to have an outer grid, and then each direct child of the outer grid has a nested grid contained inside of it. Let's go to Brackets and our index.html page and add the custom class names we need to achieve this. Here I am at the s2_trio section. Let's add a custom class name after the py-5 class. I'm just going to call it myGrid for right now, which in the long run is probably not a good idea. Then inside the div with the class name of card-body, I'll add a new custom class name and call it mySubGrid. Copy the mySubGrid name and paste it in after the card-body for the paintings, and once more in the drawings card-body section class. So here's a slide of how our code breaks down for the grid. We just added the outer grid parent with the class of myGrid. And when we display this as myGrid, we end up with three children, which also happen to be Bootstrap cards. Here's another slide of how the children look in the code. Now for each card-body, we have an inner grid. Here are the direct children for mySubGrid class, the image tag in the aside container. The contents of the aside container are treated as one unit because they are grandchildren of the mySubGrid class. This is what will manipulate at different breakpoints to achieve different layouts. Here's a sub-grid at the laptop and desktop size. And here it is at the phone and tablet size. The tablet has a two-column layout in the inner grid, and the phone site has the elements stacked in the inner grid. Inside of Brackets, go to the mystyles.css page and open up the space under the s2_trio remark. Add .myGrid, curly braces. I can just paste right now because I have the 992 media query on my clipboard left over from the last video. If you need to copy and paste it from a text file, go ahead. I'll copy the 576 pixel media query to my clipboard. Then go back to Brackets and paste it above the 992 pixel media query. I'll also change 992 to 768, which is for the medium sized devices because I messed up. Now I'll Cmd+click after the n's in admin, and I'll delete those, and I'll replace that with max. Go back to the myGrid, curly braces, and open them up. Set the display to grid. Go to the three dots in the 576 pixel width, and open up curly braces there. Same thing for the 768 pixel width. Open up the curly braces. Go back to the myGrid rule, and add the grid-template-columns property. Set that to repeat 1 fraction of space equally 3 times. Then we'll set the grid template rows to 1 row. Now I left the repeat statement there because I'm going to change these numbers in the media queries in a little bit. If we pull over Chrome now, we can see we have a laptop in the desktop layout. Put Chrome back off the screen. Let's grab the entire rule and copy it to our clipboard. Paste it into the 576 pixel media query. Tab the stuff over. Then I'll grab the entire media query, select the 768 media query, and replace it by pasting. Change the max width back to 768 pixels. Now in the 576 media query, let's make it 1 column and 3 rows. And for the cascade, those media queries should actually be in the opposite order, so I'll swap out the max width values. In the 576 pixel media query, set the columns to 1, set the rows to 2, and set the value from 1fr to auto. This is going to fix any overflow problems we might run into with content length. In the 768 pixel media query, I'll set the grid-gap to 10 pixels. If we pull over Chrome now, we'll see that the Bootstrap cards are separated by gutters. If we collapse the browser window, the three columns go down to one column. Now I'll take care of the nested grids. In the 768 pixel media query, add a .mySubGrid selector, curly braces, and open them up. I'll copy all these declarations, and paste them into the new rule. Then I'll set it to two columns and one row. Then go ahead and change the grid-gab to 15 pixels. Pull over Chrome, and we have two columns in each card-body. Scroll down and grab the mySubGrid rule. Paste it into the 576 pixel media query. I'm going to fix up all my tabbing. Delete the display declaration. Set it to 1 column and 3 rows. Set the 1fr to auto. We'll go back to Chrome and go through the different sizes. At the phone size, the contents of each card are stacked, and when we go to the tablet size, the contents jump to two columns. Then when we go to the full size, the card-body contacts are stacked, but we have a three-column layout. In this clip and the last one, we used a grid's numbered lines to position a content. In the next clip, we'll name the grid spaces. So I'll see you there.

The About Section
In this clip, we'll lay out the CSS Grid for the about section. This is the layout we're looking at for the desktop laptop size. What we want to do is change this layout for the about section for the two sizes shown here. When we're at the tablet phone size, the items are all stacked. Otherwise, it's a two-column layout. Rather than use lines to position the elements on our grid like we did in the last few clips, this time we're going to name the elements and place them on the grid by their names. The self-portrait of Rembrandt we'll call image-selfportrait. The headline we'll call hd-about. And the bio of Rembrandt we'll call txt-about. Then in our grid, we'll have the three-column layout we used before except this time instead of setting the rows to the same high, we're going to let the auto adjust value adjust for the differences in height. We'll start off the HTML and ramp our elements inside of div tags. We'll wrap the image in a div.img -selfportrait, hit Tab, cut the closing tag, and paste it after the image element. Put in a return, and then before the h1, type div.hd -about. Hit tab again, cut the closing div tag, and paste it after the h1 element. Then we'll wrap the bio paragraph tag with a div.txt -about. Hit the Tab key, cut and paste the closing div tag at the end. I'm going to tab everything over. Let's go over to the CSS, and what we want to do here is create the three rules based on the classes we just created in HTML. So we have image-selfportrait, curly braces, hd-about, curly braces, and then txt-about, curly braces, and open those up. Actually, it'll open all of them up. Now we'll use the grid-area property and assign the same name and CSS so that we can refer to the area in the CSS grid-template-area's property. The grid-area property is used to assign a name to the grid item. In my opinion, it's always easier to cut and paste a name so you don't make any spelling mistakes. In the img-selfportrait, we'll add grid-area:, and then cut and paste img-selfportrait. Then in the hd-about, we'll add grid-area, cut and paste hd-about. End each line in a semicolon. Then in the txt-about area, we'll add grid-area, cut and paste, txt-about. Then we'll go to the text file, and we'll copy the 768 pixel media query to our clipboard. Paste that, get rid of the dots. Now that the elements are named in the CSS, let's go back to the HTML and add a class to name the entire grid. In the container div, add s4_about_grid. I'll copy that line to my clipboard. Let's go back to the CSS page, add a dot, and paste the same class name. Add curly braces and open them up. Then set the display to grid; Set up the three columns like before. Type in grid-template-columns: repeat(3, 1fr);. Then type grid-template-roles: repeat(3, auto);. Auto will adjust the vertical height for the content. Now we've created three columns and three rows, so our grid looks just like this graphic except it's invisible. Set the grid-gap to 10 pixels. Now we'll use the names we created before instead of the numbers. Type in grid-templates-areas:. Put in a return and add a pair of quotation marks. We'll repeat image-selfportrait three times. So what we've done now is assign the element by name to the top row in our grid. We'll add a new line and some new quotation marks. Copy the hd-about to our clipboard, and then paste that three times. And if we go to a graphic, now we've assigned that element to the second row of our grip. Back to Brackets, and add a new line, quotation marks, copy txt-about, and paste that three times. Now all the nine squares of our grid are filled in. In the CSS declaration with the semicolon, and I like to put that semicolon on its own line so that I can see the grid easily visually. Now, even though our Rembrandt self-portrait image is occupying the whole first row inside of the code, we really only want it to be in the center visually. And we tackle that again with numbers. In the CSS column grid, add grid-column, add 2 / 3. Like our graphic, the image will now only fill in between the second and third lines since a portrait is vertical. Now we'll center the title using the text-align and the hd-about rule. Then we'll set the line height to 2 for the paragraph text. Now let's take a look at the about section in Chrome, and we find that the layout is complete and it works. So we'll go back to the CSS and copy the s4_about_grid rule to our clipboard. We'll go down to the 768 pixel media query and paste it. Then we'll delete all the CSS declarations that'll be picked up by the cascade. Now we'll change up the grid. We want the image to take up the whole first column. Then we want the title to take up the rest of the first row. And, finally, the body copy will take up the remaining squares. So back in the CSS, we'll change the value of the grid-template-area's property to match our grid graphic. Then we'll copy the other rules and paste them into the media query. We don't need any grid-area declaration, so delete them. For the self-portrait, I'll set that to the first column with the line numbers. Delete the grid-area. We'll change the text-align to left. I'll delete the declarations from the txt-about. Under the text-align: left, let's add padding-left to make it 20 pixels. I'll copy that line to my clipboard, and I'll paste it into the txt-about rule. Jump back into Chrome, and here we have the layout for the laptop and the desktops. I'll shrink the browser window down, and now everything is stacked for the phone and tablet view. Now some of you may have noticed that I added the 992 pixel media query in the code while you were looking at a graphic. This is the layout I'd like you to try on your own for devices 992 pixels and larger. As a hint, here's how the layout is to be set up. It's a two-column by two-row setup, and this is how the grid-template-area's declaration is set up. See if you can create this layout by yourself. Remember to move the picture and the grid lines using the grid-column property with line numbers. The solution is in the finished code for this clip. In the next clip, we'll add the CSS for the print section. See you there.

The Prints and Drawing Sections
In this clip, we're going to create the CSS Grid for the prints and then the drawings section using the same CSS. We have on our website 16 separate prints thumbnails that we want to put into a responsive grid. But creating, populating, and maintaining a CSS Grid the way we did in the last few clips would be really hard and inefficient. Because there are so many images for this section, we're going to let the CSS Grid module decide how many columns there are based on the width of the browser window. So we'll be doing this for the 16 separate prints, and then later on, we'll also be using the same CSS for the 16 separate drawings. What we need to do first is set up our HTML so we have a container display as a grid. And then all the drawing thumbnails will be direct children of that container. In Brackets go to the HTML file, and scroll up to the s5 print section. Add a line under the h1 element, and type in div.my -thumbs. Hit the Tab key. Cut out the closing div tag, and slide all the way to the bottom of the thumbnails. Paste it after the last image tag. Now in our code, we have the my-thumbs div, and inside of that, we have the background declaration graphic and the 16 print thumbnails. Each one of these images is now a grid item. Inside our CSS, let's set up the rule. Type .my -thumbs and curly braces. Open them up. We'll set the display to grid;. Type in grid-template-columns:. Now type in repeat(), and instead of adding a number, type auto-fit, then add minmax(200px, 1fr). We don't need rows because they will be generated automatically by the browser. It will make as many rows as it needs. The height of the images will also be created automatically. Again, repeat means repeat this as many times as indicated by the first number. Instead of a number, we put in auto-fit so the pattern is repeated as many times as necessary to fill the parent container. Now instead of a unit or a fixed or relative measurement, we're calling the minmax function. According to Mozilla's developer website, minmax is defined as the minmax CSS function defines a size range greater than or equal to min and less than or equal to max. It is used with CSS Grids. In this case, we want a column that has a minimum width of 200 pixels but a maximum width of 1 flexible unit or 1fr. So the minimum width of the column will be 200 pixels, and as soon as a parent width is wide enough, it will have two columns, and then three columns, and then so on. This also means there are no media queries needed. In Brackets, add a grid-gap of 10 pixels. And when the images are in a single column, we'll use the CSS Grid property of justify-items: center. This will center all the items in the center of the space available. After that, let's style the images. So type a .my -thumbs, and then add img afterwards. Add curly braces and open them up. Since by default images are inline items, we're going to override that default and display them as blocks. Next, we'll give all the items a drop shadow with box-shadow:. We'll set the shadow offset to 1 pixel vertically, 1 pixel horizontally, a 5-pixel blur, and set the color as rgba(black or 0, 0, 0.4 ) for a 40% opacity. If I scroll around in Chrome, we can now see all the images have drop shadows, which is good, but so does the background declaration image, and that's bad. So to fix that, let's return to our HTML, scroll down, and find that image element. After the Bootstrap img-fluid class, add a custom class name of my-bk-image. I'll select and copy that name to my clipboard, then I'll make some room in the CSS, type dot, and paste. I'll add curly braces and open them up. I'll copy the box-shadow declaration to my clipboard, and paste it. Then I'll set the offset to 0 0, the blur to 0, and set the color to 0 opacity. And to make it more specific, I'll copy my-thumbs selector and place it in front of my-bk-image. Let's go to Chrome, and we scroll around, adjust the width, the prints stack and form columns. Now we'll add the classes to the drawing section. In the HTML, scroll down to the drawing section, and under the h1 element, put in a line. Type div.my -thumbs. Hit the Tab key. Cut the closing div tag and paste it again after the last image tag. Then in the last image class attribute after image fluid, add my-bk-image class. Scroll down to the drawings section in Chrome, and that's complete too. We'll use the Bootstrap modal component to give all the prints, paintings, and drawings thumbnails a lightbox effect in the next module. In the next clip, we'll be working on the painting section. So I'll see you there.

The Paintings Grid
In this clip, we'll create the CSS Grids for the painting section. Like the trio section of prints, paintings, and drawings, the painting section has a parent outer grid and a nested inner grid. We have a total of 10 very expensive Rembrandt paintings in our grid. Go to the CSS, and in the .painting -1 rule underneath everything else, make some space and add grid-area: one. Spell out one o-n-e. To name the grid areas of all our paintings, we'll just use their number value spelled out. So now that painting number one is done, let's copy the whole declaration to our clipboard, paste it in painting-2, and replace the word one with t-w-o. I'll let you do the rest of them until all the paintings are numbered. Now we need to add a parent container div to our HTML. I already isolated all the painting divs for us. Type the word aside and then hit the Tab key. Cut the closing aside tag to your clipboard, and paste it right before the closing div tag. Hold down your Option key and slide up in front of all the divs, and tab them in. Now isolate all the divs again above and below the elements. Now type in div.my -paintings- container.my - paintings- area.my -cursor. Hit the Tab key. Cut out the closing div tag, and paste it underneath all the painting elements. Go back to the CSS, and we'll tackle these rules one at a time. We'll start with the my-cursor rule. Add .my -cursor, curly braces, and open them up. Let's set the cursor to a pointer. And then we'll hide the border while the painting you click on gains focus. So type outline: and set the value to none. Above that type dot and add my-paintings-container selector, curly braces, and open them up. Set the display to grid. then we'll set the minimum height of this div to 600 pixels. Remember, all the paintings in this area are added with CSS, so we have to prevent the divs from getting too small or you won't be able to see the paintings. Set the background to white. Then we'll set up the grid-template-columns to repeat one flexible unit five times so we have five columns. Then we'll had four rows with the grid-template-rows property. This will give us a grid of 20 squares, which you can see right here in this graphic. We'll place all the paintings on them by using the grid area names we added earlier. We can make the paintings different sizes simply by placing their names in the grid multiple times like you see here. Add the grid-template-areas property. Place in four sets of quotation marks each on their own line, and then add a semicolon. In the first row, we'll add the names one one two three three. Add the second row, one one four five five. The third row is six seven seven five five six eight nine nine ten. And that will fill in the grid with the paintings just like this graphic. Back to the CSS, so we'll add a grid-gap of 2 pixels. This allows the white background we added earlier to show through like the paintings have borders. Then we'll wrap the whole thing in a 2-pixel solid white border. And we'll set the outline to none. Let's go back to the HTML page, and under the closing aside tag, let's add an image tag. Hit the Tab key. Set the source to img/. From the pop-up menu, choose interface-imgs. Then choose the s6-painting- 200.png file. In the alt tag, go ahead and set it to Windmill. Add the Bootstrap class img-fluid. Then create a custom class called windmill. Pull over Chrome, and there you can see all our paintings are in place. They don't look good right now because we haven't worked on the order grid yet, so the paintings placement isn't quite right. Scroll down, and there's the background declaration windmill, which doesn't seem to quite match the background color. So I'll go back to the CSS and scroll to find the background colors. I'll change the color to #10 for red, 10 for green, and 14 for blue. And I just realized I'm missing semicolons at the end of all these, so I'll add them all really quickly. Jump to Chrome, and there's the new background color. Let's add the outer grid. First, jump back to the HTML and move the closing aside tag from above the windmill picture to below it. The aside will now be the new parent container for the inner grid. The two direct children for the outer grid will be the div surrounding the painting divs and the windmill image element. I'll copy the section ID to my clipboard. Then back in the CSS page, I'll start a new rule, hashtag, and paste the ID. Add the aside curly braces and open them up. We'll set this to display as a grid. Then set the grid template columns to repeat (auto-fit, minmax(40%, 1fr)). So the smallest the two child items will ever be is 40% of the screen size. At larger sizes, the browser will auto-fit the two grid children and flexible units. Now we'll add the selectors for the windmill image, curly braces, and open them up. Set the width to 60%. We want this windmill to be in the lower right-hand corner, so add justify-self: end; to move it all the way to the right. Then set the image to the bottom of the screen by adding a line -self: end; to set it to the bottom. Go to Chrome, and now the windmill is in line with the paintings. When we get down to the phone size, we'll make the windmill img disappear in the next module. And we'll also use the Bootstrap modal component to give all these paintings a lightbox effect. In the next clip, we'll add the grid to the contact section. So I'll see you there.

The Contact Grid
In this clip, we're going to lay out the CSS Grid for the contact section. We have three layouts, one for the phone, one for tablets, and one for laptops and above. So inside our HTML page, let's make room for the section opening tag. Add div., the Bootstrap class container, our own custom class, .contacts_grid, and the Bootstrap dot padding vertical at a setting of 5. Hit the Tab key. Cut the closing div tag to your clipboard. Scroll down and paste it before the closing section tag. So now we're setting up three children for our CSS Grid, the section address, a Google map, and the background image. In the code, the direct children in the grid parent contacts_grid are the contents of the aside tag, the Google map, and the decorative image. And now we'll name them all for the CSS. Back in the HTML, add a class attribute. Add a class contact-copy. After img-fluid in the img class attribute, add contact-picture. In the paragraph tag, add a class attribute. Add a class content-map. Now the three children are named, and we're ready to jump over to our CSS. Add the content-copy rule, and add the grid-area property. I'll copy the selector name and paste it in as a value. Now let's do the same thing for the contact-map rule. Add a grid-area, copy and paste. And once more for the contact-picture rule. Add a grid-area, copy and paste. Then we'll set up the rule for the parent container, .contacts_grid, curly braces, open them up. Set the display property to grid. We're going to set up our grid with three columns and two rows. So in the CSS, we'll add the grid-template-columns rule with a repeat of three set to one flexible unit. Next, add grid-auto-rows:. The CSS Grid-auto-rows property, rather than creating straightforward rows with a specific place and size, the grid-auto-rows property lets the browser automatically create the rows in a way that is not plainly expressed. The row size will be based on the content size, so we want rows based on our layout. So as a CSS value, add repeat(2, 1fr). We'll set the grid-gap to 10 pixels. After, we'll use grid-template, which is a shortcut property. We can combine grid-template-rows, grid-template-columns, and grid-template-areas all in one declaration. I'll add two rows of quotation marks and a semicolon at the end. Here's the layout for the named items in our grid. We have the map taking up four squares, and the address and decorative picture each taking up one square stacked to the left. And back in our CSS, we simply added the names in the quotes. Now go to the text file and grab the 768 pixel media query. Then go back to the text file and grab the 576 pixel media query. We'll select the three dots open the curly braces in the first media query. I'll copy the contacts_grid selector to my clipboard and paste it into the media query. Add a pair of curly braces and open those up. I'll copy all the rules to my clipboard and then paste them into this rule. Then let's fix the tabbing. Change the number of columns to 2 and set the unit to auto. In the grid-auto-rows, change the unit to 3 and set 1 fr to auto. Remove the grid-gap. What we want to do is set up the named items in our grid like this. So in the CSS, I've set up the grid-template property like this. Now let's move the Rembrandt image into the proper location within its grid square. We'll type in the justify-self property, and set it to the end. I'm going to change the min to max so this will kick in at 768 pixels and below. Let's go to Chrome and change the width of the browser window and see how this thing's working. The tablet size looks good, so let's go back to Brackets, go to the 576 pixel media query, grab the three dots, and open up the Brackets. Make some room. Change min to max. I'm going to copy this whole contacts_grid rule to my clipboard and paste it into the 576 pixel media query. Set the grid-template-columns to auto. Set the grid-auto-rows to 4. Then we'll change the grid-template. I'll select the space between the class names, put in quotes, and then put in a return. Delete the extra space to move the line over. Then separate the contact-maps. I'll delete the last contact-map grid name. Copy and paste the contact-picture rule to control the windmill picture. And I accidentally deleted the closing curly brace, so I'll replace it. Change end to center as a justify-self value. Now if we look at the screens again, you can see that the statue is facing stage left on the phone size and stage right on the other sides. So how do we flip it? With the transform declaration and a horizontal scaleX value. The digit 1 stands for 100%, so by adding a minus sign in front of it, we flip the image. Finally, I want to center the headline and address at the phone size. So I'll type in the contact-copy property and set text-align to center. Pull over Chrome, and all of our info is there at our phone size. In the next clip, we'll add the grid to the footer section. See you there.

The Footer Grid
In this clip, we finish off this module by laying up the CSS Grid for the footer section. We have two sizes shown here, one at 776 pixels and below and the other is for the 768 pixels and above. In the code, we have the CSS Grid parent name s9_footer_grid, and then we have six direct children. You don't need to be able to read the code in the slide. Here are the names we will give the direct children in the HTML code. So let's go to the HTML. We'll start by adding the parent container div. Type in div., the Bootstrap class container, .s9_footer_grid., the Bootstrap padding class, p vertical with the setting of 5. Hit the Tab key. Cut out the closing div tag. Scroll all the way down to the bottom where we see the red closing section tag. Put in a return, and let's paste it. Now we'll name each of the direct children grid names and class attributes. In the aside tag, give it a class attribute, and we'll name it footer_hours. Then add a style tag and set the property to grid-area: footer_hours;. Then we'll add the Bootstrap vertical padding. I'm going to add the Bootstrap resizing class of h3 after the text-danger class to reduce the size of the text in each headline tag. That's a whole lot easier than changing all the h tags in all our titles. I'll go down and add an h3 after each text-danger class. Then I'll a pull over Chrome. Looking at it in Chrome, I'm going to change the h3s to h5s. That's what I like about Bootstrap is it's easy to design on the fly with it. I'll go back to Chrome and scroll around, and I think that looks a lot better. So I'd like you to take all these grid-area names that are listed here, and then add them to the HTML tags in the way I just showed you for the remaining sections including using the style attribute with the grid-area property. Now we'll lay in this grid for the phone size. You can see in this slide the grid names we're going to give in the HTML, so when we build the rules for the grid parent, we'll use these grid names. In our CSS, go ahead and add a .s9_footer_grid. Add curly braces and open those up. Then inside we'll add the font size, and we'll set it to small. then we'll set the display to grid. After that we had the grid-template-columns:. And we'll say repeat(1, 1fr);. This will give us a one-column layout. Then we'll add the rows, grid-template-rows, and we'll set those to repeat(6, auto);. This will give us one column and six rows. Next, we'll add a grid-gap of 10 pixels, and then we'll work on the layout for our grid-template-areas. This slide shows you the stacked order of all the areas, footer_hours, footer¬_menu, footer_museum, footer_painting_names, footer_links, and the footer_image. Here in the CSS, I already have them all entered, and we just add the semicolon, tab it over, and I'll fix that typo I have in 10 pixels. Back in the layout, we have the Some Museums Showing Rembrandts, and I want that title to be centered. So in the CSS, I'll add .footer_museum h1, curly braces, open them up, and add text-align: center;. And I'll fix the misspelling in museum. In this graphic, the footer on the left shows you what it would look like and that's kind of dull and boring the way the headlines interact with the lists. So what I want to do is I want to flip position of the headlines with the lists and then change the alignment of the list from flush left to flush right. To do that, we're going to use the flex-direction property, and we need to set it to row-reverse. Back in CSS, I want to add .footer_museum, and then .footer_links, curly braces, open those up. We'll set the flex-direction to row-reverse;. We'll set the text-align to the right. And that's just going to affect the footer_museum and footer¬_links' direct children. Now I want to change the width of the image at the bottom of the footer, the little man kneeling. So to do that, I'll type in .footer_image, curly braces, open those up. We'll set the width at 50%;, and we'll justify-self to the flex-end;. And that will position it to the left. Type in .footer_hours, curly braces, open those up, and set the text-align for those hours to the left;. Pull over Chrome and there are the hours flush left. Now we'll put in a media query with a maximum width of 767 pixels. Add curly braces and open those up. In this media query, we're going to add the CSS we only want to have happen at the 767 pixel size and any size smaller, like the dashed line black border, the center the text at the top, using the CSS flexible box to center the titles with the lists, and flip the bottom image. So back in the CSS, we'll add the class names of all the sections we want to affect, .footer_menu, .footer_museum, .footer_painting_names, .footer_links, curly braces, open those up. Inside that we'll add the border-top of 1 pixel dashed black;, padding-top is 10 pixels, the display is flex. We'll justify the content base evenly in the aligned items property. We'll align the items, the list, and the headlines vertically by using the center value. Add a .footer_image, curly braces, open those up, and we'll flip that image by using the transform-property with the scaleX of a -1;. Then we'll center the footer_hours, curly braces, and we'll text-align that to the center for this media query size. Add the media query for the larger size, @media with a minimum width of 768 pixels, curly braces, open those up. I incremented the pixel width by one so it doesn't overlap and confuse the browser. I'll scroll up and grab the div selector, s9_footer_grid, scroll back down, and paste it, add curly braces, and open those up. For the larger styles, we'll get rid of the padding, set the hours text to flush left alignment again, flip the image once more, turn off the display flex so the headlines are over the lists, set up two columns, and illuminate the borders between the lists. In the CSS, set the font size to the initial size because we made it small before. Set the grid-template-columns to two equal flexible units. Set up the grid-template-areas so they look like this layout. And here's the important part of CSS Grid. Even though in the HTML, the footer image is at the bottom before the closing section tag, we can move it to anywhere we'd like on the grid. We're no longer bound by the position the code is in in the HTML. This is what really shows you the power the of CSS Grid module. You can move anything anywhere you want, regardless of the order the HTML code is in. Back to the CSS, and our grid-template-areas are entered. Now we'll create the rule for the footer_museum, the footer_links, and the h1 in the footer_links. Type in curly braces and open those up. Set the flex to none. Set the padding-top to 20. Set the text-align to left. Jump over to Chrome, and now we have the footer at full width and at phone size.

Summary
In this module, we used the CSS Grid to lay out all of our content, and we specified how the content was to be laid out for phones, tablets, laptops, and desktops. First, we started with the header section and introduced constructing the CSS Grid. After that, we nested CSS Grids and learned about naming content for the grid layout. From there, we set up the prints and drawings sections so that many images float automatically based on the browser width. Following that, we nested a grid of paintings at nonuniform sizes surrounded by a two-column grid. Afterwards, we laid out the contact section. And, finally, we wrapped it all up with the footer section that will add and subtract layout features based on the browser width. In the next module, we'll finish up the site. See you there.

Finishing the Site and Summary
Introduction
In this module, we'll finish the site, and summarize the course. We'll thicken the border around our painting of the week. We'll create a Bootstrap button group out of the social media icons in the footer. After that, we'll add the Bootstrap navbar to navigate around our site. Then we'll create Bootstrap modals to create a lightbox effect for the paintings. Finally, we'll tweak the painting section. So let's get started.

Thickening a Border
In this clip, we'll thicken up the border around the painting of the week. Here's the painting of the week as it is right now. We're just going to override the native CSS and Bootstrap 4 for this image. The default width is 1 pixel. I'll move the browser back so we can see the code. I already have Bracket scrolled to the painting of the week section. At the end of the image tag, let's add a style attribute. Inside the quotation marks, add the border width CSS property, and set the value to 3 pixels. I'm making sure I'm overriding Bootstrap CSS with the important value before the semicolon. Now if we pull Chrome over again, you can see that the border around the painting is 3 pixels wide. In the next clip, we'll turn our social media icons into a Bootstrap button group. See you there.

Adding a Bootstrap Button Group
In this clip, we'll turn our social media icons into a Bootstrap button bar. On the Bootstrap website, a button toolbar is defined as a series of buttons together on a single line. And you have to add your own JavaScript. I won't be covering the JavaScript here because it's outside the scope of this course, but it is pretty simple to implement, especially with jQuery. Anyway, you can see what a button group looks like here on the Bootstrap website. If we go to our website, you can see the social media icons here. These are the ones we'll be converting into a button bar. I'll pull Brackets to the front, add a line before and after the social media icons. I'll just slide the Brackets interface over so you can see the buttons on the website take shape. Add one more line and type a div.btn -toolbar. Then hit the Tab key. Now I'll have attributes. We'll set the role equal to toolbar. Then we'll set the aria-label equal to social media buttons. The aria-label is for screen readers to make the site accessible. I'll cut the closing div tag and paste it after the social media icons to enclose them. This Bootstrap class btn-toolbar tells Bootstrap CSS the limits of the bar. I'll hold on my Option key and slide up in front of the tags. Then I'll tab everything in. I'll fix the alignment of the parent div. Next, I'll add a line and then type div.btn - group.m -2 for a margin of a setting of 2 that goes all the way around the bar, then another dot and btn-group-sm for small. That last class will make the button bar smaller so it doesn't look so clunky. Hit the Tab key, and now we have an inner div with these three classes. Cut the closing div tag, and paste it once more after the social media icons. Once more I'll hold on the Option key and slide upwards in front of the media icons. This time I'll type in an opening button tag. I'll give it a type of button. Then type class=, then quotation marks. Give it a class of btn. Then I'll color our new buttons with the Bootstrap color of btn-info, which is assigned a blue light color. I'll click behind the closing i tag on the first line. Then I'll hold on my Cmd key and click after the remaining i tags. I'll then add the closing button tags. And everything's the wrong color in the code because I forgot to close off the opening button tag with a greater than sign. Sorry about that. I'll click after the closing quotation mark after info, and then Cmd+click to get the rest of them. Then I'll put in the closing greater than sign tag. If you pull Chrome over, you can now see our button group. I can roll over them, and the pointer cursor appears, and they have built-in hover states. In the next clip, we'll add our Bootstrap navigation bar, and I'll see you there.

Setting up the Bootstrap Navbar
In this clip, we'll add the Bootstrap navigation bar. In the navbar documentation on getbootstrap.com, you'll find many samples of the navbar component. There's lots of potential here. What we're interested in is a navbar component that we can place at the top of our page in a fixed position. Let's go to Brackets. I'll copy the header remark to my clipboard and paste it. Let's change the s1 header to 00 NAVBAR. Underneath that, let's add nav.navbar fixed-top to keep the bar fixed to the top of the page, and then navbar-expand-lg for large. This last class is for the site's responsiveness. I'll add dots between the classes for Emmet. At the end, add .navbar - dark.bg -dark for the Bootstrap coloring. Hit the Tab key. Then we'll open up the nav tags. Move the cursor to the top, and add div.container Tab key to add a container. I added too many returns between these last two tags, so let's delete them and close up the gap between them. Inside the div, add an anchor tag and hit Tab. In the href attribute, add #top. This is where the name of the gallery goes, and clicking on it will take you to the top ID in the opening body tag. Copy the gallery name from the title tag, and paste it between the anchor tags. Add the class attribute before the href and the navbar-brand class. And to match the other headline, let's add the text-danger class. Pull over Chrome, and it's looking good. Return to Brackets. Now add a button tag .navbar -toggler navbar-toggler-right. Hit the Tab key. Open up the button tags. Inside those put a span.navbar -toggler-icon. Hit the Tab key again. We're going to add so more attributes to the opening button tag. Add type="button" data-toggle="collapse" data-target="#navbarResponsive". Then for responsiveness, add aria-controls="navbarResponsive". Then aria-expanded="false" and aria-label="Toggle Navigation". Let's scroll down the page a little bit. I'll open up the space after the closing button tag, and we'll add div.collapse navbar-collapse#navbarResponsive. I'll put a dot between collapse and navbar. Then go to the end and hit Tab. Inside that div, type ul.navbar - nav.ml -auto. Hit the Tab key, and open up the ul. In that, type li.nav -items, and nest inside that an anchor tag .nav -link. We'll surround this with parentheses and I'll multiply that by 8. Hit the Tab key, and now we have eight nested links. In between the first set of anchor tags, let's type in the word Works. And I'll scroll down, and I'll grab the ID of s2_trio. Copy that to my clipboard. Return up to the first li, and in the HREF, paste it. Then I'll set a hashtag before it. Now I'll set up all the other section names inside this menu. I'll scroll down, and I'll copy Highlighted Painting to my clipboard, scroll back up to the menu, and paste. Then go to the third li tag and type in About between the anchor tags. The fourth one is Prints. The fifth one is Paintings. The sixth one is Drawings. The seventh link is Contact. And the final one is Info. Now we have to link up all the hrefs to the different sections on our page. So I'm going to make the interface width smaller, and go to our text file, and underneath energy section names, I'm going to copy the s3 and paste it into the correct href with a hashtag in front of it. Then we'll do s4, #s4 and paste. Then we'll copy s5, #s5, s6, #s6, s7, #s7, s8, #s8, s9, paste that one, and put a hashtag in front of it. And we don't need one for s10. Now we'll pull over Chrome again, and you can see the menu's in place. And because we put that JavaScript in earlier, the scroll is animated. So let's look at how you can add a Bootstrap navbar to your web page. In the next clip, we'll do Bootstrap modals, and I'll see you there.

Bootstrap Modals for the Lightbox Effect
In this clip, we're going to create Bootstrap modals for all of our paintings. In the finished site here, if you click on a painting, it appears and it disappears when I click on the X. So a modal inside of Bootstrap is located in the Component sections of the documentation. Let's go over to Brackets, scroll down to the s6_paintings section. We're going to add so more attributes to the painting-1 div. Go ahead and put a space at the end, and type data-toggle="modal". And then another space, and add another attribute called data-target="#painting1". And now we'll scroll down and add the information for painting 1 to the very bottom. And right after the closing script tag for the animated scroll, I'm going to put in some space. Put in the word PAINTING-1. And I'll put in a bunch of hyphens. And afterwards, I'll put another bunch of hyphens. And then I'll select the whole thing and hit Cmd/ to turn them into a remark. So each painting, print, and drawing on our site is going to have its own pop-up modal window. And I'm going to set up the code for each one of these modal windows with a set of remarks. Now in this clip, I'm only going to do the first one because there are 16 prints, 16 drawings, and 12 paintings. But you'll get the idea from just the one. And then in the working file are all the final modal setup for you. Or, better yet, set them up yourself. So the first thing we need to do is type a div.modal .fade, and then we'll give it a hashtag of painting1. and that will convert it into a div with a class of modal.fade, and the ID's going to be painting1. Hit the Tab key. Then we'll set in a tabindex, and we'll set that to 1. And the role of this will be a dialog, and the aria-labeledby attribute has Rembrandt Painting 1 in there. Now ideally you would have the name of the painting in there, but that's okay. Add another attribute of aria-hidden, and we'll set that to true. Then I'll open up the div, and it looks like I misspelled labeledby, so I'll correct this spelling. Return back to in between the divs, and I'll type div.modal -dialog modal-dialog-centered. I'll add that dot between the two classes. Hit the Tab key, and I'll open up that div. Get rid of the space between the two closing div tags. Now we'll set the role of this div to document. In between those two div tags, I'll type div.modal -content, hit the Tab key. And once more we'll nest another div tag in there, div.modal -header. Hit the Tab key. And inside that, we'll put a button tag with the class of close. Hit the Tab key. And I'm going to set the type equal to button. Put in a data-dismiss="modal" aria-label="close". And then we'll set in a set of span tags with the aria-hidden="true". Now inside the span tags, I'll put the multiplication symbol special character, &times;. Underneath the modal header div, we'll set a new div, and we'll give it a class of modal-body. Hit the Tab key. Open that up. And we'll set in an image tag img-fluid. Hit the Tab key. And we'll set the source equal to img/. It opens up the drop-down. We'll set that to paintings-img. And then we'll find our first painting. Now if we pull Chrome over again, you come over here and click, the first painting appears. In the next clip, we'll tweak the paintings section, and I'll see you there.

Tweaking the Painting Section
In this clip, we're going to tweak the paintings section. I have my browser open at the phone size. What I want to do is when we get to the phone size, I want to get rid of that background windmill picture. So to do that, let's return to Brackets. In the mystyles.css file, let's go beneath the painting section and type an @media tag and give it a maximum width of 576 pixels, curly braces, then we'll add the .windmill class, curly braces, and we'll set display to none. So once it reaches the maximum width and below of 576 pixels, that windmill will disappear.

Summary
In this module, we finished up the site with a little more Bootstrap. We thickened the border around our painting of the week. We created a Bootstrap button group out of the social media icons in the footer. After that we added the Bootstrap navbar to navigate around our site. Then we looked at Bootstrap modals to create a lightbox effect for Rembrandt's prints, paintings, and drawings. Finally, we tweaked the painting section. In this course, we learned how to combine the power of Bootstrap with the CSS Grid module. Both are very powerful ways to create websites. We covered a lot of material in a short amount of time, and I hope you enjoyed creating a Rembrandt website as much as I enjoyed showing you how to code it. I hope you do many wonderful sites with Bootstrap in combination with the CSS Grid module. So for now, this is Mario. And until next time, thanks for watching, and I hope you had fun with my course, Creating a Site with CSS Grid and Bootstrap 4.

Course author
Author: Mario Duilio Macari	
Mario Duilio Macari
Mario Macari has spent more than ten plus years as a coder specializing in HTML5, CSS3, Javascript and other client and server side languages. He is also an award-winning artist and holds a BFA in...

Course info
Level
Intermediate
Rating
3.6 stars with 24 raters(24)
My rating
null stars

Duration
2h 14m
Released
19 Feb 2019
Share course
