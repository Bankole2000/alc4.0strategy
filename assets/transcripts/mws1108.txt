Mobile First Responsive Web Design
by Jon Flanders

This course is an introduction to concepts behind mobile-first responsive web design.

Responsive web design is a recent strategy for building web sites that can respond and adapt to multiple devices and their respective resolutions. Mobile first is the concept of creating the design for your mobile web site first, and then building out that design for larger resolutions. This course covers the concepts that developers need to know to be able to work in this new way of designing web sites.

Course author
Author: Jon Flanders	
Jon Flanders
<p>Although Jon spent the first few years of his professional life as an attorney, he quickly
 found chasing bits more interesting than chasing ambulances. He first worked at the
 University of...

Course info
Level
Intermediate
Rating
4 stars with 462 raters(462)
My rating
null stars

Duration
2h 57m
Released
29 Apr 2013
Share course

Introduction
Introduction
Hi. This is Jon Flanders with Pluralsight, and this course is entitled Mobile First Responsive Web Design. So, besides all the buzz words in the title, what is this course about? This course is about this little doohickey thing here. This is a picture of a smart phone. And starting with the iPhone in 2007 and up till today, the mobile web browsers out there in the world are just getting bigger and bigger. They're not getting bigger, I mean the number of them that are accessing our sites on their mobile devices is growing, and it's growing faster than anybody ever anticipated. So, this course is about ways that you can not only react to this, but take advantage of it and use it as a way to make your websites and your web applications even better than they were before.

Why Bother
So, you may ask, why do I even care about designing for mobile? As I mentioned, the iPhone in 2007 in the last slide, the iPhone, one of its features, and probably one of the reasons that mobile web browsing has gotten so huge, is that if you go to a website that doesn't care if you're a mobile device or not, you just get the website. So, this is the city of Los Angeles. I live in Los Angeles. I thought this would be a good example of a site that doesn't care if I am looking at it on my iPhone or not. It looks just the same whether I'm looking at it on my phone or looking at it using my desktop browser. And so this was a great thing, right? This was a great thing that Apple did, is that they made the mobile browser essentially lie to the server and to the JavaScript engine about what the resolution of the browser is, and so that websites that before wouldn't render correctly on mobile devices are now rendering correctly on mobile devices just like if they were on the desktop. This is of course is a modulo any flash content, but assuming that you don't have any flash content, you just have regular old HTML and JavaScript, CSS, your site would look, you know, at least normal in the browser on the mobile device. So, that's great. Good thing that Apple did this, made the growth of the mobile web possible, but as this growth is happening, I think we can do better, and a lot of people out there also think that we can do better. We can look at things like what about this little button down here to get to Facebook. How am I going to possibly hit that and not hit Twitter and RSS at the same time with my fat fingers, right? If I click there, I can guarantee you that the browser really isn't going to be able to disambiguate which of those three buttons that I have just tried to click on. And so that's just a small example of why a site like this even, would benefit from not just taking advantage of this we'll display you just like if you're a desktop website feature that most of the mobile devices today have, but taking advantage of some of the newer features inside of HTML, HTML5, CSS3, and JavaScript to be able to create an experience for the mobile user that is as rich as, or even richer than, the experience that the desktop user gets. So, again, a few years ago, people who were coming to our websites were coming to our websites using a desktop, using a laptop. This is what I'm calling the golden days of web browsing. This is like 2006. I'm calling this old and busted, although of course a lot of people are still coming to your sites using these devices so they're not completely gone from our world, but if we take a look at tablets and smart phones, this is web browsing today, and I'm calling this the new hotness because again the point of this course and the point of a mobile first Responsive Web Design isn't just hey let's take our existing desktop website and make it, you know, sort of fit better inside of a mobile device. It's really about thinking about how can we make our website so concentrated and so usable that if we can present just that basic content to the user on a mobile device, we can create such a great experience and then enhance that experience as the user goes to larger resolutions, to tablets, to laptops, and to desktops. So, this slide is here to help convince you, or mostly I put it in to help convince your pointy-haired bosses or give you something you can go back to them and say, "Hey, look at these projections because mobile is a big deal today. " According to Morgan Stanley Research, in 2009 there was about 1. 4 billion users of the desktop web and somewhere around 80 million users of the mobile web or from their mobile devices I should say. In 2015, their prediction is based upon the way that mobile is growing, that the majority of people using the web will be using the web with their mobile devices, smart phones, tablets, these will be the majority of users on the internet by 2015. And a lot of these predictions that these companies are making, by the way, are coming true a lot faster than they ever predicted. So, you know, this could be the end of 2013 or 2014. It's happening. There's no question that this is the way that things are going. It's going to happen. You don't want to be left out. You want your mobile experience for your users to be a good one.

Options
So, what are your options? I'm going to layout actions that you can do and what that's going to mean to you as a developer, and what that's going to mean potentially to your users. So, one action, as I've already mentioned, is do nothing. Watch this course, walk away and say, "Hey, that's great, but nothing we're going to do right now. " Might make you happy. Hey, you don't have any extra work. Your users are going to be unhappy because you have users that are coming to your site today that are mobile users, and unless you have adopted some sort of responsive design, some sort of mobile strategy, your users are going to be unhappy. Even if they can basically use your site, once they get to someplace where they can't use it, they are going to be unhappy. They're going to go away, they're not going to buy from you, they're not going to use your services, whatever it is that you're selling or you're trying to promote, it's not going to work well if you just continue with the desktop websites work great in mobile because that's just not really true, right? They render, but they don't really work that great. Another option, and one that a number of people have been doing for years, is to bifurcate your site. So, m. facebook. com, m. microsoft. com is a way that a lot of companies have said yep we want to take advantage of this mobile revolution and we're just going to create this whole site dedicated to mobile only, and we're going to redirect everybody who comes to our regular site to our mobile site. Now this tends to make a developer unhappy, especially if you have to work on both sites because maintaining two sites that are completely separate, and often completely separate code bases, is often difficult. Your users might be happy or unhappy, and I say that because, you know, your user might be happy if they get a m. site and it gives them what they want. They're going to be unhappy if they get a m. site and it doesn't give them what they want and if they have no way to get to what they want. And the other thing that makes a lot of mobile users very unhappy is if they can't switch to the desktop version because they know that stuffs there on the desktop version, they've looked at it before, they can't get to it, you won't let them switch to the desktop view, and I can't tell you how many times my wife has just gone, "Errr, why won't they let me switch to the desktop view because I know what I want is there, but all they're showing me is this limited mobile view. " Most often, when you bifurcate your code like this, you're going to end up with a less than usable experience on mobile especially. You can also do server reaction. So, on the server you can detect what the browser is. Is the user on a smart phone, is the user on a tablet, and send back different code, HTML, CSS, JavaScript, based upon that server site detection. Again, generally developers are not very happy about that. You don't have two different code bases, but you're going to have a lot of extra work in order to have that dichotomy on the server. And again, users happy or unhappy. Again, depends on what they're looking for; what they want. How about if we try to make everybody happy? I believe that you can make everybody happy by using a Responsive Web Design, a Responsive Web Design that starts from mobile first and uses what's called progressive enhancement to create more content, a richer experience, potentially as a user goes from mobile to the desktop. But the idea of using these modern techniques in order to create one site that can work well for all these different platforms is that you can concentrate your design on those things that are really the most important for your mobile users, and that will make your mobile users happy. And your desktop users can also get the advantage of you going for mobile first because that will help you again sort of concentrate and hone in your site into its core purposes, and then you can start giving them more, more, more through the progressive enhancement. And I hope by the end of this course you'll feel like this is an actual real path to happiness, maybe not overall happiness everywhere all the time, but you know, general developer happiness, which is a good thing too.

What You Want
Alright. So, what you want is you want an experience when a user goes to your site with a mobile device that gives the user what they need. This particular image is an example of, "Hey, let's just duplicate our regular site and show it to mobile users. " What we want is something that changes, right, something that adapts in some way to that resolution, either explicitly adapts or is just very fluid, and it works well when a user goes to a tablet, it works well when the user turns the resolution of the tablet to landscape, it works well on a laptop, and it works well on a desktop screen.

It isn't Just About Mobile
Now, one of the things that I always probably harp on when I talk to people about responsive design is that it isn't just about mobile. You know, again, most of this course is about mobile first and this idea of concentrating your content and making your site more functional, and then expanding that content and giving more functionality as you get larger and larger resolutions. Generally speaking, people stop at about 1024 x 768, which is sort of the resolution today that people are sort of targeting as the, you know, number one resolution. Well, that's great. Unfortunately, for people like me, and I think more people every day, my resolution on my desktop is not 1024 x 768. It's actually 2560 x 1440. I actually had to look that up. And so what happens a lot is even in a responsive website, when I look at it and I go full screen, I get a bunch of whitespace, right? Why is that whitespace there? You know, when we start thinking about things like Apple TV, Google TV, we start thinking about Xbox, PlayStation, Wiis all having some ability to use the web. I think what you're going to see more and more of is not only are people getting bigger and bigger desktop monitors with higher resolutions, but people are going to be using your website in places that you didn't anticipate like their living room. So, this is sort of a waste, right? There is this wasted space. Why can't, if I'm giving out content, spread the content out and make it work great not only for 1024 x 768, but also 2560 x 1440? You know, if I'm showing a bunch of items for sale, why don't I show more items? Now, at some point, you might say, "Hey that's going to be a little overwhelming for the customer, " but boy, if you can show a customer something that they want to buy at that bigger resolution that they wouldn't have seen and maybe wouldn't have found by searching or clicking around, you know again, you're missing a sale. So, in the same way that you want to concentrate your functionality down for the mobile user, you want to think about all the possibilities of where your site might be used. And again, I call this big to bigger, right. You don't just want to think about little to big or little to medium to big, but big to bigger, and big is what I refer to as the desktop and bigger is, you know, a bigger desktop or a TV, right? These are things that you might want to consider as well. And Responsive Web Design allows you to continue on this path as you move up in terms of device sizes.

Mobile First
But, as I said, as you're building this design, you want to think about doing mobile first. This is going to take a mindset shift in the people that are designing your site. I mean, unless you already have a team that's done mobile first or you bring in somebody that's done mobile first, if all you've designed is desktop websites, it's going to take a mind shift. But, again, if you're going to build a responsive site, you have to start at one end or the other. If you start on the big end, generally speaking, that's going to lead to an unsatisfactory mobile site because, you know, things like buttons are going to be too small to hit with touch, you're going to leave out the most important contents. You know you, again, want to start with the smallest form factor and then work up, right. So, using small and going to big is generally speaking what people have found to be the most safe approach. To again, the idea here is not just to have a site that works on mobile and works on desktop, but to have a great site on mobile and a great site on the desktop. Now, the other thing to remember is this is just a design pattern, this idea of mobile first. You don't have to stick to it religiously, and you can, and it often is very productive to actually do mobile first, let's say your first screen, your homepage, and then to do the desktop, and then to do another screen mobile and another screen on the desktop. Sort of concurrently even you can do this. But what you don't want to have happen is you don't want to have the focus move from mobile to the desktop. You want to keep your focus on mobile, and again, that's because what people have found to be the most effective is when you do that, you're concentrating down, you are focusing in, and you're going to give the mobile experience the most benefits.

Benefits of Mobile First
Now, there are a number of benefits other than this intense concentration that you can get. Again, this idea of focusing on the most important feature or content or action, you'll actually get improved SEO. The search engines are aware of responsive design and you're going to get better search results. There's also stuff that might happen that you might not have expected. Let's say that you are building a website for a company and one of the things that the company wants to show to people is, you know, where is the closest location. Let's say you're a fast food chain. So, on the mobile device, mobile device has geolocation built in. Everybody knows this. So, on the mobile device it might make sense if the thing you see mobile users doing the most is looking for the closest location, hey, why not just show them the closest location as the main piece of content. That might be a very effective design for your mobile first site. You might not have thought about it if you hadn't focused on the mobile side, and what you might not know or you probably will discover is that this actually works in most modern browsers on the desktop as well. So, if you can give this experience of finding the closest location immediately on the homepage to mobile users, maybe it is something that you want to feature on the homepage in your desktop version. So, mobile features can drive new features for the desktop version of your site as well. Again, the main benefit is you're going to have a mobile site that really rocks and people want to use. There are a number of case studies out there that show you incredible numbers that when mobile web design is done correctly, the benefits are measurable and large. I'll be talking about some of those in the last module of the course, so just so you know they're there. You can go look at them now if you want or just wait until then. Now, here's a funny comic that I pulled from XKCD. It's a Venn diagram of course, and on the one side of the Venn diagram is things on the front page of a university website. So, campus slideshow, alumni news, press releases, and then the name of the school. And then on the right things that people actually go to the site to look for, faculty phone numbers, address, application, calendar, campus police, usable campus map, parking information. So, the idea here is, you know, obviously for your desktop site you'd like to concentrate in the features and things that get featured on your page. Often times that gets waylaid by the pointy-haired people or the, you know, the business users or the stakeholders, whatever you call them. One of the great things about going mobile first is you can really push this concept of we have to concentrate on those things that people really want to do or need to do on our site, and you can hopefully leave some of the extraneous stuff behind or, you know, at least focus in on those core values, those core things, and hopefully be able to inform, not just the mobile design, but also the desktop design.

Progressive Enhancement
So, besides the buzzwords in the title, there are a number of other buzzwords that we're going to have to deal with. You should know what those buzzwords are and what they mean. When I use the term buzzword, I don't just mean anything negative. Progressive enhancement is a good description for what you're going to do if you're going to build a mobile first design that's responsive because as the layout gets bigger and bigger, you're going to want to progressively give the user more and more and more functionality. So, in the mobile experience, they're going to get, you know, 5% of the core functionality; on the tablet, 10%, 20% of the core functionality, maybe even 50%, and then as you go up to higher resolutions, you're going to give more and more, so then, you know, again, all of the core functionality and then, you know, whatever else sort of fancy stuff that the users want on the website will go in there as well. But, the basic idea is fairly clear, focus in on and concentrate on the core functionality for mobile and then start adding additional functionality; expanding out the design as the resolution gets bigger and bigger.

Adaptive vs. Responsive
Now, I've been talking about responsive design, and there are two other words that often come up in discussions about responsive design. One word is adaptive, and the other word is fluid. They're all related in a way. They're all talking about the same thing, which is I have a site that I would like to have change when a user looks at it on a mobile device or let's say a desktop. The difference is, of course, how are you going to do that? So, responsive is really the bigger term, right? It's the parent term. It is the base class, right? Responsive design encompasses both adaptive and fluid web design. Fluid web design means that your layout is going to change in a very fluid, smooth way, and generally you achieve this by having your layout use percentages rather than pixels. Adaptive design on the other hand uses pixels. Adaptive design is going to change the layout based upon specific break points of resolution and will use responsive design features, the main one being something called something called media queries that we'll talk about during the course, to be able to change the resolution. Responsive just means changing the layout continuously. And fluid, again, means that the layout will change, but in a very fluid manner. So, if you're using a fluid design, that means that you're concentrating on percentages, not pixels. If you're doing an adaptive design, which is most often done when you're trying to adapt an existing desktop site to mobile, not always, but most of the time, that's where the word has been used. But it really just means that rather than having a percentage design, you're still having a pixel-based layout or design, but you're changing those pixels based upon changes in the resolution of the devices that are looking at your site, okay. We'll talk more about adaptive features, responsive, and fluid as we go along, but just remember that both adaptive and fluid are contained in this idea of responsive.

Even if You Have an App
Now, you may get to this point in the course, and if you haven't already thought about it, I will suggest it to you here, what if you have an app. If you already have an app, right, if I'm the fast food chain and I already have an app, why do I want a mobile website, a mobile experience, why can't I just give them the desktop experience? And that's great if you have an app. You might think that you can get away without having a mobile experience, but what if your users don't have your app, and what if your users don't have the platform that you built your app for, right? So, have you built one for iOS and Android, Android and Windows Phone, Kindle Fire? What about the new Blackberry that may or may not be successful that's just come out. The idea here is even if you cover the major platforms of today, which are iOS and Android, do you have a site that works well on iPhones and Android phones, as well Android tablets and the iPad? Again, what if those people don't have your app for those platforms? So, even if you have an app for a particular platform, there's all the other platforms to think about, there are the people on that platform that don't have your app to think about, and more importantly, there is the new platform of tomorrow, right? In 2007 when the iPhone came out, we certainly could have imagined that the iPhone would be fairly dominant, but when Android came out, I don't think many people thought that Android would be much of a competitor, and now Android is the number one mobile operating system. Remember just a few years ago Nokia was the number one cell phone company in the world, and now it's down to like a 3% market share, but maybe they'll come back with Windows phone. Who knows? The market is very fickle and can change very quickly, especially as things are changing so much between people using PCs and desktops to using mobile. It's hard to know exactly what's going to happen. So, having a mobile first web application, as well as an app, means that you will be able to respond quickly to new platforms and to give everybody, even people who don't have your app, a great experience.

Summary
Okay, so Responsive Web Design, it's the future, but the future is really today. Take advantage of today and your mobile users will be happy with your site. Your desktop users will be probably even happier because one of the things that people have found by doing this mobile first approach is that it really has helped them to concentrate down the core functionality and actions of their site, and that can only help both the mobile users who get to see just that, as well as the desktop users who get to see that plus, plus.

Mobile First Responsive Web Design - Layout in a Responsive World
Introduction
Hi. This is Jon Flanders with Pluralsight, and in this module I'm going to be talking about Layout in a Responsive World. So, this module is about one thing really, and one thing only, which is fluidity, which is talking about building a mobile-first responsive design that is fluid. Now, there are a couple approaches to responsive design as I mentioned in the introductory module. One is to use an adaptive approach, and one is to use fluidity or a fluid design. I'm going to be talking about fluidity in this particular module, and in the next module, we'll talk more about adaptive design.

Know What You are Building
So, this seems to be a fairly straightforward idea. You have to know what you're building. Now, when you're taking a mobile approach and when you're taking a fluid approach, you have to have those things in mind when you sit down with your core team and figure out what is it that we're going to build. And using Responsive Web Design is going to take a mind shift. It's going to require your designers, your stakeholders, your project managers, and your developers time to be able to change the way they think about designing a website, time to change from thinking about pixels to thinking about percentages, from thinking about desktop to thinking about mobile. The thing that you want to do when you're talking about building a mobile-first responsive website is concentrate on what is the most important thing that your users want or need to do when they come to your site. What content is the most important? What action is the most important? Because that's the thing you want right there, middle of the page, in a big way, inside of your mobile-first design. Now, once you go from that design to desktop, you can then add additional functionality, but again this is the mindset that you have to make everybody switch into, which is rather than switching into what are all things we want people to do and what are the most important, just concentrate on what are the most important things. Write down, let's say, the top five and vote on it, and then come up with the top one, and that's the thing that you'll have right there in the middle of your mobile-first web design. Again, get this right and you will get more people to use your site, you will convert more transactions if you're an ecommerce site. Whatever your purpose of your site is, you will get more of it if you do this right. If you do this wrong, there's nothing really that you can do except for go back to the drawing board and try again. Nothing in terms of CSS or mobile-first or not mobile-first is really going to help you. Now in terms of figuring out what that is, I said maybe right down the top five things and vote on it. Another thing to do is actually look at evidence. So, if you look at logs, you can come up with quantitative evidence of what users do when they come to your site. And if you're using Google Analytics or Webtrends or one of those tools, you can use those reports to determine what your users are doing. Make sure to look at desktop users, not necessarily mobile users, because of course your mobile users might be getting frustrated and leaving. And that's another powerful piece of evidence to show your stakeholders to push forward a mobile-first approach. And then qualitative data by doing focus groups and usability testing. Obviously, both of these things, quantitative and qualitative data, are both important pieces of information to help drive your design. And again, what we're really trying to drive here is determining what content is the most important content for you to present in your mobile-first design.

Brainstorm
Now, once you have decided what that content is, you have to figure out what you want your design to look like. Now again, you may have designers that come in and just give you a design, you might work with the designers, you might work with the stakeholders, you might all get into a room and brainstorm or whiteboard or sketch or wireframe. For the site that I'm going to be showing you that I did for this particular course, the person I work with, my project manager, who also happens to be my wife, we sat down at a coffee house with some coffee and some sketch boards, some sketch tools, and essentially mapped out after talking about mobile and talking about how we wanted this site to work, we basically came up with a design. And we happened to be using a worksheet or sketchbook that is, you know, 320 x 480, showing me basically the size of a screen on an iPhone.

What I'm Building
So, this is what I'm building. I'm actually rebuilding a site as part of the exercise of this course. This is a real site that's out there live right now. It's a real site that's going to be up with the new design that I have come up with after building it for this course. This site happens to be also somebody in my family. This is my father-in-law. He is a music producer, and he has done a lot of different artists and different albums and different things in his life, and this site is basically just, you know, his site for here I am, I'm a producer, this is everything that I've done, here's records I've worked on, people I have worked with, etc., etc. So, there's no real ecommerce functionality. It's basically just an information site for people who are interested in information or interested in contacting him for producing work.

Mobile Layout Design
So, there are going to be a couple of things that regardless of your site, you're going to have to think about when you're thinking about how your site is going to lay out in mobile, and there are some conventions that are probably best to follow. A lot of times designers want to break out of convention and do something different, but there are reasons why people do things in a certain way, and the advantage of following those trends, unless you have some substantial evidence that those trends don't apply to you or you have some new information about usability, is that the usability factor of your site will be high. So, for example, the logo should go up in the upper left hand corner. Okay. This is true for regular sites, desktop-size sites, as well as for mobile sites. Navigation. In terms of a mobile site, the navigation is there's going to be something that's going to go up in the upper right corner, some sort of icon, some sort of pop-up, something that will show the navigation. And again, this is a convention. There are times to break out of that convention, and we'll talk about navigation patterns in the next module, but for our basic layout, we want to start with logo in the upper left, navigation in the upper right. Now another factor to consider in addition to the navigation at the top, you might want to have navigation at the bottom in terms of a tab bar. A tab bar is used quite often, especially in iOS applications, and the reason that the tab bar is so useful is it's easy to reach with your thumb. So, as you're holding your mobile device, you can move your thumb around and touch the icons on the tab bar fairly easily. The downside is that there are some devices that have buttons down near the tab bar that aren't tactile. So, it's fairly easy, for example on a Windows phone, to hit the homepage button when you're trying to hit a button on the tab bar. So, this design doesn't work for everyone, but it's certainly something that you can consider as either main navigation or an alternate set of navigation links. Search. Everybody wants to have search, and having search on your mobile site is extremely important because of course if somebody is looking for information on your site, and if that information in the desktop site is presented to them very plainly on the homepage, but it's not on the mobile site because you just can't fit it in, having search capability is again pretty important. Generally speaking, you're going to have an icon, and then that icon when clicked on, touched, will expose a text box that the user can type in a search term. And then the only other thing that's common among all different sites is of course content. And content is the thing that we're going to concentrate most on, especially in this module. There are of course lots of different ways to do navigation and lots of different ways to do search and design of logos, but content is really the main focus for building your mobile site. And the great thing about that focus on content is once you focus on that content and hone it in on your mobile site, that can really help you to inform what your desktop and larger sized sites should have in terms of content. It will really help to focus again your energy and your viewpoint as to what is important for your site.

My Mobile Design
So, here's my prototype. This is picture of the prototype, and I will be showing you the code for this prototype in just a little while, but I just wanted to show it in terms of talking about the things that I just discussed. I've got the logo in the upper left corner; I've got the main content area right there in the meat of the site, and then a couple of different things down at the bottom, which will be ancillary actions or ancillary pieces of content. What's going to go in the main content area is a basically showcase of artists that this producer has worked with. So, all of the really big artists will come up in, you know, sort of very large, as large as possible images on mobile, and then users will then click on those images and get more information about the producers work with that particular artist. After sitting down and discussing the site, we basically came up with two things that were the most important pieces of content on the site. One was a the list of the artists that the producer has worked with because if somebody is coming to this site looking for information about the producer, they want to know who has that producer worked with and what albums has that producer created with those artists. And then the second most important piece of content was contact, and we'll be talking more about contact in the next module when we start talking about other mobile design features.

Design Desktop Concurrently
Now, the title of this course is Responsive Web Design Using Mobile-First. We've talked about how mobile-first is the future of web design or it should be your future. It should be your, not just future, but it should be your current state of being in terms of designing your sites. But there's another thing to consider, which is as you're designing your mobile site, you might also want to design your desktop site at the same time. Now, as we start talking about fluid design versus adaptive design, we'll talk about where you might want to have a tablet view and maybe a bigger than desktop view, but in terms of two sort of pivots, the mobile pivot again, your site is concentrated on the essence of what your site is about, and the desktop you have a little bit more leeway for putting additional content, and those too will be good endpoints or sort of bookends for designing the other sizes of your site if you're using something like adaptive design. If you're using something more like fluid design, it will probably just grow and grow and grow, and again, we'll talk about how we'll implement both of those things. The point here is just because you're using a mobile-first approach doesn't mean that you can't design more than one resolution at a time. Designing a desktop at the same time really allows you to be able to figure out up front if your ideas about the progressive enhancement that you're going to apply to the desktop site, whether those ideas are actually going to work. So, this is probably the best approach. The best approach is to say let's design the mobile, and at the same time, let's design the desktop. And so, in my design prototype, I am designing the mobile and the desktop, and if you look, they look pretty much exactly the same except, of course, the desktop is bigger. And that's because, again, this module is about the layout, the basic layout, and the basic layout of my site is going to be fluid. So, that means as the site gets bigger with higher resolutions, the content area just continues to grow and grow and grow. As the resolution goes down from desktop to tablet, from tablet to smart phone, the size of the content area just gets smaller and smaller. Now, what this doesn't mean, just to be very clear, is it doesn't mean that the same content is going to be showing in the desktop version versus the smart phone version. But what this means is the basic layout of my site is going to stay the same. So again, you have to have a mindset of two things whenever you're designing a mobile-first site. First of all is what is the layout going to be? And the second thing is, how am I going to progressively enhance the content as my layout gets larger? Now again, you might also have something where your layout changes when it goes to a larger resolution. Again, we'll talk more about that when we talk about adaptive design in the next module, but again, concentrating on this idea of fluidity over fluid design, I'm presenting here a design that again is completely fluid. It just grows as the resolution or the viewport of the browser grows.

Viewport
That term that I just used, viewport, is actually extremely important. Viewport really isn't something that we think about when we design desktop browser apps or desktop websites, but the viewport is the visible area of the browser window, and of course on a smart phone or a tablet, the viewport is basically everything that's visible inside of the browser except for the navigation bar and the tab bar at the bottom. So, when the iPhone first came out in 2007, it was the first mobile browser that claimed that, hey our mobile browsing experience means you can browse the whole web. Now, of course, that was modulo any flash content and that's a whole different story, but in terms of basic HTML, when I would go to a site on my desktop, and then I would go to a site on my iPhone, they would look exactly the same because of course in 2007 nobody was really doing mobile-first. The difference of course being that other mobile devices wouldn't render sites correctly, would leave different parts of sites off, and so it actually was unusable. And so the idea with that first iPhone was that sites were completely usable and the way that they implemented that was by essentially lying to the site about what the resolution inside of the viewport was. They said, oh look, you're on a desktop. Your resolution is, you know, 1280 x 720, which of course was a lie. That wasn't the resolution at all, but the browser lied to the websites, and so websites even that were trying to do logic based upon resolution were looking at iPhone and thinking that the iPhone was a fully sized browser when really what was happening was the iPhone was just shrinking the content down to make it look like it was sized properly for mobile. And this is a feature that other mobile platforms have adopted. The issue is as we're doing a mobile-first design, and as we're trying to come up with a mobile-first design that then has progressive enhancement as it gets bigger, unless we tell the mobile browser that hey we know that we are going to potentially be displayed in one of these mobile browsers, we want you to display us like we say. Don't lie to us about the resolution of your device. If you forget to do this, which is to put in a meta tag with a viewport value for the name attribute, you specify that you want the width of your site to be the same as the device width, scale 1, maximum-scale 1, user-scalable 0 or no. If you forget to do this, not only will your site show up for the mobile user like a desktop site, but the mobile user also will be able to scale and zoom and pan around, which again is not a good mobile-first approach. What we want to do is present to the user in the bounds of the browser only that content which the user really needs or really wants and as effectively as possible. So, the viewport is the width and the height inside of the browser window, and unless you put in this meta tag, you will get false values back from the browser. And again, you're going to potentially design a whole mobile site, and when you go to look at it on a mobile device, it's going to look just like your desktop site. Okay. So, this is something important to keep in mind. Always do this; always put this inside of your HTML. It goes inside of the head tag, and it should always be there when you're building a mobile-first site.

Prototype, Iterate
Now, as you're going through and designing what's going to show up in that viewport, you're going to have many design ideas from your designers and from your project managers and from the stakeholders. And the other thing that I would highly recommend is try to get early drafts if you're using a designer, you know, be involved in this process early on. Don't wait until they send you a Photoshop file. Web designers today are pretty good at sending you a Photoshop file, but that Photoshop file is almost always optimized for a 960 pixel content area, and of course, we want to get away from that. So, one thing that is extremely important based upon this new way of looking at web design is to prototype early. So, prototyping early means getting partial designs, potential designs, prototyping to make sure that those designs will actually work. Because if you can't get them to work correctly for the different resolutions that you are targeting, then you may have to go back to the drawing board and try something else. So again, prototype iterate, prototype iterate. This is another important thing to do during that design phase.

Use Percentages Not Pixels
Now, if I was going to put in one slide in this module instead of however many slides are in it, if I was only going to put in one slide, this would be the slide that I would put in, which is the main tenant of fluid design. In a responsive world is that you ban completely the use of pixels as CSS property values. Don't use pixels, use percentages. Use percentages for everything or use something that is relative for everything. And for general layout, in the past as I said, your web designers would send you a Photoshop file, it would be 960 pixels, that's what you would set your width of your body area to, and then you would go and fill out all the rest of everything, and typically you would use not, you know, percentages, but pixels because you were getting sort of this pixel perfect design. Your designers might have to give up that pixel perfect obsession. They certainly have to give up the 960 pixel obsession that designers seem to have these days. Now, if they insist on using pixels, put up a good fight, try to push for fluid design. If you lose, which sometimes you lose. If the designer is the brother-in-law of your CEO, there's nothing you're going to be able to do to convince the CEO not to use their brother-in-law as the designer. You can switch to an adaptive design approach. So, you can still live in a responsive world where at a certain viewport you're going to specify particular resolutions for your layout, but again, we're going to cover that in the next module. We're not going to cover that a lot in this course because really adaptive design is used more today for taking an existing website that you're not going to redesign and trying to adapt it to a mobile device. When you have the ability to start from mobile-first, you really should be pushing this idea of fluidity. And again, one of the main reasons is we don't know next week or next month or the next six months what devices are going to come out, what resolutions those devices are going to be. Look at the Android set of devices that are out there and all of the different resolutions that they have. It becomes very, very difficult to do adaptive design in a way that will adapt to all of those different kinds of devices up and down the resolution spectrum. On the other hand, if you have a fluid layout that you're happy with, that will work well in all of those different resolutions. So again, try to use fluid design. Fluid design means we use percentages, we don't use pixels, right? We don't say our body area is 960 pixels. We're going to say our body area is 80% of the width of the viewport, and that will scale up and down nicely.

Demo: Prototype
So, for this demo what I'm going to do is walk you through how I got from a piece of basic HTML and CSS to the fluid design that I've already shown you screen shots of. So, here is my HTML. I'm bringing in a style sheet. I've got an area, which is my logo area, and right now I just have some text in there as a div. I've got a div for my main content area, and I've got a div for a footer. Inside the footer, I've got a couple of div's, three div's, for some footer actions that I might have extra content in. And so this is the basic layout of what I want. Let's look at the styles quickly. There's not much in terms of the styles. I'm bringing in a font that I want, I'm setting the background color and a margin on the body, and I'm setting the foreground color for the logo area, as well as the background, so just to set that up beforehand. Let me go over to the browser, and this is what it looks like in the browser. So, right now this is what I have for my desktop browser, and remember what I'm trying to do is mobile-first or mobile and desktop at the same time really. So, here's what it looks like in my mobile browser. So, what I want to do is I want to start making it look better. And you can see the first thing you might notice is this looks kind of small and that's because the browser in my iOS simulator is trying to do that, hey we'll display your website just like it's a desktop website and scale it down. What I want it to do is respect the fact that I know I'm designing for mobile, so that's where I need to go into the head tag and I need to add that meta tag. So, I need to add meta name equals viewport, and there are a number of properties I can set in the content. The first one is width. So, when I set that to device width, that tells the browser in the mobile that I want it to be, you know, actual width, not simulated width. I'm going to say initial scale is equal to 1, maximum-scale is also equal to 1, and user-scalable is equal to 0. (Typing) So, now I've got that viewport meta tag in. Go ahead and Save this. I'm going to go back to the simulator. And so now the browser says, oh, okay you are targeting mobile, you know what you're doing, we're going to display things the normal way. We're not going to try to just show a scaled-down desktop website. Okay. So, what I want to start doing now is I want to start designing the mobile to match the design. There are a couple things I want to do here. I want to basically make sure the main content is the majority of the content area in the middle of the browser, and then I want the three actions to layout like a, sort of a grid at the bottom. So, here's how I'm going to go ahead and accomplish that. The first thing I'm going to do is I'm going to add some style rules for both content and the footer. And the first thing I'm going to do here is I'm going to say background-color RGBA, sort of a half opaque black, and I want to do that, actually I want to do this in a child selector, so footer, and I want div. What I want this for is I want to be able to see how much of the screen each of those elements is taking up. And so you notice that basically what happens is the element is just taking up, you know, 100% width, but then they're just stacked on top of each other. That's not what I want, right. So, one thing I want is I want all the layout to have, you know, a little bit of spacing in between. So, what I'm going to do is I'm going to create another selector for the body for div's at the body level. Not just any div, but only div's that are at the top level of the body. And then I'm going to set some margin values. So, I'm going to set a margin-left, I'm going to set a margin-right, a margin-top, and a margin-bottom. Now, I could set this all on one line, but I think for demonstration purposes it's a little bit easier to see it if it's broken out. So, what I'm going to do on the top and the left is I'm going to say I want 10% and 10%. So, what I'm saying by saying I want 10% is I would like as the resolution of the page grows from mobile to desktop, I would like that margin to get bigger because basically 10% of bigger resolutions is going to be more pixels. Now the top and the bottom I kind of want to have be more static, not necessarily grow so big. So, what I can do there is I can specify ems. If I specify an em, that's going to be different for mobile and for desktop, but not grow exponentially as the resolution grows. So, I've set the margin-left, margin-right, margin-top, margin-bottom. Let's go back to our design and see where that gets us. Okay. So, that's great except for now by setting a div as the title of the body, it's moved my logo from the top of the page where I want it down based upon those margins. So, what I can do here of course is say margin 0, and I can reset the margin of the logo div. Let's go back to the simulator and Refresh. And so I'm getting a little bit closer. The main content area is where I want it, although it's not taking up as much of the area of the browser window, the viewport as I would like, and the actions are still stacked vertically, and I want them to be horizontal here under the main content area. So, what I'm going to do is in the content area I'm going to set basically a height. I'm going to say I want the content area height to be 50%, 50% of whatever the screen resolution is of the viewport. So again, what that's going to do for me is that's going to make the content area bigger, okay? So, that's great. Now, for the footer, what I'm going to do is I'm going to specify a width, and the width I'm going to set is 91. 5%. Now, you might say, you know, Jon, where'd you get that from. Well, I got that from experimentation. I played around with the percentages until based upon a width of 91. 5% with a minimum height of 25% and a maximum height of 25%, basically I'm going to have my footer if I also specify that the div's under the footer are going to have a height of 25% to take up the whole height of those elements. Let's go back and see what that looks like now. Okay. Well, that looks a little bit better, although now we've got the actions and they are bigger, but they're still stacked, right? I want them horizontal. And so to do that in browsers today, what I'm going to have to do is change the display property, and I'm going to change the display property to inline-block. By changing it to inline-block, what's going to happen is that those elements are now going to be basically stacked that way, right? Inline means that they'll display inline, and then block just means they'll take up as much as they are specified to take up. So, what I wanted do also here is also specify a width, right? If I specify a width, and again, this was a number that I played with when I was prototyping, 29%, now I have everything sort of the way I want it to be, right? I've got my header, I've got my content area, and I've got my action areas. Okay. So, this is the basic design that I wanted, right, I wanted to have, which is good. And as I said, I wanted to do my desktop sort of simultaneously or concurrently so I'm going to Refresh that and see what it shows me, and it shows me essentially the same layout. And notice as I make the browser smaller, at some point it's going to be too small, but as I make the browser bigger, and if I go even bigger, right, notice that the margin gets bigger on the right and the left, but the top and the bottom margins stay pretty much the same. Again, this is because on the one hand I'm using percentages for the sides and ems for the top and the bottom. But what I've done here is I've created a fluid layout for my main content area and for my main sort of action areas, and that layout is going to work for me in terms of my design, both for my desktop, as well as for my smart phone. It's going to work pretty well if I go to landscape, and it should work if I'm going to go ahead and switch the device hardware. Let's switch it to iPad, and I will have to make the window scale down so you guys can actually see it in the video. Notice that it scales pretty well here as well. Okay. So, the fluid design I've created here, it's very simple. I'm going to have to do more work, right, with the content of both the main content area and the actions. The main idea here, though, is two-fold. Number 1, I started out making sure the layout worked in my mobile browser, and the first thing I did to make sure that that's correct is set the viewport. And then the second thing I did was everytime I set a margin or a width or a height, I used either a percentage or an em. So, again, using those things that are relative to the display of the browser means you're going to have a layout that is fluid, and that was my stated purpose of this particular design.

Ems or Rems
Now, in the demo, you saw that I didn't just use percentages, I also used something called a rem. A rem is a relative version of something called an em, and ems are a design measurement. They relate to typeface settings. It originally referred to the width of the "M" character, which is why they're called em or ems, and it's always relative to the current point size. So, this will be another relative measure that you can use for different pieces of your layout including things like margins, and including things like font size. And we'll talk more about font size in the next module when we start talking about applying media queries and adaptive design. As it stands right now, you still are going to need to do a little bit of adaptive design with font sizes, but in some cases you can't get away with not only margins using em or rems, and remember ems are the newer version. The difference between and em and a rem is that an em is always relative to the top level point size, and a rem is going to be relative to the parent type size. And so, with ems what can happen is if you specify ems for a child and then for a child of a child and the child of a child, you end up with math happening where the child of the child is a bigger font size than you intended, and that's because it's going based upon the base font size, not the font point size relative to that element, okay? So, rem is something to use for both things like margins and padding, as well as potentially for font sizes. I mention them now because I showed them in the demo, and we'll talk more about them when we talk about text.

Flexbox
Now, in the demo, I still had to do some sort of fancy or hacky kludge things depending on your point of view with my div layout. There's no just easy way to say hey browser, I would like you to have, you know, one column of 90% at the top and then three columns on the next line each with these percentages. That would be great if we could do that, and it would be great if we could do that cross-browser. There is a W3C standard that is being pushed right now called flexbox. Some browsers have implemented it. Some browsers have implemented the old version of that spec, which it was display flex, not flexbox. Once this comes out and all of the different browsers adopt it, this is going to be the way to do what I just showed you in the demo a couple of minutes ago rather than doing, you know, div and doing float and things like that, you'll just be able to use a flexbox and specify where each element is going to go inside of your flexible layout. So, this is the future. We're not there yet. I mention it because once it gets put out there and adopted by the major browsers, you might want to think about moving to that versus using div's and floats, etc.

Always Remember the Cascade
Now, another thing to remember in terms of the designers and their quest for pixel perfection is that CSS has a set of rules, which are called the Cascade, which of course is the first letter in the acronym. What this means is that you can put in pixel rules for older browsers, as long as then you put a percentage rule after the pixel rules. Of course, older browsers will ignore the percentage rules and the newer browsers will pick up the percentages so you'll have this ability to be able to make pixel decisions for older browsers or for some elements and percentage decisions for your majority of your elements.

Summary
Alright, so fluid design, this is one piece of a mobile-first approach to creating a mobile-first responsive design that can allow you to do what's called progressive enhancement as we scale up to a bigger size. Again, the basic rule is pretty easy, use percentages. Don't forget about the viewport because without the viewport setting, you're going to have things that look weird in the mobile world.

Applying mobile-first responsive web design features
Introduction
Hi. This is Jon Flanders with Pluralsight, and in this module I'm going to talk about Applying Responsive Features. This module is about this little symbol here, which is the symbol for CSS3 that goes along with HTML5. So, this module is going to be about CSS3 features that help you to apply a responsive design.

Media Query
The main feature I'm going to talk about is a media query. A media query is a simple string. That string contains something that's called a media type and 0 or more expressions. Media queries are things that browsers evaluate, and if the expression evaluates to true, styles that are associated with that query are applied. Okay. The basic idea behind a media query is it is an expression or query that when evaluating to true causes the browser to take a certain set of CSS properties and selectors and apply them. What this means is we can use media queries to be able to change the CSS that is applied to our pages dynamically based upon these conditions. Now the types of media that we can query are screen, prints or all. There are a number of other media types that are built in, braille, handheld, projection, tv. Screen is the most common form of media query or the most common media type found in media queries when you're talking about responsive design. That is, we're querying the screen to find out information. How wide is the screen? How narrow is the screen? Is the screen oriented portrait or landscape? Now, print is also a very useful media type for media queries when you want to create a webpage that prints out in a very nice way. Again, probably different than it displays on the screen. For the purposes of this course, and especially this module, the media type we are going to be focusing on is screen. Now, media query is a media type and 0 or more expressions. These expressions are built on what is called a media feature. So, the syntax of this is feature value. Now, of course the value is optional in the case of, for example, portrait. There's no need to say true. It's portrait, your landscape will be true or false implicitly. Most features also have the ability to prefix max or min. So, you can say max-width, min-width. Again, these are the things that we're going to put together in order to build this media query. The list of features are width, height, orientation, device-width, device-height, aspect-ratio, device- aspect-ratio, color, color-index, monochrome, resolution, scan, and grid. Now again, for purposes of using media queries for responsive design, width, height, and orientation, the ones that I put at the top, are the most common. Width will tell us what is the width of the viewport, and it will include the scrollbar if there is a scrollbar. Again, most often this is used with max or min, so we can have expressions that say screen and (max-width: 768px), screen and (min-width: 1024px). If, again, that expression or either of those expressions evaluates to true, whatever styles are associated with those expressions, I'll show you those styles and how you can associate them in a couple minutes, will be applied to the page, and again, applied to the page dynamically. Orientation, again landscape or portrait. And what is also useful when we're talking about media queries, is we can do and's and or's. So, you can combine multiple media features together. If you put an and between the expressions, the query requires that both expressions are true. A comma between expressions allows the query to evaluate to true if either of the expressions are true. So, some examples of multiple expressions, screen and (orientation: portrait) and (max-width: 768px). Screen and (orientation: portrait) or (max-width:768px). So, multiple expressions can be put together. Two expressions are probably about all you're going to ever need at most. These examples are examples of those kinds of expressions that you might want because, again, you're typically going to be using one expression, which is going to be max-width or min-width, sometimes height. More often than not, if you're going to put orientation together, you're going to put it together with width to say, you know, if I'm in orientation landscape, then I want to do something a little bit different if it's this wide or this minimum width.

Where to Use
So, that's sort of the basic syntax of a media query. It doesn't really give you an idea of how they're actually used. So, you can put a media query in a number of different places. You can put the media query in the value of the media attribute on a link tag for a CSS. If the media query evaluates true, that whole CSS file is brought in and applied to the current page. You can also put it after an import statement inside of a CSS document. Again, same thing as the link tag. If the expression evaluates to true, that means that the whole CSS file that's associated with that query will be brought in. Or you can put a media query anywhere inside of a CSS document using @media. So, @media is an inline media query syntax for putting media queries inside of a CSS document. After the media and the expression, you can put in a block, which is a typical CSS block, curly braces, and whatever selectors are inside of that media block will be applied when the media query evaluates to true. You can also run media queries in JavaScript. Again, they evaluate to true or false, and then you can provide conditional code that will run depending on if that media query executes or not. An example would be you might have some elements in your page where you want certain effects to happen at a particular resolution. But at a different resolution, those effects don't make sense. For example, you might have content that is partially hidden at a lower resolution and you have some JavaScript that can show different pieces of content, but when you're at a higher resolution, all of the content is displayed, so it wouldn't make sense for the JavaScript to run on that higher resolution to show or hide content because, of course, the content is all being displayed, okay. You'll actually see an example of that in the second demo in this module. Best practice is to use @media inside of a CSS document. The reason that that's best practice is just for performance. Browser performance is always better when you just have one CSS file. Browser performance, when you're talking about mobile-first sites, is incredibly important. So, you either want to put your media queries inside of one CSS document or make sure to use bundling. So, at runtime at least, the browser is downloading only one CSS file. You can have 20 CSS files if that really is the way you like to develop. So, an example of import would be @import, the name of the CSS file, and then the query. An example of inline would be @media, the media query, and then the curly braces to denote what are the selectors that are involved. And the other way of course would be to add the media attribute to your link tags. Again, both the top and the bottom bring in that CSS only when the media query evaluates to true. Again, for performance reasons, it's best to use inline. Now again, you can also use media queries in code, you use the window. styleMedia object, and matchMedium runs the query. If that evaluates to true, you can run some conditional code, and again, a very straightforward API.

Demo: Media Queries
Now, I'm going to show you a demo of using media queries, just a simple technology demo so you can get the idea of how these work if you haven't experienced them before. I have a simple HTML page that is bringing in a CSS. It has an h1 in it, and that h1 has a class attribute set to title, and the text is Hello Media Queries. If I switch over to Safari, you can see that again it just plainly shows Hello Media Queries. So, let me go ahead and use some styles. The first thing I'm going to do is set a style on the title. I'm going to set a background color, (Typing) and the background color I'm going to set to rgba, black basically with a little opacity, and I'm going to set the font size to 1. 5 ems. Because what I'm doing here, let's go back and look at it again, what I'm doing here is I'm going to show you media queries from a mobile-first design approach. So, really what I'm trying to do here is design my "mobile page. " So, I thought that the font size, when it was the regular h1 font size, was a little too big for the screen, so I wanted to bring that down a little bit. So, you can see if I change it back to 1. 5 em, go back, it's gotten a little bit smaller. Now, what you want to do if you want to experiment with that value and you're not sure what your value is going to be, going back and forth between the browser and your code is sometimes tedious. In WebKit browsers, that's Safari and Chrome, Firefox and Internet Explorer, if you're using those browsers, also have similar tools where I can go look at the elements, and as I look at the elements, I can actually see what the computed style is. So, if I look at the h1, I can see here that the font size is 24 pixels because the font size is set to 1. 5 em. If I undo that, notice the font size goes to 32. If I would like to see what 1 would look like, I can go ahead and edit that value. If I would like to see what 0. 5 would look like, I could edit that value. So, these tools, the browser tools, either again in WebKit or Firefox or Internet Explorer, all have very similar tools that allow you to do the exact same thing that I'm doing. Think about using these tools when you're prototyping and when you're showing things to designers and other people on the team because it's nice to be able to say, well, I wonder what that would look like if it was a different size or a different color, and you could do that successfully just without having to write any code to test it by changing values inside of the style pane. You can also add values as well if you want to add values. Alright, so there's enough of that for right now. I'm going to set that back to 1. 5. And then what I want to do is take advantage of another pseudo-element that's been added with CSS3, which is after. There's a before and an after pseudo-element. And in the after, I can actually set content. So, I can say Hello Media Queries - Mobile First. If I go back and I refresh. So, this is my idea here that I want mobile first. And notice when I go really narrow, it actually goes over to the next line, so maybe I do want to change that font size for that h1 down to 1. That actually looks a little bit better. Okay. So, that's my "mobile first page. " How am I going to modify it for bigger resolutions? Well, the first resolution I might want to modify it for would be something like a tablet. So, here's what I'm going to do a media query. I'm going to say @media, screen, and min-width is going to be 768 pixels. And I know that, you know, in this course I've been saying don't do pixels, don't do pixels, but of course, once you go to media queries, you need to put in pixels. That's the only value that it will take. And this is again why media queries are also useful during adaptive design. Okay. So, I'm going to go in and say inside of here I want to change a couple things, and I'll just copy and paste to make it a little bit quicker. Here, I'm going to set the background color to be red, the font size I'm going to move up to 1. 5, and the title I'm going to switch to tablet sized. Okay. So, basically what I'm saying is, to the browser when the minimum width of the viewport is 768, sorry, I would like you to apply these different styles. And what's really cool about the modern browsers like Safari and Chrome is they all will apply this dynamically as you get up to a certain size. So, notice as I go down, Mobile First, as I go up, Tablet Sized! So, this is the basics of media queries is that when somebody would come to your site and they would be at a particular resolution, they'll get the right content. If they're in a desktop browser and they go bigger and smaller, their content will also change. So, let's go up the next size. So, the next size would be something like a desktop size. And when I do desktop sized, I would normally do something like 1280. Here, I'm going to do 900 only because I don't have very much screen real estate at the resolution that I'm recording at. Normally this would be 960 or 1280 or something like that. So, this is desktop sized. Let's change the color to be blue, and let's go back and refresh the browser. So, we'll move it over here. So, let's get bigger, bigger, bigger, tablet, desktop, tablet, desktop. Maybe I want to make the font size 2 em when I'm in the desktop. So, let's refresh that again. Tablet sized, desktop sized, tablet, mobile, tablet sized, desktop sized. Now, notice the way that I'm putting in these queries, these media queries, is I'm assuming that I'm doing mobile first. If you were doing desktop first, you're media queries would be the opposite. They would be, you know, setting a max-width instead of min-width, okay? Just a simple example of using media queries because I just want you to get a hang of, and the idea of, what these things do, okay?

Adaptive Design
Okay. So, in the last module, I talked a lot about using percentages rather than pixels using a fluid design. You may or may not be able to use a fluid design. One reason why you might not be able to use a fluid design is if you're trying to adapt an existing site to responsive design principles. If you have an existing site, more likely than not you're going to have some pixel specific widths or heights or both. Using fluidity at that point becomes pretty difficult. It's hard to take an existing site that has pixel layout and then apply media queries to it at a smaller resolution and change those to percentages. It tends not to work out very well. Another reason why you might not be able to use fluid design is if you just can't convince whoever it is in charge of design of your website that you're building, that percentages are better than pixels. I think I've mentioned that designers tend to have a very hard and fast sort of penchant for wanting to use 960 pixels these days as the width of a site. Depending on, you know, who has more power in the relationship with the designer, you may or may not be able to get them to say yeah we can use percentages instead of pixels. So, if you have to use pixels, you can still have responsive design, you just have to do it in a little bit of a different way. What you typically do is figure out what devices are we targeting, for those devices, what are the resolutions, and then set up those resolutions as what we refer to in responsive design as break points, not to be confused with debugger break points, and to say let's set up some media queries for less than 480, less than 768 or greater than 768. Another very common set of break points is less than 320 if you're going for even smaller devices, greater than 480, 768 to 1024, and then greater than 1024. Again, regardless of what you choose as your break points, the idea is these are going to be the values that are going to drive your media queries. So, if we were using the top three break points, we'd have three media queries. If we were using the bottom, we'd have four, etc. However many different resolutions you're going to target, that's how many media queries you're going to end up, at least, for those resolutions. You may end up with more if you have to do things based upon, let's say portrait and landscape. So, what you have to do is essentially apply a formula beforehand to figure out what is the pixel size of these different elements going to be at these different resolutions. And you can actually do a fairly simple algorithm, which is to take the target pixels divided by the context, so whatever the context of the particular resolution is, and that will end up giving you the adaptive result, and you can use that adaptive result as the value at those lower resolutions.

Content
So, as you build out a responsive design, regardless if you're using fluid design or adaptive design, there are some common areas and common pieces of pages that you're going to have to deal with. And one of the most common areas is content areas. So, the content area is, again, the main content placeholder where you're going to put the main content that you want to be displayed, and if you're doing a mobile first, that of course is going to be displayed, you know, immediately for the user. This is your most important content, what you want your user to do on your site more than anything else. So, typically in a mobile-first design, you're going to have one content area. Now, another typical pattern for that content area is to provide some sort of navigation indication. Often times it's arrows, left and right, that the user can click on, and the user can click on those arrows and move from one piece of content to another. So, imagine an ecommerce site. You might put up your product of the day, but then have arrows on either side so that the user can cycle through what are the other products of the day, the other things that are on sale you're tying to promote. Another common pattern that can work in conjunction with the cycling pattern or the carousel pattern is to animate that content. So, the user is looking at your screen, looking at their screen, looking at your page, and the main content area, the carousel, cycles every 5 seconds or 10 seconds. Or the user can click around or both, right? Again, it depends on what effect that you want, whether you want to use which of those techniques.

Navigation
Alright. So, another one of the main focus areas of a mobile-first design is navigation. How are we going to present navigation to the user? Obviously, this is really important. If you have content that isn't being displayed directly on the first page of your mobile site, how does a user get to the other pages on your site, that other content? And again, just like content areas, this particular part of a mobile-first design has to be paired down. On many websites you'll see menus of 10, 20 items, sometimes two or three levels down. Obviously, that presented to a mobile user isn't any use at all. So, you want to again have a very focused approach on what is really important to show the user, not in terms of just content, but also in terms of your navigation. And the other important thing is of course that the user has to be able to look at that menu and be able to use it easily. This is often referred to as affordance. So, don't reinvent some new pattern. Use patterns that people are accustomed to. Use patterns that you see on the mobile web that you like or your team agrees is a good way to present your navigation. Yeah, you might be the one in 10, 000, 000 people that's going to come up with a brand new way of presenting mobile navigation in a way that has more affordance than all the other ways that are out there, but chances are pretty slim I'm sorry to tell you, and I have to tell myself that as well. When I'm building mobile sites, I tend to just reuse the common patterns. Here are some of the patterns. Some of these are better than others, but they're all being used today in various ways. One thing is to basically do nothing, make your menu items smaller. Most people have a horizontal menu on the top of their screen. That horizontal menu tends to come down and be stacked, sometimes completely vertically stacked. That is one way to make your menus work in a mobile world. Again, this would be more for when you already have an existing site and you're trying to do an adaptive approach. Another sort of slick approach is to put your menu at the very bottom of your page, have it inside of a named anchor, and then the menu icon, which is typically on the top right of the page. When the user clicks on it, they'll just scroll right down to that named anchor. There are a couple of nice things about this. First of all, you don't have to write any JavaScript. Because you don't have to write any JavaScript, it's very fast. So, this is a fairly popular one that's gaining some traction in the mobile-first world. Another way to do this is to put a combo box in, so to turn your vertical or horizontal menu into just a combo box at the top of the mobile browser. And then another very popular effect is pop down or pop over so your menu appears when the user clicks on whatever icon you have available. And again, the icon should have some affordance to it as well. It either pops down dynamically or pops from the left dynamically. Both of these are going to generally require some amount of JavaScript, although you can do most of the effects with CSS. And hiding everything, this is generally not a great approach, but depending on what your site is meant for, it may be possible that you can essentially get rid of the navigation at least in the top of the page. Maybe just put navigation in the footer if that is appropriate for your site, and that would be a case where you really are presenting the main content of your site right there up front. Footer, another area you need to think about in terms of that design. Generally, in a desktop, you'll have links to privacy and contact, you might have a duplicate or additional navigation links. So, many times what you put in your mobile navigation will dictate what goes in the footer. Again, if you have to pair down your main navigation, this might be a chance for you to add additional navigation to the footer. Again, it just depends on the design and what links that you think are the most important to provide.

Content Patterns
So, in terms of content patterns, there are sort of three main patterns for dealing with content growth when you're going from mobile to desktop. If you're going from desktop to mobile, you can reverse these. One pattern is to grow. So, your content in your mobile-first design is smaller and paired down. Again, maybe you have five news items if you're a news website, and on the mobile site you're just going to present one. We already talked about maybe cycling through those. And then as you do progressive enhancement, that's going to get bigger. You can also stack. So, this is a very common approach is to do vertical to horizontal. So, if my content is laid out in a vertical way on my desktop page, it will be horizontal, or vice versa if it's in mobile and it's laid out vertically, it will go to horizontal. And the other one is to just show more. So, show more, and obviously these can be used in conjunction with each other. You might have your content grow and you might also show more. You might do vertical to horizontal, and you might also grow and/or show more, but these are the main patterns that you'll use. So, the idea is I have some content, this is my mobile view, my desktop view will grow. Here's my content that is in the mobile view is stacked, in the desktop view it's going to go horizontal. Here's my mobile view, and then as I'm growing, I'm going to end up showing more, right? So, rather than just showing one piece of content, I'm going to end up showing two or three, etc.

Demo: Content and Navigation
Okay, now I'm going to show you a demo of how I implemented navigation and content in my mobile-first design, and then how I dealt with the progressive enhancement and dealing with different resolutions as I move up from mobile to tablet to desktop. Now, again, this is just an example of how I'm doing it. This is just a prototype of a site that I'm working on. This is not a super-finished polished site, but I think what I will show you here is more useful than seeing something polished. You can see plenty of polished sites on the web if you search for mobile-first responsive design and examples and best. In fact, if you want to look for some, I've got some listed in the last module under tools. But, I think this will be more illustrative to you of the kinds of things that you have to go through. Now the other reason I'm showing you it sort of finished is I didn't want to have to show you the things that I went through in order to try to figure this out just because it gets to be a little tedious watching somebody else do this, but I think that this example will show you some really important things about how you'll go about doing your mobile-first design and dealing with things like navigation and content and progressive enhancement. So, here's the mobile site as it stands right now. I've got artists highlighted in the content area. What I'm doing is I'm pulling those artists down from a service, which is just some JSON I happen to have in my server directory, and I'm essentially creating an individual div for each artist. Now, if you were paying attention, notice in the mobile site I'm only seeing one artist. I can click to see another artist and cycle through, and likely, again this is just a prototype, likely again, I would have some indication there that I could cycle through. And if I want to be really fancy, I could add some touch events and allow people to swipe through the content, which would be really cool. So, that's how I'm showing the content in the mobile site. Now, in terms of nav, I've added a little nav icon here, and I pop up the menu right there. Now, this again is just a prototype. I might want to change it so maybe the background doesn't change, but this is the idea that I've got, my HTML all set up, optimized for how I want it for mobile for the most part, and now I want to think about what to do when it moves to the desktop. So, again, pretty straightforward. If I go into the CSS, you can see that I have a media query that says hey when the minimum width of the screen is 960, let's change some of these properties. So, let's change the height of the artist, div, and I might change some of the other properties as well. I've got some CSS in here to hide the button, the navigation button, because I don't want the navigation button to be displayed. That's this particular selector here. And then I have some changes for the nav and the Li's inside of the nav so the Li's go from vertical to horizontal. Let me go over to my desktop browser. And you can see here that I'm under 960 pixels so I'm still getting the mobile view, right? And then as I get wider at some point, I'll get into the desktop view. So, in the desktop view, notice now that I have the menu here on the right hand side. That's just a matter of hiding the icon and showing the menu. If I wanted to move things around, I could do that with some relative positioning. Now, you notice here my content area. As I said, one of the main things about moving from mobile first to a progressive enhancement approach is to try to show more and more content. Rather than going to get more content, again, in the mobile design I'm allowing people to cycle through these different artists, but here I would like them all to appear at once. And you notice that I've got rules that hit when the media query evaluates to true, but they're not quite there yet. I've got a problem here because there is too much space here between the bottom of this artist and the top of the other artist. Now, notice when I click, I also get that effect of the artist moving around, and so this is a good example of where you want to put in a media query in code inside of that click event so that when the browser is at the desktop size, that it won't affect the viewing of the larger piece of content, okay? But let's deal with the style first. That's the hard part. So, the hard part about the style again is I have to figure out what the right height is and what the right margin is, and this is again where the web developer tools, Web Inspector built into Safari in this case, again, no matter what browser you're using, all the browsers have a similar tool. One of the things I might see here is that the margin bottom is computed to 80 pixels, which seems a little big. So, what I would like to do is I'd like to go down here and say let's add another rule. Notice also that the inspector is showing me what media query is being applied. So, I'm going to add another rule. I'm going to say margin-bottom. (Typing) Let's say that's, let's say 1 em. Okay. And the other thing I want to do is adjust the height. So, I'm going to adjust the height. Let's change it to 100. Well, that looks kind of weird, so how about if we change it to 120? That's a little bit better. And then I need to change it, let's change it again, let's do 140. Okay. So, I can still play around with the bottom margin as well, but let's go ahead and go back to my CSS. And inside of the artist, let's change the height to 140, and let's set a bottom margin. We can play with that value once we get back to the browser, but setting it here will make that easier, and I know I'm going to want to set it. Let's set it to 1 em, and let's refresh. And that actually looks pretty good. If I wanted to play with it more, I could play with it more. And again, I'm only getting three artists, and that's why only three artists are showing up, but if I had more artists, the bigger the browser would get, the more artists would appear. Again, this idea of progressive enhancement, showing more and more content. Maybe I want it to be narrower. Again, all these different things I can do, but the basics are you start with a mobile first, you create your mobile experience, and then you start using those progressive enhancement techniques using CSS, media queries, using JavaScript when you need to, and start adding to your design to add more and more content the bigger that you get.

Dealing with Text and Images
Now, often times text has to be reduced or grow in the case of mobile first depending on the constraints of your design. Again, even in a mobile first scenario, the text from your content management system, whatever that happens to be, database or whatever, already might have a desktop length. You might have to make it smaller. So, you can make the text smaller. I really like the CSS3 text-overflow property. So, the text-overflow property has a value, which you can set to be ellipsis. And so when you get a smaller content area, the text that would be cut off is replaced by an ellipsis so people are clear that there's more text there. And another thing to combine that with is to have a hyperlink. So, you can have a hyperlink, which says, you know, click here to see the full text. Now, images are a little bit harder to deal with in text. Text is obviously rendered by the browser, and you can scale that up and down and it will not, for example, look pixely if you make your text font size bigger. All images that you're going to use on your site are going to have some natural resolution. If you have a content area that you want to put an image, and the resolution of the image is too big, you can shrink it. You have to be really careful though and make sure to only change the width to a certain percentage. If you change the width and the height, you can end up with a wrong aspect ratio and this will look pretty funky, and certainly somebody's going to notice it at some point. The problem with this of course is if you're sending a larger image than necessary down to the mobile device and scaling it down, that can have a performance impact. Another thing that people do to try to deal with both the aspect ratio, scaling issue, as well as performance is to put all of their images into a sprite. Even if you have to include two different resolutions of a particular image, if you end up putting them into a sprite, you're going to end up with fewer downloads. Fewer HTTP requests is generally the measure of performance, so even when you end up with a sprite that is bigger than all of the images put together, more often than not your page will actually load faster. Another way to deal with images is to try to use SVG as much as possible, Scalable Vector Graphics. So, the problem again is if I have a PNG and I have to scale it up, you're going to end up with a fuzzy image. This is going to look bad. On the other hand, if I scale up an SVG, the SVG because it is a vector graphic format, an XML graphic vector format, it is the best option. It will by default allow you to scale up and down without losing resolution. Again, it is XML format. If you have a designer that is used to using Illustrator or Photoshop, it's really dirt simple for them to be able to output the file as an SVG rather than a PNG. And again, once you have that SVG, you can use it just like a PNG or a JPEG or a GIF in terms of the source of an image tag or inside of the CSS. And the benefit is again, you can scale this up and down very easily without losing resolution.

Demo: SVG
Alright, so now I want to show you how easy it is to work with SVG. I'm going to go ahead and create a new Illustrator document. I'm going to make it 500 x 100 points, and I'm going call this newlogo because I need a new logo for the website that I'm working on. So, what I'm going to do is I'm going to go ahead and type in the text. And what I want to do is make this text, you know, essentially stretch to the size of this particular 100 x 500 triangle. I'm going to need to hold down the Shift key in order to do that in a way that keeps the aspect ratio correct. Okay. So, that looks pretty good. I'm going to go ahead and change the text a little bit because I want the text to be a little bit bigger. So, I'm going to go ahead and Edit the fonts. So, what I want to do is make these Bold, and then what I want to do is I want to change the color from black to white, which looks rather strange here, but when I go ahead and save this as an Illustrator document, if I were to say Save for Web and Devices, notice if I saved it as a PNG it would have a transparent background and it would have white lettering, which is what I want. But I'm not going to save it as a PNG, I'm going to save it as a SVG. So, I'm going to go ahead and say Save As, and I'm going to save it directly to a place where I can use it in my project, and I'm going to save this as an SVG. I'm going to go ahead and press Save, I'm going to select the defaults for all of the options, and it's that easy to take an Illustrator file that your designer has already created and just save it as an SVG. All of the vector information that was in that Illustrator file will now be in the SVG, and the SVG can be used in your web pages. So, I'm going to switch over back to my other machine and then bring in that SVG to make use of it as the logo. Alright, so now I'm back on the machine where I have my web server running, and I've got my SVG in the right folder. So, all I'm going to do is say image source equals newlogo. svg and go ahead and close the image tag. I'm going to go ahead and Save that, and now I'm going to go ahead and look at this using the simulator. I'm going to go ahead and refresh, and notice that it shows up. It looks pretty nice, but it's a little big, bigger than I wanted it to be. So, I need to scale it down for mobile. And again, this is the great thing about an SVG. If I had a PNG and if I scaled it down or scaled it up for desktop, tablet or mobile, it would be likely not clear in one or more of those scenarios. But with an SVG, because it's a vector, I can scale it up and down, and it's going to maintain its integrity, its quality. So, the question is how far do I want to scale it down? Now, in the first demo of this module, I showed you how if you were using a web browser how you can manipulate the DOM. One of the cool things about the iOS simulator, which comes with Xcode on the MacIntosh. Xcode, by the way, is free from the Mac App Store. So, this is a free tool that you can use, and of course you want to test your mobile-first designs on real devices, but this is a very convenient way to test. Not only is it a convenient way to test, but if I go to desktop Safari and I refresh, let's see how this looks in desktop Safari, a little bit different, but still too big, I can go to the Develop menu and go to iPhone Simulator, and notice it's going to show me all the HTML pages that are running in the simulator. What this means is I've got something here, let me make it a little bit smaller so we can have it on the screen at the same time with the simulator, that acts like the inspector. Just like, notice as I hover over these items in the simulator it's being selected just like if I was running in a web browser. So, this is the Web Inspector for web pages that are running in the iOS simulator, and that's why this, even though again you should eventually test your websites on real mobile devices, the cool thing here is I can go in and I can add a style attribute like width and I can set that style attribute to be 25%, and that's the wrong element so I can unselect that. Pardon me. This is the one that I want to select, and if I want to go in and add a style, say width 25%, and that's what it looks like at 25%. If I want to see what it looks like at 40%, we can put in 40%. And again, I can now use this along with my different CSS media queries to even change the size of my SVG in the same way that I would change the size of the font. And again, not only can I use text in an SVG, I can use any sort of line drawing. So, you know, again I could have this image here, which is my little menu image, be in SVG as well. That might be a nice way to scale it up and down if I wanted to make it bigger, let's say for bigger mobile devices or smaller tablets. Again, having things that can be relative and maintain their integrity is really super important. Images are one of those things that's really hard because as you take an image that was saved at a particular size and scale it down or scale it up, you have a high likelihood that it's not going to maintain its integrity, that somebody will notice, especially your designers, people who create the images, will notice that those images aren't the right resolution or they don't look right in some way, they're pixely, and SVG can help you get around that problem.

Summary
Alright, so in summary, media queries enabling features of responsive design, we can use them when we're doing pixel specific layouts, so again, adaptive design. But even when you're using a fluid layout as I showed you in my demos, even with that fluid layout, you'll need to end up using media queries as well. So, there is an overlap between fluid design and adaptive design because as you start to play with these different resolutions, you're going to need to end up scaling certain content in particular ways other than just the percentage of the width of the browser.

Mobile first forms
Introduction
Hi. This is Jon Flanders from Pluralsight, and in this module I'm going to talk about HTML First Responsive Forms. So, this module is about something pretty straightforward, which is gathering input from your users.

Distill Down
So, when you're building a mobile-first site and part of your site requires you to gather input from your users, your users are going to expect to have that experience on their mobile devices, just like they would expect to have it on their desktop. They expect to be able to provide input. They expect that in providing that input they have a very easy way to do that. It's very simple and straightforward, not complicated, multipage wizard forms, but very straightforward easy to use controls inside of their mobile devices. So, just like other content that we've talked about, with form content, you need to try to focus on what is really, really important. So, when we talked about content on your homepage, we talked about what is the thing that you really want to put out there for your users? What is the focus of your site? What is the most important piece of content? And when you're talking about getting form data, getting input from your users, you want to have that same mindset about the data. What is the most important piece of data that you need? Maybe you don't need all of the data that you think you need. Maybe you don't need all of the data that you have been using on a desktop site. Maybe you want to provide some of the data based upon the users being logged in. Maybe you want to provide some other context for the user to make providing the data as easy as possible, so focused and easy. Now, the other thing to remember is that form elements are just HTML elements. They have styles associated with them. And what this means is, you can use the same techniques that I've talked about earlier in the course in working with forms. Those techniques are making sure that, 1, you're using the correct CSS for your mobile-first design, and 2, remember that you can use the same patterns with making your forms work with a progressive enhancement approach. So, if you do have a mobile form, and you also want that form to be able to be used by tablets and desktops, again the same mobile enhancement features that we've talked about, using CSS to show additional items, using CSS to grow items, using percentages rather than pixels, all of those techniques are still true with forms because forms are again just HTML elements. But there are a few particular things that are special about forms that we're going to talk about in this module.

Labels and Placeholders
One thing we're going to talk about is labels. So, typically when you have a desktop form, a form on a webpage that somebody's filling in from their laptop or desktop computer, you're going to have labels associated with each form element, and of course this is a typical thing to do for affordance so that people know, hey I'm filling in my first name, my last name, my address. And obviously on a mobile site, we'd rather leave those labels off because we're dealing with limited screen real estate. One thing is for sure, the typical pattern of putting the labels to the left of the form elements doesn't really work very well in mobile because you're going to have a very cramped screen at that point. So, one thing that people do is put the labels above the form elements. Another thing that people do instead of that, or in addition to that, is to use what we call placeholders. So, placeholders are text that goes into the form element itself. It tells the user what the form element is for. There are a couple of things that you need to make sure of when you're using placeholders. You need to make sure of course that the placeholder text disappears the moment the user puts the cursor in the form element. Now, one way you can do this is to use the HTML5 placeholder attribute. I've never seen a website using the placeholder attribute have that effect where I put my cursor into the form element and the placeholder text doesn't disappear. I have seen that quite a bit with JavaScript enabled placeholders. All the modern browsers support this HTML5 placeholder attribute, and that includes mobile modern browsers, but there are times when depending on the browser you're trying to support, you might have to fall back to JavaScript. I would just recommend to only do that for your progressive enhancement site if you are using progressive enhancement and are supporting older browsers on the desktop because any JavaScript solution has a chance to have that effect, and that's going to be really disarming for your users. The other thing that you want to make sure of is that the user can differentiate the placeholder text from entered text. So, when they enter some text, that text needs to be darker, it needs to be bolder. And you notice the default styling here from mobile Safari is the picture I have. That text I have is definitely gray, but of course if you put in a style where your text on the page is gray, that could make your entered text look the same as the placeholder text and that's a bad design. People are going to get confused by that.

HTML5 Input Types
Now speaking of HTML5, another thing that can make your mobile form experience better is to use the new HTML5 input types. There are a number of new input types. Again, the mobile browsers support these new input types. The important piece for supporting mobile is that based upon the type value, the mobile browser will pop up different keyboards and different controls. So, for example, here is the list of HTML5 input types: Search, telephone, URL, email, datetime, date, month, week, time, datetime-local, number, range, color. And here is a browser, mobile Safari, displaying some of those controls. And you can see, for example, datetime will have a combo box that will pop up the datetime picker, the date, and the month. As well, we'll pull up a context specific datetime picker, as well as week, as well as datetime-local. And then the other one that has a special control is range. So, range provides a slider. That's nice because, again, anything you can do to make the input of data by your user have less typing is going to be good. So, range is one that you can use for values even when the value really isn't a range because what that gives the mobile user is that nice slider and then they don't have to type in a number, right. So, any time you can provide an input where the user doesn't have to use the keyboard, that's a positive. If you have to provide keyboard input, use these new HTML5 input types. When you use these new HTML5 input types, that's going to provide the mobile user the best experience. So, for example, if I have two inputs, one is type text and one is type email, when the user is entering in the text, they're going to get the regular keyboard. When the user goes to the email textbox, even though that's still just a textbox, because the type we've set is email, notice that the browser pops up a keyboard where the at sign and the dot period character are available right there next to the spacebar, so a context specific keyboard available to the user, to make entering their data even easier. And you can enhance this as well. Some sites for email, for example, if you start to type in, you know, at and type in G-O, they'll sort of pop up hey are you google. com, are you me. com, are you yahoo. com? So, they try to give help to the user, now that's going to be custom JavaScript. But again, anything you can do to provide additional help to the user so the user can type less into your form, the more mobile friendly your form is, the more your users will use your site and use your input, and that can only be good, right?

Demo: HTML5 Form Types
Alright, so I'm going to show you a couple of things that I talk about in the slides in terms of things to keep in mind when doing forms with mobile-first. So, I've got a simple page, and in that page I just have an input type equals to text. If I look at the simulator, notice that this looks sort of normal. Remember the meta tag, the viewport tag is so important because if I go back and do this, notice how it shows up essentially unusable. Although, again what the browser tries to do is make it usable by zooming in. Okay. But I'd much rather have a user be presented with this where they can actually put their finger into the textbox than the other, which they might not be able to. Okay. So, just again, the idea of creating something specifically with mobile in mind and then we can enhance for other targeted resolutions. The other thing I wanted to show you is I'm using type equals text so I get just the normal keyboard. If this was an email address for example, there's a couple of things that I would probably want to do. One is I would want to say placeholder equals, you know, your email address, and this would be type equals to email. Okay. So, this is going to do two things. First of all, what it's going to do is it's going to put in your email address as the placeholder into the textbox, which is good. Again, remember as I said, as you start to edit, that's going to go away. The other important thing is down here that the keyboard has again switched to make it easier for the person to put in the email address. So, I can say jon@foo. com. Now, that's great. What if I put in something that isn't an email address? What if I just put in, you know, garbage? Is the fact that this type equals email going to do anything? And the answer of course is no. The fact that the HTML5 spec has semantic-type values for form elements doesn't mean that it includes validation. If you want to do validation, which of course you probably should, you have to do that on your own. Typically, you want to pull in some sort of JavaScript library for that, although again you could write all of that JavaScript validation yourself. Typically, much easier to pull in somebody else's JavaScript validation library. Okay, so there's email. What are some of the other types? Well, many of the other types relate to dates. So, let me put in two here. I'm going to put in input type equals to datetime and input type equals to, let's put in date. If I go back over and refresh the browser, notice this changes to a sort of combo box, but rather than actually having a real dropdown, the datetime picker pulls up on iOS, and the other platforms have similar things. So, the user can easily scroll through with their fingers, pick the right date, time, and be done. Here, notice I said date, not datetime. So again, semantically the browser knows that that should be a date. Now, another one that you might want to use, especially for mobile, is input type equals to range. (Typing) And here's why. When I do input type equals range, let me actually put that next to input type equals to number. (Typing) So, here's range and here's number. Now, when I click on number, again semantics makes the browser pull up the number keyboard, which is great, but range can also be a number, and this is probably easier to do than it is to do this. Okay. Now again, this is not really complete. You'd want to put in another element that would match the number so that the user could get a visual view of what number they're picking with the little slider here, but perhaps that's worth it for mobile affordance rather than having to have them type in on the keyboard. Again, the fewer things you can have them type in on the keyboard, the better their experience filling out the form is going to be. The more things you can fill in automatically, the better their form experience is going to be. The fewer items that they have to fill in overall, the better their mobile form experience is going to be. Again, some of this is just common sense, but remember, all these different things put together can really make a difference in your mobile-first design.

Other Form Stuff
So, another thing that many mobile browsers will do is provide auto capitalization and auto correction. These are great when you're typing in some content, a blog post or, you know, the message in a contact form, but it's not so great in email, it's not so great in names, autocorrect for example. So, it's nice to be able to turn these things off. Unfortunately, the only mobile browser that supports autocapitalize off and autocorrect off is iOS, so mobile Safari on iPhones and iPads and iPod Touches. If you're going to provide this functionality on Android devices or other mobile devices, you're going to have to figure out a way to program it. I think I mentioned this in my introduction, but just to make sure to reiterate the point, avoid multiple screens. One of the very common things for people to program on the desktop web is sort of a wizard-like approach for entering content. So, entering a little bit of content on one page and then going to the next page and then going to the next page. This pattern is great for the desktop, but it's much better for mobile-first to make the user scroll than to make them to go to a whole other page. Okay, so another thing you can do is use mobile features to make filling out forms easier. So, something like geolocation. You can ask the user if you can have access to their location, you can use their latitude/longitude to look up postal code, city, region, state, fill all those values in. If they're wrong, the user can change them, but if they're right, then the user doesn't have to fill anything in. So, as more mobile features are exposed to the browser, this will continue to expand. And of course, you may be able to use these same features on the desktop because, again, things like geolocation are exposed through most modern desktop browsers as well. So, that could be a way that you could take an experience, something that you've built for a mobile-first site, and apply it to your desktop site.

Summary
Okay, so the basics of this module are users want to be able to provide you data through their mobile devices. Mobile devices should not be thought of as read only devices. You can use common-sense approach to mobile-first design to be able to create experiences for your users that are much easier to use, and then if you start to get creative, using things like geolocation and autocorrect, you can again enhance the user's experience, make it seamless for them to be able to give you data.

Performance
Introduction
Hi. This is Jon Flanders with Pluralsight, and in this module on Mobile-First Responsive Design, I'm going to talk about performance. So, the basic idea behind this module is that every millisecond counts, especially if your mobile users are accessing your site at 3G speeds or even slower.

General Web Performance
Of course, there are many general web performance guidelines, tips, and tricks that you can find all over the web, and developers, I found, tend to know a lot of these. When you actually look at sites, however, and look how they're implemented, you'll see that despite the fact that developers know many of these truths almost about web performance, they tend to not be using them. Typically, I think the reason for that is if you're building a desktop-based design, if you are working on the desktop as you're developing, you're not likely to see many of those performance problems. Developers tend to have fairly high-speed internet, newer hardware, so those things that could affect a user that's got an older piece of hardware or a slower connection tend not to come up. And again, in terms of doing a mobile-first design because a developer, let's say, might test on the iOS simulator, which happens to really be running on your desktop, which means it's going to run much faster, much quicker than it would on a real device. So, besides the idea that you should always test your site on the right hardware in the right environment, if you don't take advantage of some of these simple performance rules, you're going to lose the advantage of a mobile-first design. Mobile users, more than almost any other kind of user, expects pages to be fast, and they expect them to be mobile friendly. If they don't load fast enough, the mobile user will go away, open up an app or open up another tab, go to some other site, put down their phone. If it's not friendly, same thing. They're going to go to some other site, they're going to use some other resource, they will just move away. So, this module is really going to be about a number of performance tips and tricks, whatever you want to call them, rules, that are well documented in other places, but I'm sort of refocusing them here for the mobile experience. Probably the number one performance enhancer for websites, and this is doubly or triply or quadruply true for mobile websites, is that you want to reduce the number of round-trips that the browser has to make in order for your site to load. So, whether you're building for the desktop or building for mobile, building for tablets, building for TVs, reducing the number of round-trips is going to make your site faster. Now, let's remember that every time a browser requests a page, it's going to ask for the HTML, and then it starts to parse the HTML. Every time the browser gets to a script tag, it's going to stop, make a network request, get back that network request, and then execute the JavaScript. Every time it sees a link for a CSS it's going to stop, it's going to get the CSS, and then it's going to apply the styles. Image links are another set of round-trips, don't necessarily stop rendering, but they do cause a round-trip to happen. And again, reducing round-trips is the number one thing that you can do, easy thing that you can do to increase the performance of your website. So, how can we do this? Well, the trick is to have one script link. Don't have a link to 20 different JavaScript frameworks and five different JavaScript frameworks or files that you've created on your own, have one script link. We'll talk about how you can do that. You can do that through a process called bundling one CSS link, and you want to try to reduce the number of images that you are sending down as individual images. You have links to images inside of your HTML, but also remember your CSS will have links to images as well. Now, in terms of images, one of the ways that you can reduce the number of round-trips for images is to use sprites. Sprites are basically one big image with multiple images on the palette of that bigger images, and it will reduce the number of images in your page because all images go into the larger image, your CSS will index into the X and Y on the sprite, and that way you can reduce the number of round-trips. Now, what's true is, sometimes the sprite image can be bigger than all the images put together, but you will gain performance because you've reduced the number of round-trips. You can make three round trips for bigger pieces of data, and that's going to be faster than making six round- trips for smaller pieces of data, okay? So, the faster that those round-trips can happen, the smaller those number of round-trips are, the faster your site will be. Now, of course, you can, you know, say, but Jon, I'm going to go and download a 1 gigabyte sprite and that's going to make my page slower. Sure, the extreme cases. There are always exceptions to rules. Otherwise, they wouldn't be rules. But the rule is, unless you have some exceptional need, reduce the number of round-trips. Sprites, again, are one way to do that with images.

Data-URIs
Now, another way to reduce round-trips for images is to actually include the images inside of the page, and we can do that in modern browsers by using what's called data URIs. Data URIs are URIs. They start with data colon, then they're going to have the MIME type or media type, and then they're actually going to have the data. So, you typically see this with images like the slide has, data:image/png;base64, and then a base64 encoded value of that PNG. That goes right into the page. If you're putting images into CSS, you can do the same thing with the URL, and that is just then the data URI. So, you can encode these images as base64, put them directly in the image tag, directly in the CSS. Now, because you're using base64 in coding, typically the data URI will be bigger than the size of the image. Again, reducing the number of round-trips is worth it generally. The other thing you have to look out for of course is when you have separate images, those images are cached separately as individual items from the page, whereas if you have data URIs, those images are cached as part of the page and part of the CSS. So, if you have a system where you're trying to invalidate the cache of images, if you're using data URIs, that means you're going to have to invalidate the whole page or the whole CSS file. Now, if we start thinking about responsive images, the thing that I mentioned in the earlier module was that SVG, Scalable Vector Graphics, are a great way to do images because they are, inherently by their name scalable, so they respond well to changes in resolution where PNGs don't. So, SVGs are text-based, they are easy to convert to data URIs. This is going to help you where you might need more than one image for different resolutions if you're doing an adaptive design. So again, you could go with a sprite and say I'm going to have one image for my mobile and one image at a different resolution for my desktop, and I'm going to put them together on a sprite. That will solve the problem of, you know, the number of round-trips that you might need, but if you use a SVG, then you just have one image essentially. Now again, because they're text-based, you're going to base64 encode them. They might get a little bigger. In terms of overall size, you might see that they're bigger, but in terms of performance, what you're going to see is you're going to get a much better speed of performance because you're going to be reducing the number of round-trips.

Demo: Data-URIs
Okay, now I'm going to show you a demo of using SVGs and also using data URIs, and also I'll show you a little bit of performance implications of that. So, I've got a simple page. It's got a SVG linked to it with the image source. I'm going to go over to Safari and Refresh, and it looks just like I would imagine. I'm now going to go to a command line, and from the command line I'm going to run the command line base64 utility, which is built into OS X and Unix. If you're on Windows, you can use other tools as well. And I'm going to go ahead and say newlogo. svg. That's going to print out the base64 encoded value here. I'm going to go ahead and copy that, go back over to my editor, and then I'm going to change this from being a link to the SVG to being the data URI. So, I'm going to say data:image/svg+xml, that's the MIME type. It's base64 encoded. And then I'm going to go ahead and put in the data, that base64 encoded data. So, this is what my page looks like now. I'm going to go back and Refresh the browser, and we shouldn't actually see any change because it's the same SVG. One is linked in with the source attribute to the file on the server, two HTTP requests. One now is imbedded as a data URI, so I only have to make one HTTP request. Now, let's look at the Web Inspector. And if I look at the Web Inspector, you can see that the page is loaded essentially and the DOM content is ready just right after 1 second. And if I do a Refresh here, I get, you know, 1. 5 seconds, Refresh again, a little bit under 1 second. Let's do one more Refresh, just over 1 second. So, you know, just, you know, right around 1 second. Now, I am running this page through a proxy. The proxy is turning off caching so there are no caching requests being serviced, and it's also simulating a lower network speed, so not the normal network speed that would happen if I was right on the same machine or in the same network, but more like a 3G speed. Now, what I'm going to do is, this is 1 second, around 1 second for the data URI. I'm going to go back and switch this back to being the link to the separate file, save that, and now let's see what that turns out to be in terms of performance. So, you can see that the DOM content is loaded at about a second, but the load event for the whole page isn't fired until about a second and a half. So, this simple example, let me Refresh it a couple of more times just to sort of see, is about a half second slower than the data URI sample. Now, when you think about that in terms of thousands of requests per day and varying network speeds, you can see that using data URIs in a judicious way can make a very big impact on your performance.

Other Performance Tips
Now, another way to reduce images in your page is to use HTML characters instead of images. This doesn't work for a lot of different images, but if you pay attention to your HTML character set options, there are some images which you might be able to replace. So, for example, if you have a site that's using ratings and you want to put the number of stars per rating, have some stars be dark and some stars be empty, you can use these two HTML character sets, characters, and they will render as stars. So, if you can do that versus including an image, you can greatly reduce the size of the page obviously, as well as reduce the number of round-trips because there are no round-trips needed at all for HTML character sets. Another option is to use an icon font set, which is a font, which will cause you, of course, to do another download for the font, but if the font set meets a lot of your needs for icons, for example, here's an example from a company called Zurb, this is a free set of icons in a font set, you could potentially save because, again, you're not doing a lot of HTTP request for different images or even a sprite, the font set is generally going to be smaller than a sprite, and you have more flexibility because, of course, you can change the color, you can change the font size, so it's going to give you a lot more flexibility than a palette of sprites that are a particular resolution. Again, if you go back to the module where I talked about PNGs and multiple resolutions versus SVGs, you can think about a font set as being the same as an SVG. They are scalable, so the browser will render them well at multiple resolutions. Contrast that with the jQuery icons that I showed on the sprites page in this module. Those are PNG, they are particular resolution, so I can't show them any bigger than they already are. Otherwise, they're going to be all fuzzy. With a font set I can. I can make them bigger, I can make them different colors. And so, not only does that help me in terms of performance, but it helps me in terms of flexibility. Now, a couple other performance things not related to multiple downloads or reducing the number of downloads. One thing you want to do is avoid inline styles. There are a lot of practical reasons, sort of good coding practices reasons for avoiding inline styles, but they also have a negative impact on page rendering. The way modern browsers build up their rendering tree, applying a particular CSS style is really fast for them to be able to apply that to a number of different elements, but every time there's an inline style, it's essentially like a page fault. The browser has to stop for a second and do some re-rendering. That is going to slow down your page rendering. It doesn't matter if your page loads really fast in terms of number of downloads if it renders really, really slow. So, avoid inline styles for a number of reasons including the fact that they are a performance drain.

Demo: Inline Styles
Okay, so inline styles. I want to show you a demo of the effect of inline styles. This page, just to be clear, was not written by me. It was created by Eric, whoever that is. It's on a site called jsperf. com, which is basically an open source site where you can look at and add tests to see how different JavaScript implementations will respond to different feature sets. So, this one basically has a test, and I'm going to go ahead and run it because it takes a couple seconds while I'm explaining it, but is basically four tests, which is add simple, and that's adding a class to a particular element, here's adding the same styles, but through inline styles, here's adding a class that has a number of complex styles, and then here's adding those same styles directly using jQuery. So, you can see that the fastest is adding a simple. This one is 36% slower than that. Now, adding a complex one is only 5% slower than the fastest, and look at how much slower than that adding inline styles that are more than just one property is, 94% slower, okay? So, this was just a very simple demo, and you could try to recreate on your own, but believe me, adding inline styles is slower, will always be slower. It's slower because of the way that browsers render elements and the way they have to respond if things are changed inline. And if you're wondering if it's just Safari, you can go ahead and look at all of these different browsers, and you can see that by far the slowest is inline style complex. You can see that that is definitely the slowest in all the different versions of Chrome, Firefox, iPad, iPhone. It's fairly consistent that using inline styles, especially when it's more than just one, is going to be much slower than using a class. Now, bundling and minification are two ways to improve performance.

Bundling and Minification
Bundling improves performance by reducing the number of round-trips. Minification improves performance by making each request smaller. So, bundling is a technique, which is implemented by a number of different build tools, as well as server-side functionality and different languages and frameworks that will take your CSS files and JavaScript files and put them into single files, an individual CSS, and an individual JavaScript file. This is really important to do, especially if you're trying to build a mobile-first website. Again, for the reasons that I described earlier, you want to do this. There's just no reason not to. It's very easy. It means that you can develop with 30 CSS files with 50 JavaScript files, but then once you deploy, there's going to be one CSS and one JavaScript. Minification reduces the white space inside of those files. So, it makes each of those requests for those files smaller. So, your page is going to reference one CSS file and one JavaScript file. So, if I have two JavaScript files and I run bundling against them, what I'm going to end up with is one JavaScript file. I could have entitled this slide don't use JavaScript, and that would have been kind of, you know, inflammatory.

JavaScript
You obviously are going to use JavaScript. To build a mobile-first web application that does anything other than something very simple, you're going to need to use JavaScript. Although, I highly recommend doing some searches on the web for, you know, games implemented completely in CSS, sites implemented completely in CSS because with modern CSS you can do a lot of things that you never thought were possible even just a couple of years ago. So, you're going to end up using JavaScript. The idea, and sort of my guideline for you is try to use as little as possible. If you can at all use CSS or just some HTML5 feature for something rather than using JavaScript, use the HTML5 or the CSS feature. So, for example, a lot of people like to put placeholders in place of their forms. I talked about that in the mobile form module. There are lots of libraries out there that implement that with JavaScript, but HTML5 browsers support the placeholder attribute. So, look for a non-JavaScript solution before you pick a JavaScript solution. The other thing that you want to do is ensure that your JavaScript and the frameworks that you use are efficient. A lot of JavaScript frameworks, and I'll mention the most popular one, which is jQuery up until 2. 0, I'll just be clear about that, used a lot of older DOM APIs. And the reason that they used older DOM APIs was to make their code work better across multiple browsers and with older browsers. And in fact, a lot of the code inside of jQuery, and this is not just a rip on jQuery, all of the other JavaScript libraries that try to go backwards in time to browsers like IE6 and IE7 end up having lots and lots of code specifically for older browsers like IE6 and IE7, IE6 being the worst culprit out there. So, you know, when you're building a mobile-first site today, you're not worried about IE6. So, don't necessarily just pop in jQuery because you're used to using it, learn there are some new modern DOM APIs that can simplify programming against the DOM that make programming without jQuery almost as easy as with jQuery. So, for example, a lot of people like to use jQuery because they like to be able to query the DOM for element or elements based upon their class or ID. All modern browsers now have querySelector and querySelectorAll. Another thing that people commonly do with jQuery is change the CSS class. All modern browsers have a property on HTML elements called classList and there's classList. add, remove, and toggle. So, again, this is more verbose than jQuery than just the, you know, the dollar sign, but the fact is that it frees you from having to use jQuery for simple things like querying the DOM for elements, adding CSS, removing CSS or toggling CSS. These are just things to look at. I would say try to write your mobile site without using any of these frameworks and see, you know, a prototype, see how hard it is, and see whether or not you can provide your own simple APIs on top of the built-in APIs. And again, then you have less code execution between your code and the DOM APIs, okay? So, this is not a don't use jQuery slide, but it is a be careful and look at each of the libraries you're using to make sure that you actually need to use them before you start using them. Don't just throw your jQuery references into every page, into every project you create. Only go for JavaScript frameworks when you need to. Now, for that JavaScript that you do need, the other thing that you can do to make your site at least appear faster is defer the execution of JavaScript. Remember that JavaScript is executed whenever a browser sees a script tag. It's going to execute that JavaScript, and if it's a script tag with a source attribute, it's going to download that JavaScript first and then execute it. So, modern browsers. Again, the mobile modern browsers support two attributes that can help you defer the execution of JavaScript, defer an async. So, async tells the browser to load the script asynchronously. It says execute this script once you've downloaded it, but you don't have to download it right away. You can download it in the background and that's fine with me. The way you have to use these different attributes is to make sure that your site can render something in the browser before the JavaScript loads. So, you have to be very careful about designing your page, but if you can design your page in such a way that your basic page can load with just your HTML and your CSS and can defer the JavaScript even just, you know, briefly, you're going to have a much better mobile experience for your users because your page is going to load so much faster, okay? So remember, when a script tag hits, the browser is going to stop doing whatever else it's doing, it's going to get the script, and it's going to execute. So, async tells it to do the opposite. Defer says load the script now, but defer execution until after the page has been parsed. This is another way that you can make your page rendering faster, which will make the appearance of your site faster, is just telling the browser hey go download this, I'm going to need it right away when the page loads, but you don't have to execute it until after you parse the whole page, okay? With both of these techniques, you have to be very careful about how you use your JavaScript so that you don't accidentally have a race condition where your page needs the JavaScript before it's actually loaded or executed. So, there's the async attribute and the defer attribute.

Summary
Okay. So, as I said at the beginning, these are common web performance techniques. I have geared them a little bit towards mobile-first. In the mobile-first realm they're probably even more important. And the thing to remember is because mobile browsers, you're targeting the most up-to-date browsers, they tend to have implemented the newest. HTML5, CSS3 features, try to take advantage of as many of those as you can, and then do the common sense performance approach things. Minify and bundle your CSS and JavaScript files, examine what JavaScript libraries you're using closely, and only use those JavaScript libraries which you really, really need.

Responsive design tools
Introduction
Hi. This is Jon Flanders with Pluralsight, and in this module I'm going to talk about some Responsive Web Design Tools. The idea behind this module is pretty simple. I wanted to put together a number of links that you might find useful as you are trying to learn about and implement a Responsive Web Design.

A List of Responsive Tools
So, Luke, I won't even try to pronounce his last name, Luke W., he wrote the book on mobile first web development. A couple of great links to his site, besides of course the book is a great read. There's a great page on his site that lists a number of sites that did a mobile first design and what their return on investment was in terms of increases in the number of hits and the amount of money for ecommerce sites. The other link is a set of very useful content patterns. So, when you're trying to think about how do I change this content to go from a mobile to a desktop experience. Ethan, he coined the term Responsive Web Design. Obviously, there are many links at his site. The one that I've found extremely useful was his 20 favorite responsive sites at the moment. So, it's just his current list. These are the ones that he likes the most in no particular order, but it's a great set of sites to use for inspiration to look to see what other people have done in terms of building responsive sites. Brad Frost just has a nice site that is a list of resources. Some of the links that I'm linking to in this particular module are also linked to in his links. Now there are a number of Responsive Web Design frameworks out there, and probably what you will think or want to ask is what's a good one, which one should I use? At Pluralsight, Scott Allen has a whole course on Twitter's Bootstrap framework, which is quickly becoming one of the more popular responsive frameworks that's available. So, it's an open source framework built by the engineers at Twitter. They use it, and then they also have put it up to be again an open source project that you can contribute to or other people can contribute to. And again, we've got a whole course on that. So, I highly recommend if you're interested in that framework, take a look at the course on Bootstrap. Now, one of the things is when you're testing your mobile design, it's nice to be able to see all of the different resolutions or sizes all at once, and there are a couple of sites that will do that. One is Matt Kersley's. So, mattkersley. com/responsive. You put in your URL and it will essentially do an HTTP request on that URL and it will show you what that site looks like at different resolutions all on the same browser screen. Adobe has a commercial version of this same tool. I believe it's free for right now. At some point it might be that you have to pay for some sort of Cloud subscription to use it, but again, it's another potential tool in your tool box, especially if you already have an Adobe Cloud subscription. Media Query Debugging. This is useful because as you resize your browser, whether you're on your desktop or on some other device, it's nice to see what media queries are actually firing. And so the media query debugger here that's listed, and there are a couple of other ones available, will essentially put a little div or a label into your webpage and it will tell you as those media queries are firing. So, that's another really useful tool so that you can see what is happening in terms of these media queries. Now, if you're going to do more of an adaptive design, you're going to need to figure out what device breakpoints do I need to set in my CSS. The Metal Toad site has a great diagram that's very easy to read and explains in depth what are the different breakpoints and what devices are they for. So, that can help you a lot again if you're doing an adaptive design. The last tool I'm going to link to here, and there again are a number of these out there. This is the one that I found the most useful, is Zurb. Zurb is a design studio and they do a lot of responsive and a lot of mobile first design for customers, but they also put out a lot of the tools that they use. One of the things that I found really useful was their responsive sketch sheets. These are ways that you can sort of prototype or sketch out what you want your design to be. And the reason I found theirs useful is it not only had a mobile sized site on each sheet, but also a desktop size. So, if you're doing mobile first, but you're trying to concurrently find out what your desktop is going to look like as well, their sketch sheet is really, really useful. Okay. So, this is just a list of, you know, 10 different resources that I found to be very, very useful, and there are plenty more out there on the web. Don't take this as a list of the only things you want to look at, but to me, these are some of the more important ones in terms of helping you along your Responsive Web journey.

Course author
Author: Jon Flanders	
Jon Flanders
<p>Although Jon spent the first few years of his professional life as an attorney, he quickly
 found chasing bits more interesting than chasing ambulances. He first worked at the
 University of...

Course info
Level
Intermediate
Rating
4 stars with 462 raters(462)
My rating
null stars

Duration
2h 57m
Released
29 Apr 2013
Share course