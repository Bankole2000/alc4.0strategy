Semantic HTML

by Susan Simkins

In this HTML tutorial, we'll learn about the concept of semantic HTML. Software required: Brackets, Google Chrome.

In this HTML tutorial, we'll learn about the concept of semantic HTML. Semantic HTML means writing HTML that is descriptive and meaningful in regards to content and context. This course will talk about how, and especially why, it is important to write semantic HTML. If you have ever been confused about when and how to use semantic HTML5 elements we will talk about their intended uses in depth. We will also learn how our HTML creates an outline using both headings and HTML5 sectioning elements. We will even gain insight into accessibility concepts and how using different elements changes how those using assistive technologies perceive our webpages by testing our project with a screen reader. By the end of this HTML training, you'll have a solid understanding of how you can write better, semantic HTML. Software required: Brackets, Google Chrome.
Course author
Author: Susan Simkins
Susan Simkins

Susan is a web design tutor for Pluralsight. Growing up, Susan was both a passionate artist as well as a computer tech aficionado. When she discovered the world of web development, she found that...
Course info
Level
Intermediate
Rating
4.3 stars with 229 raters(229)
My rating
null stars
Duration
1h 49m
Released
21 Jan 2016
Share course

Introduction and Project Overview
Introduction and Project Overview

Hi, I'm Susan Simkins and this is Semantic HTML. In this course we'll talk about how, and especially why, it's important to write semantic HTML. We'll examine the reasons it's worth it to take extra care in crafting our semantic HTML in different contexts other than web pages, in which our content is used. We'll talk about the definitions and intended uses of many of the newer HTML5 elements, and correct usage scenarios as well. We'll learn how our HTML creates an outline using both headings and HTML5 sectioning elements, that is used in both search engines and assistive technologies. We'll even gain insight into how using different elements changes how those using assistive technologies perceive our web pages by texting our project with an actual screen reader. If this sounds good, we'll get started in our next video by discussing the definition of semantic HTML.
Semantic HTML
What Is Semantic HTML?

In this video we'll talk about the concept and the definition of semantic HTML. As HTML authors we have many, many different elements we can choose from when we're marking up a page. And in fact we have about this many that we can choose from. And one problem that can arise from this is really knowing when and how to use these different elements. And semantic HTML is a philosophy, or an approach to this, and essentially it's using markup that conveys meaning about its contents, it's descriptive and tells us more about the context of what is being displayed. So let's say we're marking up this paragraph, or excuse me, this footer. We might, indeed, use paragraph tags to mark this up, so we might mark each line of our address up in paragraph tags. We have a copyright statement at the bottom we might mark that up in a paragraph tag as well. But we can do better using the elements we have available to us. So, maybe we look at this and we still mark it up using those paragraph tags, which do make sense, but we add an address tag as well to signify that that's an address being displayed. And our little copyright statement, maybe we would wrap additionally in a small tag, which is meant to signify text that is traditionally displayed at a small size such as copyright statements like this, and other content like terms and conditions. Well we could take it even further as well. With all the added elements we have added in HTML5 maybe we could look at this and say that it belongs in a footer tag as well, since that's exactly what it is, is the footer of a web page. So comparing this to where we started, where we had just generic paragraph tags marking up each line, we can already tell a lot more about the context of the content inside of this section. So, we can now tell that we have the footer of a web page, we can tell it contains an address, and we also know it contains some kind of small text like a copyright or terms and agreement. So you can see how much more descriptive our HTML can be of the content. And the reason this is important is because web content is often used in ways that the designer, or the developer, can't, or doesn't anticipate, by things like search engines and screen readers. And it's also important because machines aren't smart enough to understand the meaning of the content. So, if it was just reading through those paragraphs it wouldn't know anything about what was inside because it can't read and understand it. But by using those tags that are more descriptive it can gain a much better understanding of what is inside of there, because we're essentially telling it what's inside of there using our descriptive tags. And, this is mostly for the benefit of machines so they can understand what kind of content we're displaying. But, it's going to indirectly help humans too, because those technologies, especially assistive technologies like screen readers, use those tags to create things like outlines, which help people who can't see or using assistive technologies navigate through our page, and understand our content, which we'll learn more about in a later lesson. So, now that we've taken a look at what semantic HTML, and why it's important, in our next lesson we're going to take a look our project and learn how to audit a site for semantic issues.
Auditing a Site for Semantic Issues

In this video we'll learn how to conduct a site audit for any kind of semantic issue. And while this might sound really complicated, essentially what we're doing is going through and analyzing to determine whether our elements are semantic. So, we can do this in a couple of ways. And one is to look out for no-nos like generic elements. Unless there isn't a better element, then a generic element, for example a div that it's only used to group elements together for styling. If we have an inconsistent structure, which is bad since our HTML is being used to create an outline for things like search engines and screen readers. And if there is markup that is used purely presentationally since CSS is used to style our content and not HTML. And there's a couple questions we can ask to determine whether there are any of these issues. One is asking ourselves if our HTML elements are descriptive for the content they contain? How is our content structured, and does the HTML match that structure? And are there any elements that are used purely presentationally? So, is our HTML descriptive of its content? There are a couple of really good questions that can help us determine whether this is really the case. Because, for example, when we looked at that footer in our last lesson and we marked up those lines using paragraphs, while those could technically be paragraphs we might have a better way to mark it up. So we want to dig in deeper and ask our self a little bit deeper questions. And some of these might include, what is the elements intended purpose? What are we describing and does that match what the element's intended purpose was? And, is there a more descriptive element that we could use in its place since often there might be multiple elements that could describe it, but some might be a better, more descriptive choice than others. And how is our content structured in our document? So, one really important concept that we need to understand is that our HTML is building an outline. And this outline is used by things like search engines and assistive technologies, like screen readers, to build a physical outline. It might be displayed in search engine results, a screen reader might use it to skip around to different headings as a person who can't see might need to quickly skip around the page since they can't just look and click on it like other users might be able to. And the way this is done with things called sectioning elements and headings, which are used to build an outline, which might actually look something like this. And we can use a browser extension, which we'll do in a later lesson, to actually see what kind of outline we're creating, and why it's actually important to think about this when we're writing our HTML. The last thing we want to think about are if there are any elements that are used purely presentationally. So, let's say we have some bold text and we use a strong tag, which has the effect of making that text bold, and we see our bold text, and we call it a day, then this is using markup purely for a style. And we really want to look at that element and look at its definition so we can see that the strong tag was meant to represent text that has strong importance, so maybe we want to stand out because it's really important to our content, and that would be a good use of the strong tag. So, if we're only using it to create bold text, such as you see below, then this is an incorrect use of it. It's not semantic, it's purely presentational HTML. So we really want to break that down and thinking about how we're using these elements. So, now that we've taken a look at how we can conduct a site audit to determine whether HTML is semantic or not semantic, in our next lesson we're going to take a look at our project and conduct an audit of our own.
Auditing Our Project for Semanticism

In this video we'll be auditing our project for any kind of semantic issues. So, for the rest of the course we're going to be working in a text editor with our project, and for that reason you're going to need a text editor, and you can use your favorite, if you have one, or you can use Brackets like I'm going to be using, which is free, it's open source, and it's really, really awesome, so I recommend it. And if you want to do that you can go to brackets. io in your browser, and download it, and follow along with me. Which, just as a note, you'll also need Google Chrome installed for the Live Preview feature to work. So if you don't have Google Chrome, you'll want to make sure that you install that as well. So, I'm going to go ahead and exit out of this and bring up Brackets. And the first thing you'll want to do with the text editor open is to open our project files. And we're just going to be working out of different folders for each lesson. So you can come over here in the project pane, and come down to Open Folder. Or you could also come up here at the top and come to Open Folder as well. And in our project_files folder we have two different folders, and we want to come in here to our HTML file, and click on the folder for our lesson. So, in this case, we're working out of 04_begin. So, once in here you can see that we have multiple files, and we have two CSS styles we're using, main. css with our main style sheet, we have one for responsive navigation, which we aren't going to be diving into our styles so I'm going to go ahead and collapse that folder, and our images folder as well. And the main things we're going to be working on here are two different HTML pages, which we'll go ahead and take a look at those now. So I'm going to shrink down our Brackets window over here, and click on this lightning bolt icon up here on the top right, and it's going to pull up our live preview in Google Chrome, so we can preview what theses HTML files look like. And since I have a smaller screen I'm zoomed kind of way out here so we can look at the whole page. So, mine might look a little bit different for the reason that I'm highly zoomed out here. And our first page is a news page, which is a collection of blog posts and articles for our site, which is for a fictional society called the National Society for Bee Protection, which aims to educate people about agriculture or beekeeping, and saving bees from colony collapse disorder. So we have our blog style page here, and then we also have a page with a form on it that the user can fill out and request a free copy of a beekeeping guide. So we'll be taking a look at these. So let's go ahead and start here at our beekeeping guide. And we're going to go through our HTML, and we're not going to change it in this lesson, rather we're going to start thinking about some of the questions we asked our self in our last lesson to see if there's even a reason we need to use different tags to make it more semantic, or if there's a way we can improve our existing site, which is something we always want to ask ourselves as we're authoring our web pages. So, we're going to start in the body since that's where all of our main content is. And take a look at the elements we're using. So, our first element is a div, and it has a class of header, and it's marking up, or containing, things like our logo and our main navigation. So we want to start thinking about some of those questions we talked about in our last lesson, which where things like what is the element's intended purpose? What are we describing? And is there a more descriptive element that we can use? So taking a look at this div here, the purpose of a div is just being a generic element that groups content together for styling purposes. And yes, we may need to group this together for styling purposes, but that's not its main role in our site. So, since this is essentially a header and our navigation, then we have a lot more elements that are more descriptive of the content inside. So we can already see we have some issues here in our header section. And moving down the page, we can see we have some main navigation, which is also in a generic div. If we come down here we have a container div, which is wrapping all of our content on the page, our individual sections are marked up with divs, so there really is a lot of generic HTML existing already in our page, so we know there's going to be a lot of room for improvement. So I'm going to come over here and switch to our news. html page. And we have a lot of the same issues. We have just our generic divs marking up our header and our navigation. We have another div wrapping all of our main content. We have a generic div for our sidebar. And if we were to go deeper and look at individual elements, we can see that there're going to be more issues as well. For example, we have some abbreviations here or acronyms that we have specific elements that can mark up stuff like this and make is more accessible, in terms of our content. So there are going to be many, many opportunities as we go through here and see how we can drastically improve the semanticness of our HTML, and in turn improve things like our SEO and the accessibility of our page. So, now that we've taken a first look at our project and started to think about some of the issues we have with the semanticness of our HTML, in our next video we're going to talk about how we can use sectioning and grouping elements to start creating a semantic outline of our web page.
Sectioning and Grouping Elements

In this video we're going to be going through our project and analyzing its structure to make it more semantic. And what we're going to be doing is paying really close attention to what kind of outline we're creating with our content. And we're going to be using something called sectioning elements and grouping elements to be really conscious of that outline we are creating. And outlines are kind of like when, maybe you wrote a research paper or something like that. You might have where you would have a main heading or a title, the rest of your content is about. So, for example, if we were writing a research paper on internet cats, we might have a subsection that are about YouTube videos, but the YouTube videos are about internet cats. So this is a subcategory of our main subject, internet cats. And this might be broken down further into topics, maybe we have YouTube videos specifically about cats in boxes, but we're still talking about the overall subject of internet cats. And we might have more YouTube videos we talk about, about just cats jumping on and off things. And then when we start a new section that is not about YouTube videos, maybe we're talking now about famous cats, but we're still talking about famous internet cats, we might have subsections and talk about specific famous cats. So we'd have a subsection about, maybe, Little Bub, Maru, Colonel Meow, Grumpy Cat, and so on and so forth. And then when we're done talking about famous cats, we might move on to talk about specific cat memes. So we have all these different subsections and subheadings that we have organized our content into under this main subject of internet cats. In each web page we're creating is creating a similar structured outline. And to create this outline, which we can actually physically see with a browser extension, which I'll do in a later lesson, we're going to use the sectioning elements in these grouping elements, and also our headings are h1s through our h6s to create this structure on our own, so we're going to be very intentional and make sure that this makes sense, since search engines are going to use this and assistive technology, like screen readers, are going to use this as well, it's really important to get this right even though it's not something that's visually on the page that the user sees. It's actually really helping the user experience of our page, especially in contexts that our outside of our website. So as I mentioned before outline is going to be created through sectioning and grouping elements, and our headings as well. And, sectioning elements are essentially elements who are intended to divide content up into logical sections. So, if we're thinking about the structure of a web page we usually have some components that are in common and our HTML5 elements were created to kind of mimic this common structure. So, we usually have a header, which might consist of a logo and navigational elements. Then we have all of our main content that makes up the bulk of the actual content, the text, images, any kind of thing like that on our page. And then we have, maybe, a footer element as well. And not every website follows this structure, but many, many, many of the websites that are out there follow this kind of structure. So we're going to see our elements and what they were intended to do, kind of match closely with this idea of us being a common structure of a web page. And a lot of the elements we're going to use are going to be these that help us divide up our web page into sections. So, on the left we have our div, which is a semantically meaningless element, it doesn't mean anything at all, it's just used to group elements together for styling purposes. And prior to HTML5 the div was really the only way we could group elements together. So, it was important in creating an outline in different sections, but with the addition of HTML5, we had all these new elements that were more semantic, or descriptive, of their content. So we now have more descriptive ways to mark up our page. So, a div is still fine if there isn't a better option, but we want to pay careful attention and see if one of these elements on the right makes more sense in the context of our page. So, for example, if we have a sidebar it might make sense to mark it up using that aside element for information that is related to, but separate from the main content of the page, which is traditionally the role of a sidebar. And we also have all of these other grouping elements as well. So, if we had an image with a caption, or a chart, or an illustration we might mark that up using a figure tag. Our navigational elements we could group together with a nav tag, or if we have breadcrumb navigation on our site we might group that together with a nav tag. All these things are going to help us be more descriptive of the specific types of content on our page. So we're going to be analyzing the meaning or the purpose of these elements in looking for these kinds of patterns in our web pages. So, I've switched back over to Brackets and I have the 05_begin folder open, which is the same as where we left off in our last lesson since we didn't make any changes. So I'm going to go ahead and move that file pane out of the way so we have more room to see here. And, we're going to start going through the structure and seeing what type of elements we can maybe replace our divs with, thinking about what kinds of sections we have in our page and the kind of outline we're building. So I'm going to go ahead and shrink this and bring up our live preview as well, and we're just going to start with our Free Guides page here, where essentially we're just filling out a form to request a free copy of this PDF. And I'm going to start right under our opening body tags, since that's where all of our content, all of our visual content on the page is going to be. And the first thing we have on the page is this div with a class of header. And, before HTML5 and even still to this day, it's a really common practice to use a class to kind of describe semantically what it was you were marking up, since most of the time it would be a div. And then with the additional addition of HTML5 we had a lot of elements added based on these kinds of convention. So, if we think about what we're marking up here, you can see if I click in here on the element it will highlight it over in our live preview, our div is wrapping a logo and all of our navigational elements. And so if we look at the elements we actually have available to us we have one called header, which is supposed to be used to group together content with introductory content such as heading elements, navigation, or a logo. And, seeing what we have in there, we have logo and navigation, so semantically this is much more descriptive of what's inside of it than just our generic div. So, we're going to come in here and change our div on line 12 to be a header element. And then we're going to go ahead and change that closing div to be a header element as well. And then we're going to continue going through here and we're not going to get so granular as to look at in-text semantics, which is something we'll learn about in a later lesson. So if you don't know what that is then that's completely fine, we're going to go ahead and talk about this, but thinking broadly of the large sections and taking a look at our divs, which are traditionally used to group content together. So our next one, right under our what is now a header, is marking up essentially our main navigation. And it includes our logo, which off the top of our head you might not think as being navigation, but since it's linking to what would be the home page, then it's actually serving as a link and it makes sense to include it with our navigation. And then we have an unordered list full of the rest of our in-site links to our different web pages on our site. So, essentially the only thing that's in here is our main navigation. So, if we go back and think about our elements we also have another one that's called a nav element. And its purpose was to group together navigational elements. So, this is much more descriptive than our div and it makes sense to go ahead and change this to be a nav tag. So I'm going to change this div to be a nav tag. And then we want to make sure we get our closing div as well on line 22. And we can move along and we have a div right below here, with a class of logo. And it's just wrapping our logo in a container and grouping it together with this anchor tag or link, and the logo image itself. So, if we go back and we think about what elements we have in HTML5 available to us, and what the purpose is, what we're doing here, this div is only surveying for stylistic purposes. And you might not be able to infer that or guess that off the top of your head, but since I wrote all this CSS for this I know that when I authored this page that that was the only intended purpose. It doesn't really need anything semantically and we don't have any kind of element that is used to represent a logo, or anything of that nature. So, sometimes a div makes perfect sense for its intended purpose, and there isn't any reason to change it to an HTML5 element or another descriptive element. So we're going to go ahead and leave that as a div. And then scrolling down here, we're going to skip all of our main content for now. We're focusing on our elements, which are repeated across our entire site, such as our header, and our bottom area here, and then we'll go through this in our next lesson. So I'm going to scroll down to the bottom of our page. And we have a div with a class of footer, and we also have an HTML5 element that is actually called footer, which is meant to group content together with footer content such as additional navigation and legal statements. So in our footer here you can see that we have a copyright statement. So, we're just going to change this div, since it is marking up an actual section, a semantic section of our site, it makes sense to use that footer tag instead. So I'm going to change that opening and that closing div tag to be a footer element. And then we're going to hit Ctrl+S to save. And in our next lesson we're going to talk about the differences between our main flow content, our repeated elements, and then start going through our actual main flow content in marking that up semantically.
Semantics and Screen Readers

In this video we're going to be going through our content and comparing our less semantic markup compared to our more semantic markup. And we're also going to be talking about the different between main flow content and repeated elements on our site. In our last lesson we went through, we marked up our header, our navigation, and our footer. So I want to take a look behind the scenes and see what kinds of advantages that we're getting even if we can't physically see them. So, to do that I am going to be using a browser extension called ChromeVox, which is a screen reader developed by Google, made as an extension for Google Chrome. And it's not always the most user friendly honestly, but generally it is pretty good and it's free, which is fantastic. So, you can either install it and follow along in this lesson, or I recommend you just listen for now because we'll be using this more in depth in a later lesson. So I'm going to come over here to my browser Extensions tab, and I'm going to go ahead and enable this, and in just a second you'll hear the voice turn on. So now I've enabled this, ChromeVox spoken feedback is ready, and I'm going to go ahead and shrink the window back down. National Society for Bee Protection, News, Tab. So we're going to start with our generic divs and listen to the difference in what the screen reader says as compared to our more generic elements and then our more semantic element. So, I'm going to just go ahead and click here on our top header area. About, News, Learn More, Contact, Donate. Okay, so it's going through the list and it's reading off the names of each link here. National Society for Bee Protection, Free Guides, Tab. And I'm going to go ahead and do the same. So let's listen to the difference here. Nation Society for Bee Protection, Free Guides, Tab, About, News, Learn More, Contact, Donate, Navigation. So, what you heard, or maybe you didn't hear if you missed it, is that this time it's reading through the list and then it's telling us that this is navigation. And the reason it's able to do this, which is much more descriptive and helpful to someone who couldn't see physically that these are links, is that these are, this is actually a navigational element. So, this is really, really cool that just by adding these tags we're getting this extra benefit and making it much more user friendly for someone who's using an assistive technology, such as a screen reader. And I'm just going to navigate to it using the keyboard as well so we can hear a different way this might be navigated to and see just another example of the differences in this. National Society for Bee Protection, Free Guides, Tab, Free Guides, Heading 1. And navigate to our header area here. Heading navigation list with five items, Donate, Internal Link, List Item. So, we're selecting this a little bit differently, we're selecting the individual link, but if you heard it, I'll go ahead and play this again. Free Guides, heading navigation list with five items, Donate, Internal Link, List Item. We're able to hear multiple things about this. It's telling us that it's a header navigation element, and that we have an internal link list item called donate. So this is pretty descriptive of the element we're selecting, which is going to be very, very helpful for a non-visual user. And you'll notice that the semantics, or the words, the screen reader is able to use, it used the words header and navigation, which coincidentally are the elements we used to mark up this content. So it's able to gather the context of what it's reading off based purely on what kind of markup we're using in our content. So this is really, really cool. National Society for Bee Protection, News, Tab, to our other page, then you start, News, Heading 1, right here and do the same thing and navigate to that Donate link. Next, with five items, Donate, Internal Link, List Item. So, we could still gather that it's a link, but we only know that there is a list of links and that this one is called Donate. We're not getting the context that this is header, which is a pretty good indication that it's main navigation for our site, and it's not also telling us that it's a navigational list. So this is really, really cool that we're able to provide this kind of improved user experience just by using a different, more descriptive tag. And a lot of the tags we're going to be using are differentiating between repeated elements in our site, and what is referred to as main flow content. And, we're going to be using these terms a lot to differentiate the different elements on our site. So, what we did in our last lesson is mark up some of these more repeated elements, things like our navigation, our footer, maybe if we have a sidebar that's on multiple areas in our site, and then the content that is page specific. So, if we think about this in our head when we're marking up our site we're going to have our repeated elements, and then we'll have specific elements to mark up and differentiate into our main flow content. So, when you hear this term you can kind of think of it that way, is it repeated or is it in that main content flow? And hopefully this will start to make more sense as we go along and use these elements more, this kind of distinction that's made in our markup. So I'm going to go ahead and turn off ChromeVox now. Tab, checkbox checked. And switch back over here. And in between lessons I'm going to go ahead and mark up our header elements. So, feel free to do so between lessons, or you can open up our folder in our next lesson if you don't wish to do so. So, I'm going to do that and mark up our footer. And in our next lesson we're going to continue marking up our sections, and start to go through some of our main flow content.
Main Flow Content

In this video we'll be going through the rest of our main flow content and marking it up more semantically. And in between lessons, once again, I went to news. html, marked up our header, our nav, and our footer with their respective tags just to save a little time and reduce any kind of repetition. So we're going to come back over here to beekeeping-guide. html and continue down the rest of our page. So in our last lesson we saw that our screen reader gave us some pretty cool insight into how we're already improving the usability of our page, behind the scenes, not visually, and that is just really, really cool. And I apologize, just real quickly, because ChromeVox can sometimes blast out your eardrums due to the irregularity of the sounds and the volumes that it puts between speech and notifications like switching tabs. And I know that I've probably suffered permanent hearing loss thank you to ChromeVox and thank you Google. So, we're going to go ahead and come down right under here from our closing header tag, and on line 24, take a look at this div. And once again we want to ask our self a couple of questions about the purpose of this element and what it's doing, what the purpose of our specific elements are that we might consider replacing it with, and whether those two things match. So since I'm the author of this page I know that this div has a couple of purposes. One is to serve as a container for styling all this content, and the other is to group together all of the main content on the page. And if I was adding ARIA roles to this at a later date to improve the accessibility of this page I might add a role of main. And I you aren't familiar to ARIA, these different roles just tell the screen reader or assistive technology what each thing is doing so it can be more descriptive, just like we have with our header and our nav tags. And that would denote that his is main content. So this is really serving two purposes. One is a styling container, and the other to denote that main content area. So, we could leave it as a div if the primary purpose was for styling, but we also can kind of kill two birds with one stone here. And we also have a main element that was created based on that need to denote the area of main content for things like assistive technology. So, this makes perfect sense to use this as a main content area of a web page. And you should note that you should only use the main element once because it is meant semantically to signify that block of main content that's in the main content flow. Because if you remember in our last lesson we started talking about this difference between our repeated elements like our navigation, our header, our footer, and then we have things that are in this concept of main flow, or main content. And we can kind of think of this, when we go back to thinking about our outline, and we have that main topic, or category, that our page is about when we're thinking about our web page in terms of an outline. So if our main topic was something like internet cats then we might wrap everything relating to that topic in that main element to signify that that's our main topic, everything under it is main content flow under that one subject. So hopefully that makes sense to you. So we're going to go under our closing header tag, and we're going to change this div to be a main element. And, once again, we want to make sure we get that closing div as well. I'm going to change that to a closing main tag, very, very good. And we're going to go ahead and move on. And you see right under our main element we have our h1. So, this is a good sign if we think of this in terms of an outline that we're kind of matching semantically that concept. So, we would have our main tag wrapping all of this, and then right underneath it, it makes sense to introduce our main topic. So the main topic of this page, our h1, or a level 1 heading, would be to all kinds of free guides we could request to get more information. So we have our h1, our main heading, and then right underneath this we're starting our first area. So this one is more specifically an individual guide we could fill out, maybe in our final version we would have multiple guides we could request on this page. So we have a div marking up this new area. And if we think about this semantically it's starting a new section essentially on our page. So if we revisit this idea of our outline, if we broke this topic, this main topic down further into a subtopic then we might have YouTube videos, the famous cats, cat memes, each of these are essentially starting a new section in our outline. And, in HTML5 we have these concepts of sectioning elements, which are essentially doing that, they're creating new sections within that outline. So semantically that's what this div is doing, and it makes sense to use something like this section element, which is going to logically group this section together. Especially since, if we think about everything inside of it it's all related to this one specific guide. So we have some information about it and then we have a form that we could fill out to request this specific guide. So, logically it makes sense to group this together. So we're going to change this div to be a section. And I'm going to scroll down here and change this closing div to be a section as well. So I'm going to hit Ctrl+S to save here. And we might want to come in and see if we have anything else, any other major sectioning areas that we need to evaluate for a more semantic element. And we might have some within this form, but in a later lesson we're going to talk specifically about form semantics, so we're going to save that for later. And, those are our main section areas on this page. So, overall it's looking pretty good in terms of our sections. So in our next lesson we're going to switch over to our news. html page, and go through and take a look at what kind of sectioning elements we're using there, and what kind of outline we're supporting with those sectioning elements.
Marking up Main Flow Content

In this video we're going to switch over to our news. html page and mark it up into its logical sections. In our last lesson we finished up marking up our beekeeping-guide. html page, so we're going to switch over and start right here under our closing header tag, just like we did with our beekeeping-guide. html page. So, right under this we have a div with a class of secondary page, just like we did on our other page. And it is marking up all of our main content so it makes sense, just like on our beekeeping guide page, that we mark this up with a main tag as well. So, we're going to go ahead and change this, just kidding, because we want to make sure we're continually really asking ourselves what is the true purpose of this element, and make sure that we're doing the most logical thing. And, this one is kind of trickier because we have the addition of another element here, and that is a sidebar. And we need to ask our self really what each thing is doing here and how it relates to our content as a whole. And if we think of a web page, generally a sidebar is not really in that main flow content. So, if we're reading through there and we didn't see that sidebar at all it might not even really hurt our user experience, and it might aid it perhaps if we need those links to quickly get around or it has some information, but we could take it out and move it around the page and it's not going to affect the flow of the rest of the content as we're reading through that. We could see that at any point and it really wouldn't make a huge difference. So that is a true role of a sidebar, or an aside, you can kind of use this logical test in your head, if I moved this just a little bit would it affect how I'm reading through the bulk of the content? So, if we come back over here and think of it in this way, essentially it's not going to because it's a list of links to other recent articles, which is helpful, but if we think of that role of the main element, which is to mark up that main flow content, it doesn't really fit in there. So if we look at this div, which is wrapping all of this then we know perhaps that that is not the most semantic choice. So for that reason we're going to leave this as a div, since it's essentially at that point being used as a styling container, which is the purpose of a div. So, we're going to mark up what is our main content. So coming through the rest of our elements here, if I click on this div on line 33, we can see it's marking up our individual articles, which is the main content of this page, it's all supporting content for this broad, overarching category of news, so it makes sense to tell our page that this is the main content. So we're going to change this div to be our main element, and on line 54 we'll go ahead and make sure we close that main div there, or that div, excuse me, to be a main element instead. So, looking up here we also have a div marking up our sidebar. So, in thinking about our elements this is marking up a logical area of our page, it's not just for styling purposes. So if we think of the elements we have available to us, we have a little guy up there in the top right called aside to mark up information that is related to, but separate from the other main flow content on the page. So semantically, at least, I think this is perfectly describing the role that our sidebar is playing on the page. It's not in that main flow content, it's aside, ha, ha, ha, from the rest of the content. So we're going to go ahead and change this to be an aside element. And on line 32 make sure we close that closing div as well. And I'm going to hit Ctrl+S to save. And we'll continue down through the rest of our content. And right under our main element now our next container is this div with a class of article. And it's marking up this individual blog post, and then we have another one down here that's doing exactly the same thing. So, once again, although this is being used for styling purposes as well, it's also serving to markup a logical section, or area, within our document outline and within our webpage. So we want to revisit those semantic elements and see if we might have a better choice. And, scrolling through here, right there in the middle on the right side we have actually an element that is meant to markup a standalone piece of content that is publishable on on its own. For example, a blog article. So, this seems like the perfect opportunity to use this semantic element, since that's exactly what this div is doing. So we're going to change this first one to be an article. And I'm going to update that closing tag as well on line 43. And then we'll go ahead and do the same thing for our other div. And then make sure we get the closing tag, which is nicely highlighted for us right here on line 53. And so our page is looking much, much better logically. And I'm going to come through, and we just have one more div on the page. And, what this is doing is, one, it's serving as a styling container for this, but it's also marking up another logical area of our page, because we have an image and we have a caption. Which is similar to an aside in that we can move this little section around, we could put it at the beginning of the article or at the end of the article, and it's really not affecting the main flow. So, this can kind of help serve as a test, once again, about where it's serving its purpose in terms of our content in thinking of it semantically in that way. So, if we revisit our elements, we had two new elements added in HTML5, figure and figcaption, and they are meant to semantically mark up content that is usually related to the main content, but is positioned independently of the main flow like a chart, diagram, illustration or image, and usually has a caption. So semantically if we compare that to the role of this image and this caption is, it seems to fit that pretty perfectly. And not only that, it's much more meaningful in semantic compared to our generic div. So we're going to come in here and we're going to change, on line 37, our div to be that figure tag, and our closing div as well. And then we have just a paragraph with our image, so we're going to change this to be a figcaption. So, our page is looking pretty awesome semantically, so I'm going to hit Ctrl+S to save. And in our next lesson we're going to move on and take an in-depth look at our headings and what role they're playing in our outlines.
Headings and Implicit Sections

In this video we'll talk about how to use headings to create our outline. Up until this point we have been marking up our content semantically into different sections. And going right along with this concept is the concept of using headings to support these logical sections that actually create the outline. So, the HTML5 specification added a new way of doing this that was used in conjunction with HTML5 elements, but as of the date of this recording it hasn't been implemented anywhere. So while we still should use our semantic tags because they have a lot of accessibility benefits and SEO benefits, we can't actually use the outlining algorithm that was defined in the specification, so we still have to use the HTML 4 way of creating an outline using headings, which is done using what's called implicit sections. And the way different levels of the outline are created are defined based on what level of heading you're using. So we have heading levels one through six in HTML. And when we use the same level heading as the previous heading we close that previous level and it starts a new section at the same level. And we could also create a new higher level section when we use a higher level tag that closes that level and starts a new implicit one at a higher level. So, let's say we're starting at an h2, or heading level 2, and our next tag is an h1, then it would close out that second level of the outline and start a new level at a higher level, which might sound hard to picture off the top of your head, but in a couple of minutes I think it'll make a lot more sense. And another important thing to note about using our heading elements is that according to the specification they shouldn't be used to mark up subheadings, subtitles, alternative titles, and taglines unless intended to be the heading for a new section or subsection. So, you can really see how important these headings are for creating the outlines, so much so that we aren't allowed to use them to mark up subheadings. And if you're confused about what a subheading is you can kind of think of a newspaper and how the titles and headings are organized in articles in this way. So, you have your headline or your main heading that would be basically the same thing as an h1 in our web page. And then you have this little subheading with additional information about what's going to be inside the article, so that would be our subheading. And since this subheading is not creating a new section, it's just supporting additional heading information for the same section, then according the HTML specification this would not make sense to mark up as a h2, for example, we would mark that up with a paragraph. So going back to our outline example and thinking of how we could use headings to create this same outline, our main title, or the topic of our entire page would be our h1. And then if we wanted to create a new subsection we would go down a level, so we'd mark up our first indentation or our next deepest level at h2, so they'd be our level 2s. And then if we had a subsection in that section that would be an h3. And the one below that is at the same level, has the same amount of indentation, same equal importance in the hierarchy would be an h3 too. So if we wanted to close out this section and go up one level we would mark up our next section with an h2, which makes sense because when you're thinking about the outline it's equal with that first YouTube video's level section, so they should have the same level of heading. And then inside of our Famous Cat section, the second h2, if we wanted to go deeper one level we would mark these all up with h3s because they're all equal with each other, but they're inside of that level 2 section. So, if each of these h3s was further broken out into different sections then those would have h4s, and so on and so forth. So our last section, if you want to take a stab at what we would mark that up, I'll give you second to think, and we would mark that up with an h2, because indentation wise we're in our hierarchy, it's at the same level of our YouTube Videos, our Famous Cats, and our Cat Memes. And I know this can be really confusing at first so if it doesn't make sense to you right away that's completely okay, I think the more practice you get the more logical this will seem. So, now that we've taken a first glance at how we can use headings to create our outline in HTML, in our next lesson we're going to actually go into our HTML pages and use our different level headings to create the outline for our pages.
Creating Our Outline Using Headings

In this video we'll be going through our content and marking up our headings to support the outline we're creating. We're going to start with our beekeeping-guide. html page. And we want to go through each of our headings and ask our self what kind of outline we're building, and whether it's matching the logical outline we want to create for our content. So there're going to be a couple of questions we ask ourselves as we go through these headings. And it looks something like this. So the first thing we want to ask our self is whether it is starting a new section? Because if you remember in our last lesson we talked about how according to the W3C specification for headings our h1 through h6 elements should not be used to mark up subheadings, subtitles, alternative titles, and taglines unless intended to be the heading for a new section or subsection. So, that's the first thing we can ask our self when we're looking at our heading, is whether it's starting a new logical section in our outline, and that will be one of the quickest and easiest ways to just determine whether it's just a heading, or a title, or just a subheading, or a tagline. So, if it's not starting a new section in our outline we want to use a paragraph tag to mark that up. And we could style it like a subheading so it has the same appearance visually. Or, if it is starting a new section we want to ask our self what level that heading is in the outline we're creating and whether we're using the appropriate heading level tag. So let's go ahead and switch back over to our page. And we're going to start right under our main element in our first heading, our h1. So, the h1 we want to represent the main topic of our entire page, so everything is going to ideally fall under this broad subject. So, let's take a look at our page. Our heading says that these should all be free guides. And if we look under here everything is related to the subject of getting a free guide, although, as a side note we only have one guide on this page since this is more of a prototype of a website, maybe we'd have multiple guides here in our final version that we could request a free copy of. So, thinking of our outline I think this makes sense as the main heading for our page, or at least compared to all of our other subjects this is definitely the most logical, main subject of our Free Guides page. So, I think this is good as it is so we can go ahead and move on. And we want to come to our next level heading. And this is an h3, so we went from an h1 to an h3. And we would want to scan through the rest of our page and ask our self if that makes sense. So looking through here I can see we have an h4 right after. And we have no other headings on our page. So we're going directly from an h1 to an h3, and we know that this doesn't really make sense based on this concept of an outline, because there's no logical reason to skip an h2 heading. We want to build those different levels so our next deep level in the outline hierachy we'd want to be an h2, which leads me to believe that when this page was being marked up or coded, that it might have been used presentationally to just mark up a medium sized heading. Since we have some default browser styles it would automatically have some browser styles that make an h3 kind of a medium size compared to the other headings. So, we want to avoid using elements presentationally, we want to use them semantically. So it makes sense to make this heading an h2. Since, if we were thinking about our page as an outline, our main topic would be Free Guides, h2 would be one specific title of a guide. So if we had multiple individual guides or specific guides they might all be marked up with an h2, as well. And then looking down here we have an h4, so now we're going from an h2 to an h4, and once again this doesn't really logically make sense. So, one thing we could do is mark this up with an h3. Since this would be, in terms of our heading tags, the next level in our outline, but we want to go back and revisit that concept we just talked about and ask if it's starting a new section. So, is our heading, our h3 now starting a new section in our outline? Well, the h2 is starting a new section, literally you can see it in our HTML, we have this section tag, and this is really serving as a subheading. You can see it's literally heading following another heading, so it doesn't make sense for this to be an h3, or a heading tag. According to that specification we want to use a paragraph and mark it up using CSS to be presented as a subheading, because this is going to mess up our outline and start a new implied section based on these heading tags. So that's why we want to change this from an h3 to be a paragraph instead. So I'm going to hit Ctrl+S to save. And one thing that helps me when I'm looking through these, logically determine what level heading we're creating is to go into something like Microsoft Word, especially when you're first learning this and actually create a physical outline of the content on your page. And, doing this will really help you see and think about that outline you're creating. So, for example, this is outline. pdf and you can find it in that referenced files folder with the project files. It's just outline. pdf, right in that, directly in that folder, and I've created outlines for our pages here. So, our first one is what I initially thought based on our headings, the outline that we're creating. But then we want to go through and ask our self whether we're starting a new section, whether this is really logical, and thinking about it that way, the Request a Free Copy it's really starting a new section or a new subject, it's still going along with the specific guide, One for the Honey. And that way I was able to catch that semantic error there and redefine the outline so we know that we have our h1, that free guides, and then we have our specific guides would be all of our level 2s, and since we only have one we just have this One for the Honey heading. And now we know that our headings, we can check that against that outline and make sure this is supporting this. So, once again, we know we could change this heading to be a paragraph and we catch any errors when we're skipping through different heading levels and things of that nature. So, if you're visual like me I find that very helpful when going through this. So, now that we've gone through and checked the heading levels of our beekeeping-guide. html page, in our next lesson we're going to go ahead and do the same for our news. html page.
HTML Outlines

In this video we'll be taking a look at our news. html page, and evaluating its heading levels and outline. So we're going to start right under our div with the class of secondary-page, and take a look at our level 1 heading on this page, and see if it's matching that outline that we are creating. And, if we want to have our h1, once again, represent that main topic on our page, since this is the news page and we have different relevant articles and blog posts being published I think this makes sense to be our level 1 heading in our outline and in our HTML. So we want to move on and take a look at our other headings. So, let's just take a brief look and see what we have here on the page. We have our aside with an h2 heading. Then we have our individual articles in our main section with the class of news, so we have this individual article with an h2. And then it goes from an h2, and then we have our next level headings at an h6. And then we have the same thing with our article in h2, and then we go to an h6. So, immediately this sets off a bell that perhaps we're using these headings presentationally because we wanted a smaller heading size, because otherwise it doesn't really make logical sense to go from an h2 through an h6. So I'm going to come back over here to our next level heading, our h2 and our aside, and we want to think about this outline that we are creating, and just like I did in the last lesson I physically went into Microsoft Word and outlined how I thought this content was on the page, and how I thought it should be. So, if you go into that outline. pdf file within our reference files folder, this option 1 represents our hierarchy as we currently have it. So we have our h1 heading, which is the news heading, and then our next heading in the outline is our recent articles and our h2. And in the outline that's represented by our current HTML our first next level heading would be this recent articles. And I just put links to recent articles so we can remind our self even though it doesn't say that in our heading, this is what it's representing in our outline. And then our individual articles also have these h2 headings. So when seeing what outline we're physically creating with our HTML, this would technically work for an outline, but it doesn't make the most logical sense to me. And the reason it doesn't make the most logical sense to me is because links to recent articles doesn't make sense to be at the same level as a specific article. So it seems to me when I'm thinking about this that maybe we're skipping a level of heading that would make more sense to actually have on our page. So, for this reason if we're going in here I think I like option 2 better, which would be to have our links to recent articles, it makes sense to have this next in our outline, and then adding a heading, perhaps, linking to all articles, assuming that on our page we have all of our full text over here on the left that we would be able to keep on scrolling and read all of the articles that have been published to the blog. Although we don't visually really need that on the page, if we're thinking about it from an outlines perspective, and maybe someone using a screen reader, was only being read out these headings then I think this makes more semantic sense and would present a better user experience for people using those assistive technologies, which if we make an assumption like that, of course later on we'd want to test our assumptions and make sure if that is in fact creating the best user experience for those users. And one other thing I want to note here is, when we're creating an outline like this when we skip from something like an h2 to an h6, it actually is creating an outline like what we see here, it's only going one level deeper, but we still want to take really good care to make sure we aren't skipping these different level headings because a screen reader isn't going to treat it like this. If someone wanted to go skip around between these different heading levels then if we had h3s, or something like that on other places on our page, it's not going to be able to navigate in the correct order, or make much logical sense. So, this will make more sense in our next lesson when we actually use an extension to take a look at this. So, I'm going to go ahead and minimize this. So, I mentioned that I think our h2 and our sidebar makes sense to stay at this level because it's the next level heading directly under our level 1 heading of News. So we want to start down here and start changing this at our h2. So we have our main element with a class of news, and so the main content, which this element represents, is going to be the full text of all of our articles. So, our next h2, which is once again, equal in our outline to our other h2 of Recent Articles, is going to be all articles, or maybe you can think of a different text for this level heading that is descriptive of its content. So, that made the most sense to me since we're just having the full text of all of our articles. So I'm just going to say All Articles. And we could leave this visually on the page, or if we don't think to a visual user that this is any more descriptive than saying that this is all of our news, then since this is for the screen reader, although visually this is the next thing on our page, a screen reader is going to go from top to bottom and go from News to here, which is why this then becomes important for those users. We could also come in here and add a class to hide this from the page. So, I'm just going to hit Ctrl+S and save this for now since we're not focusing on any CSS in this course, we're purely thinking about this from a semantic HTML purpose, so if you want to learn how to do stuff like that with CSS we have a ton of CSS courses that will go over that kind of thing. I know I have Your First Day with CSS, Introduction to CSS, and all kinds of course if you're interested in those. So, we're going to move on. And then we have our article tag, so we have our h2 and then that would move this down a level in our outline, I'll pull this up. Once again we're going with option 2 so we have created our level 2 headings, and so our h3s would be the titles of our individual articles, so this Non-Profit article and then the New Documentary article. So I'm going to come in here on line 36 and change this to be an h3 instead of an h2. And then I'm going to do the same down here for our other article, I'm going to change this to be an h3, and this to be an h3. And then that would leave us to fix our h6s. So, these would be the next level heading after our h3 in that outline, so we just want to change this to be an h4 rather than h6, and then come down and do the same thing for our last h6 on the page. So, now that we've come through and updated and analyzed our different levels of headings, in our next lesson we're going to learn how to use a browser extension to physically see what kind of outline that we are creating.
Outlines in HTML4 vs. HTML5

In this video we'll be going over the outline we've created using a Google Chrome extension. But before we move on to that I want to briefly mention that in between lessons I added a class of hidden to the heading we added in our last lesson. If you recall correctly we took a look at our outline and we noticed that the original outline we had didn't make the most sense semantically, and it didn't quite match the correct hierarchy that we wanted to create. So, by adding an additional heading we would create the different levels that support the outline that is a most user friendly for non-visual users. So, I added that class to our h2 right under our main element. And that hidden class uses a method to hide content visually, but not from screen readers, as our comment indicates. And if you want to learn more about that method, in our links, the RTF file that I've included with our project files, it goes over more in-depth different methods and why this one is helpful. And I've also added a span, which is a semantically meaningless inline element to add this text, Links to Recent Articles, in the h2 heading in our sidebar, because when we once again took a look at the outline we wanted to create, Recent Articles, without having that visual clue to indicate that those are links, it's not very helpful. So by adding that text we're going to make this more user friendly to someone using assistive technologies, and since it's not adding additional information to a visual user who can see that these are links, by the way they are styled, we can hide that from page as well and benefit both audiences. So, moving on I want to go ahead and take a look at the outline we're actually creating. So, I've installed HTML5 Outliner to the instance of Google Chrome that pulls up when we use this live preview. And it's important to install it on this version of Google Chrome and not the one you use on a daily basis, if that's what you use to browse the web, because it's not going to show up when we pull this up in Google Chrome. So, pull up the live preview, make sure you go to Chrome Web Store, search for HTML5 Outliner, and install it here. And then when you look at your pages you should now have this little tool that pops up in the address bar that we can click on to view our outline. But before we do so, I want to go ahead and pull up our PDF with the outline that we want to create so we can compare it to what we see over here. So we want to compare this to option 2, which is what we want. And if I click this button to view our outline, we might see that our outline here looks quite a bit different than what we might expect to see. We have this thing called Untitled BODY, Untitled Navigation, and then the structure matches more closely with the option 1 than with what we thought we were creating using our implicit headlines. So this is probably a little bit confusing and for good reason. And the reason that it doesn't look how we expect it to is because there are two different ways that we can create outlines. And we have the HTML 4 way, which is created from implicit sections as defined by what level of heading we use, and this is currently the outlining method supported by all browsers and assistive technologies. So this is one that's actually going to be used by screen readers and search engines to the date of this recording, but we also have a different way of creating an outline as defined as the best practice way in the HTML5 specification. So, although the HTML5 way isn't supported we still want to, kind of hit both targets so we can be backwards compatible by using implicit sections to create our outline, which is going to be currently used, but we can still create an outline so in the future, if that is supported by future technologies then we can create our outline using those section elements as well. So that's what we've been doing, so we get the semantic benefits of the HTML5 way while still being backwards compatible and using the implicit sections used by all major-current technologies. So the HTML5 way is it's going to create our outline using the sectioning elements. And it uses four specific elements to actually create these explicit sections, which is the aside element, the section element, the article element, and the nav element. So if we take a look at the outline example we've been using throughout this course for our Internet Cats outline we would define the HTML 4 way using our implicit sections, we would use an h1 to define our main title, the h2 to start a new section under that main subject, and all of our other levels that we'd want to be equal in that hierarchy we'd use an h2 as well, and then we'd start sublevels within those levels using h3, and so on and so forth, to build that logical outline. And we can still do that within HTML5, but we need to explicitly start a new section, otherwise it creates a little bit wonky of an outline like we saw on our actual page. So, for example, if we wanted to create our main section, if we were writing an article on internet cats we might use that article tag to semantically define this whole section. And then if we wanted to create a section within that, we would use a section tag to explicitly tell it that we want to start a new section or outline, and then it's going to automatically look for whatever heading is first in that section and use that as a title for our section. So, we might use a section tag and then add an h2 and name that h2, or title that h2 YouTube videos, and it would create the outline we see here. And then each time we wanted to create a new section we might use section tags and things of that nature to create those outlines. So, if we switch back over here, that's why if I pull up this outline then we see our body element, which is our root element for any HTML page, it's the first element when we write our HTML. So it's going to take this body as the first things and it's going to look for a heading, but in our outline there isn't a heading between this and the next sectioning element, which is our nav element. So that's why we see an Untitled Body and we also have Untitled Navigation, but at least to me, our body at this point since our next thing is our nav, if we add a heading in here just to give our body a title it's really not doing anything, it's not very helpful, so that's why we've gone ahead and left it out. We can get the context or the title of our page with our first h1 heading down here, which is News. And then since our nav element is staring a new explicit, we're really defining a section with that nav element, it's going to look for a title for this section, and such it doesn't find one inside of this nav tag it's just going to say it's untitled. So we could come in here and add a heading. So let's say, I wanted this to be on the same level of hierarchy with our news heading, our h1 heading, I could say that this is an h1 and it's going to say Main Navigation. And if I hit Ctrl+S to save, and refresh this to make sure that this is reflecting this in our outline, then this section now has a title. But since we have that nav element and a screen reader is going to read out that this is a navigational element, then this isn't adding any additional helpful information. So, I'm going to go ahead and leave that out. And then we could come down here and we have our first heading, which in our outline is shown right here with our number 2 so we have this new section. And then our aside we saw is a sectioning element, so if I pull this up once again and go back to our last slide you can see we have our four sectioning elements that explicitly define a section. We can see aside is one of those so that's going to start a new area, and we can see indeed it does. We have our links to recent articles, you'll see that even though this is hidden visually from the page our span is still reflecting this in our outline so it makes sense when we just see it from this perspective. And then the kind of funny thing we might not expect to happen is that we have our h2 that says all of our articles, we can see it here, but it's being put equally in the hierarchy with our individual articles. And the reason for this is because we haven't explicitly started a new section for this area. Our article is in its own section, but our All Articles heading is not. So, this might not make sense right away or might not come to you naturally right away, but the more you use this extension and the more you practice using this way of outlining, the more it'll make sense inherently, I hope to you. But hopefully we'll add this and you'll see. This area logically and semantically really is a section on its own. So we have a section that includes all of our articles, so it makes sense to use that section element to mark this up, saying this all going together. And our main element is not enough because, although it's going to signify that the role of this area is a main content, in our outline main doesn't do anything at all, it's not a sectioning element. So, by adding our section, which is a sectioning element, if I hit Ctrl+X to cut that closing tag, we're going to add it right inside of this main closing tag, right on line 56. So I'm going to hit Ctrl+V to paste in the section. If we pull up our outline now, and we also pull up our PDF for the outline that we want to create to see if this matches, then because we explicitly defined all of this as its own section, now it's perfectly matching the outline we wanted to create. So, by doing this slightly more confusing way, we have implicitly defined our sections logically using our headings and we've also explicitly defined them using our sectioning elements with our headings to title these individual sections. So, by doing so we're backwards compatible with the HTML5 way, which once again is supported by current technologies in the HTML5 way, which will hopefully be supported in the future. So we're backwards compatible and we're forwards compatible as well. So in our next lesson we're going to continue along with this and switch over to our beekeeping-guide. html page and check out our outline for that page.
Finishing up Our Outline

In this video we'll be going over our beekeeping-guide. html page and check its outline. So I'm just going to come up here and click our Outline button so we can go ahead and take a look at what kind of outline we've created. So, we can come up here and see that we have an Untitled BODY, which we mentioned before is because we don't have a heading immediately following our body, which is our root sectioning element of every HTML page on the entire web, in the entire world. So, we don't really need a heading for that one because we have an h1 that describes the content on the rest of the page. We also don't have a title for our nav element since it is redundant with the nav element itself. So we're going to start down here once again with our next level 1 heading, which is our Free Guides. And then we have a specific section under our Free Guides topic about this individual guide, One for the Honey: A Beginner's Guide to Bees and Beekeeping. And if I pull over our PDF we could see that we had our original structure, since we had one of our subheadings marked up incorrectly semantically as a heading as an h3, it was creating this outline, but since this isn't starting a new section it didn't make sense to mark that up as a heading and we marked it up for a paragraph, leaving us with this outline that we wanted to create our Free Guides and then our specific guides under that. We can see that we've correctly marked up our structure to mimic that kind of outline, which is really great. And we could stop here, but just to take one additional step and make this just that much more semantic, I want to take a look at our h2 and then our paragraph that we styled as a subheading. And one thing we can do here is mark this up in a header tag to signify that these go together. And I know what you're thinking, maybe, that the header tag is meant semantically to define the header of a site, and it really is. But if we take a look at the definition, if you remember back to the beginning of the is course I said, or talked about how sometimes we have to take our mind out of what we assume is the definition of these individual tags and really think about how we can repurpose them, and still according to their definition use them to semantically describe other things that may not be apparent at first. And if we look at the header tag it's defined as a group of content with introductory content such as heading elements, wink, wink, hint, hint, navigation, or a logo. So we've used it already to define the header of our site, which included our navigation and our logo, but we can also semantically use it to group together heading elements. And since we have this marked up as a paragraph, since it's not semantically starting a new section in our outline we can still kind of hit both things and if we wrap both of these in a header section we could semantically denote that this paragraph is still kind of a heading element as well. So I'm going to go ahead and mark this up in a header tag, and I'm going to hit Ctrl+X to cut that closing tag, and paste it right below here. And that way if we were scanning through this we could see that since a machine doesn't read our classes, it doesn't understand that the subheading class is semantically describing this, we can still tell the machine that these are heading elements that go together. So, we're not messing up outline and we're still semantically describing our structure. So, really, really cool. I'm going to hit Ctrl+S to save here. And now that our outlines are looking really great I just want to summarize this real fast, to say that when we're creating our outline we always want to remember two different things. And one is that we are going to use our sectioning elements to create logical, semantic sections of our outline, but we still want to be backwards compatible as well and make sure that our headings are creating our implicit sections until the HTML5 method of creating an outline is used. So now that we have finished our outlines, in our next lesson we're going to dive deeper into semantics and talk about text-level semantic elements.
Text-level Semantic Elements

In this video we're going to be going through our project and analyzing its text-level semantic elements. If you're asking yourself what a text-level semantic element is, it's defined as an element that is descriptive of inline-level, or intra-paragraph content. So we have things like anchor tags, the em tag, a strong tag, small tag, cite tag, and so on and so forth. This isn't a complete list of text-level semantic elements, this is just a few, but some of the most commonly used. So we want to look at our intended purpose for the element and see if that matches its description. So I'm going to switch over to our project and we are going to analyze the text that's inside of paragraph tags. So this is a typical use of a text-level semantic element is to mark up just really small pieces of content. And if we start at the top and go through, you'll see that we have an em tag in our first paragraph and it's being used to mark up the title of one of our individual guides. So we want to go and look at the intended purpose of the tag we're using, and that's the em tag, which is typically misused to italicize text. And its intended purpose is to place stress emphasis on content. So a good test of whether you're using the em element correctly is to read through the content and see if your voice changes when you're reading through what is inside of that tag. So if we come over here to our text and read this out, we'd see how this will read out. So, I'm going to say fill out the form below to receive a free copy of One for the Honey: A Beginner's Guide to Bees and Beekeeping. So when I was reading through this I didn't naturally add any stress to this individual piece of content, so this is a good indication that this is a misuse of the em element, it's just being used to italicize the title of a work. And it's especially important to go through and do tests when we're reading or using elements like this because screen readers might actually change the way text is read based on these text-level elements, so if we're misusing it for a presentational purposes it's really going to confuse someone who is hearing content read out differently when it's only meant to be italicized. So we want to take a look and see what elements we can use that are more descriptive of this. And we have the cite tag, which represents the title of a work, the name of an author, or a URL reference. So this is much more descriptive and appropriate for what we have, which is the title of a work. So we're going to change this from being em to being the cite tag. We want to make sure that we get the closing em tag as well. And then we're using it one more time down here at the very bottom of the page, so I'm going to scroll down, and we're going to change this element as well, from em to be cite. So I'm going to hit Ctrl+S to save and that is the only text-level semantic element we're using on our page, but that doesn't meant that it is the only place that it might be appropriate. So we'd want to come through here and read our content. And one thing that stands out to me is an opportunity for more semantic markup is our copyright statement down here in our footer. We actually have an element called the small element, which is created to represent side comments like disclaimers, legal restrictions, copyrights, or attribution for little short runs of text. So they're typically displayed in small text, but this is their intended semantic purpose. And since what we have is a copyright statement it makes sense to mark it up using the small element. So I'm going to go ahead and add that here. And now I want to hit Ctrl+X to cut that closing small tag to be right before what should be a closing p tag, I'm just now noticing that that is an opening p tag, so I'm going to go ahead and fix that. I'm going to hit Ctrl+S to save. Now we want to continue to scroll through here. And, one other thing I notice is that we have an abbreviation for USD, or US Dollars. And if we look through our semantic elements we actually have an element that stands for an abbreviation or an acronym. Now this would be appropriate to mark up our little abbreviation here. So I'm going to go ahead and use that abbr, and we want to hit Ctrl+X to cut that closing tag after the USD. And just by itself, although this is more semantic, it's not quite so useful as it might appear at first, but we actually have a title attribute we can add to this. So we can come in here and say title and then we're just going to explicitly state what we're abbreviating here. So this the United States Dollar, especially someone who's not from the US might not know that USD stands for US Dollar, or things of that nature. And if we actually come over here and now hover over this element then we can see that we're getting a tooltip with the actual abbreviation of this content. So, very, very cool. And in addition to that it's going to read out to a screen reader user what that abbreviation stands for, so it's going to be much more user friendly for those users as well. So I'm going to hit Ctrl+S to save. And we might want to come in here and do the same thing, we have the USD up here as well. So I'm going to go ahead and quickly mark this up using the abbr tag, and then add the title, so United States Dollar. And coming through here I think this looks pretty good. So I'm going to switch over to our news. html page, and we want to scan through and look for the same thing. So I already know we have our copyright statement down here, so I'm going to mark this up using the small tag. And hit Ctrl+X to cut this closing small tag and paste it right inside of that p. Hit Ctrl+S to save. And scanning through here I see that we have another abbreviation that is this time actually an acronym, but if we look at the definition for our abbr element it is used to represent both abbreviations and acronyms. So if we mark this up using that element, we can say abbr, and let's say the AEP stands for Americans for Environmental Protection. So now, once again, when we hover over this we'd get that nice little tooltip telling us what that is if we weren't familiar with that acronym. So I'm going to hit Ctrl+C to copy this because we have one more inside of an anchor tag down here in our second paragraph. So I'm going to paste this inside of that AEP anchor tag. And looking through here I see one other text-level semantic element we could add, and that's that we have this date here for this event. And we actually have a time element that represents a time or a precise date. So this is a perfect opportunity for this element. So I'm just going to go ahead and mark this up with this time element. And we want to paste it right after the end of our date. I'm going to hit Ctrl+S to save. And now that we've taken some care to mark up our intra-paragraph content to be more semantic, in our next lesson we're going to go back over to our beekeeping-guide. html page and analyze our form for its semanticness.
Semantic Forms

In this video we're going to finish up our study of different semantic elements by taking a look at our form and analyzing it for its semanticness. So I'm going to come down here on our beekeeping-guide. html page, and come down to our form. And we want to come through and just take our eye and see what opportunities we have for more semantic elements. As we start out we have a form tag, which is in fact descriptive of what it is. We have a label with an input type of text, which seems to match what it expects here for First and Last Name. And then we come in here to our Label of Email. And at first glance we might look at input type text in email is technically a text input and call it a day, and not think any more than that. But, with HTML5 we had a ton of different input type attributes added. And in addition to things like text, which is kind of like the input equivalent of a div, yes there's text in there, but oftentimes we can choose something that's more descriptive of what kind of input it expects. We could scan through here and see that we have an input type of email, and since it's an email field this is going to be a more semantic choice for our input field. So I'm going to change this from type text to type email, and hit Ctrl+S to save. And once again, as is often the case with our semantic elements, one of the biggest benefits of doing stuff like this is kind of invisible at first. And one of the biggest benefits of having an input type of email is if you've used a phone to fill out a form it often can be an incredibly frustrating experience, and if we have our input type of email rather than input type of text for an email, sometimes it'll pull up a saved email in your phone so you could quickly type it in if you use your email all the time with your keyboard, or it'll pull up a special keyboard for you to type in your email. So, it might include the at symbol or common extensions like. com, or @gmail, just depending on what kind of device it is and what kind of keyboard you're using, and make that a much better experience just by changing what type of input it expects. So this is very, very cool. And like with HTML5 elements in other cases, these aren't always supported by all browsers, but it's going to fall back to just a type of text for that input field if it's not supported. So it's going to be a better experience or at the very worst it'll be a same experience. So we're going to continue through here. And right after this we have a div with a class of form-section. So, we are not necessarily grouping this together just for stylistic purposes, it's actually a logical section of our form. So we want to take a look and see if there's something better than a div that we could use. And looking at the form elements we have available to us there's a specific element called a fieldset, which is used to group together related controls and labels on a form. So coming back through here this whole section is a set of checkboxes with a question of asking what interests you have in regards to bees. So this is a logical group of content all related to filling out this area. So this to me makes perfect semantic sense to use a fieldset on this section. So we're going to come in here and change our div to be a fieldset. And we want to make sure we get that closing div tag as well. And going right along with our fieldset element you can see right underneath here we have what's marked up as a paragraph, but since we're using a fieldset we have something called a legend, which is a caption explaining the content of a fieldset element. So it's like a little heading that goes with this fieldset. So that is much more descriptive than our generic paragraph, so we're going to change this to be a legend element. Now right below here I think our paragraph makes sense, it's just asking a question. We have all of our labels with the appropriate input type. So I'm going to move down here, and we have another generic div with a class of form-section. And scanning through here we just want to ask if all of this is specifically within the form one logical section. So this is all related to requesting a print version of the book, so I think it makes sense to put this in a fieldset as well. So I'm going to come in here and change this to be a fieldset. And once again we have this p, which is a generic paragraph, and this is more descriptive if we describe it as a legend for this fieldset. So I'm going to change this to be a legend. And if you look over here you can see that visually it's also more user friendly because it's grouping these sections together visually as well. So, scanning through we have our checkbox, we have our abbreviation element, our button with a type of Submit, and I think overall this looks pretty good. So I'm going to hit Ctrl+S to save here. And, of course, this form is just a prototype for a form, so we need additional functionality for it to work. And, I think we're good to go on our form. So in our next lesson we're going to tie up our course and talk about some last conclusions about semantic HTML.
Final Notes on Semanticism

In this video we'll be making some final notes about semantic HTML. For this lesson I've created a special folder, and in it we have a folder called final and another one called start. So, you might guess that we have our starting project in the start folder and our final project in this final folder just to make it easier to already have these in the same file. And you can come through here and compare our different projects and how they started and how it ended. And I recommend coming through here and just even reading through the elements. So, for example, our starting beekeeping-guide. html page you can see all the generic divs and we really can't tell much about the context of our page. Compare this to the HTML in our final project and we have much more descriptive markup, we have a header, navigation, main element, different sections, additional headers, citations, abbreviations, all kinds of semantic goodies that are more descriptive of our content. And in addition to that we can use our screen reader, which we're using ChromeVox for simplicity, to see what kind of benefits we're getting behind the scenes as well. So, I recommend you take some time to go through this with ChromeVox and just kind of play around and see what kind of difference that this can make. So, for example just to show you a quick example. National Society for Bee Protection. Free Guides, tab. And I'm going to scroll down to this other heading. So let's compare the heading right below this to our semantic heading. So we're going to go ahead and give this a listen. One for the Honey: A Beginner's Guide to Bees and Beekeeping, heading three. So it's reading out the text of our heading and telling us it's a heading three. So compare this to our final. National Society for Bee Protection, Free Guides, tab, Free Guides, heading one. So I'm going to, once again, scroll down to that heading, or navigate down to that heading. Section header, One for the Honey: A Beginner's Guide to Bees and Beekeeping, heading two. And this might seem like such a small thing, but we went from just having the text in the level of heading to being able to tell that this is its own section, this is a section header, and then the additional heading level as well. So really by taking the extra time and care we can do so much more to not only make our content more semantic, which yes, is best practice, but really we're improving the lives of humans as well, because we have to remember that this is going to be used in different ways. We might make it easier for someone to search through our content through a search engine, or we might be helping someone who's using assistive technology to just navigate through our page, we'll make their lives much easier. So this is really, really a noble task. So in summary, our semantic HTML is because machines aren't smart enough to understand the meaning of content. So, we should use HTML elements, when possible, to be more descriptive of our content. And there isn't always going to be one way to do it. So, for example, one person reading the definition or intended use of an element might come away with a completely different interpretation as another person using it. And that's okay. The most important thing is that you're testing it and you're trying your best to be as semantic as possible. We also want to remember our outline and that we're honoring our outline using implicit headings to create implicit sections. And also our sectioning elements to create semantic sections of our outline, as well. And, as a final note, by helping a machine we're going to help a human. So I hope you've enjoyed learning much more about semantic HTML with me, and I'll see you next time.
Course author
Author: Susan Simkins
Susan Simkins

Susan is a web design tutor for Pluralsight. Growing up, Susan was both a passionate artist as well as a computer tech aficionado. When she discovered the world of web development, she found that...
Course info
Level
Intermediate
Rating
4.3 stars with 229 raters(229)
My rating
null stars
Duration
1h 49m
Released
21 Jan 2016
Share course
