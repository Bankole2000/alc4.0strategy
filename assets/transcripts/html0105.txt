Meeting Web Accessibility Guidelines (Section 508/ WCAG 2.0)

by Gerard K. Cohen

You don't have to be an accessibility expert to make your sites accessible. This course will help you attain the knowledge and skills to meet web accessibility guidelines and make your sites accessible to all users.

If you are a web/front-end developer, the work you produce must be accessible to all users. In this course, Meeting Web Accessibility Guidelines (Section 508/ WCAG 2.0), you will get hands-on, practical code examples that you can start using today towards your goal of meeting official accessibility guidelines. First, you will learn the differences between Section 508 and WCAG 2.0, helping you to decide which guideline to use. Next, you'll dive into real-world, reusable code patterns/techniques and matching them to relevant guidelines. After finishing this course, not only will you be equipped to acquire government/education-related contracts, but you'll be able to make sites that meet established accessibility conformance guidelines and are more usable for everyone.
Course author
Author: Gerard K. Cohen
Gerard K. Cohen

Gerard K. Cohen loves front end engineering so much that he is on a mission to make sure that the web is inclusive to all users, making rich internet experiences available for all. He believes...
Course info
Level
Beginner
Rating
4.6 stars with 123 raters(123)
My rating
null stars
Duration
1h 44m
Released
7 Sep 2016
Share course

Course Overview
Course Overview

Welcome everyone, my name is Gerard K. Cohen, and I'll be your guide for this course on Meeting Web Accessibility Guidelines. I'm a passionate front-end engineer, and for the last 4 years I have worked on building an accessible UI framework to be used by over 80 commercial applications for one of the country's largest banks, well known for being the first to offer online banking. In this course, I will introduce and go over the differences between 2 major accessibility guidelines, Section 508 and WCAG 2. 0, and give you my recommendation on which guideline to choose. Then, I'll head straight into real-world, reusable code patterns and techniques by retrofitting an existing site to meet relevant guidelines. I'll adequately discuss semantic HTML, the basis for all accessibility, by demonstrating proper document sectioning, hierachy, and structure, lists, navigation, accessible tables, accessible forms, and accessible media, including images and videos. I'll round out the course by talking about responsive web design and its impact on accessibility. All along the way, I'll use a live screen reader to demonstrate the before and after of each recommendation. The only prerequisite for this course is that you should have a basic understanding of HTML, CSS, and JavaScript. To be clear, accessibility is not a checklist or a product, and doing everything exactly as I demonstrate here in this course will not guarantee an accessible compliant site. Even though I'll be going over specific tips and code examples that you can use over and over again, it's important to note that meeting guidelines is completely dependent on your particular site and content. But by the end of this course you should have the knowledge to understand the core principles, and skills on how to adapt them to your user's needs. You don't have to be an accessibility expert, but you do need to make your sites accessible. And I hope you'll join me in making the web available for everyone by learning how to meet web accessibility guidelines.
Choosing a Web Conformance Guideline
Introduction

All right, first things first. We need to talk about web accessibility conformance guidelines. So in this section, I will help you navigate through the very important decision of choosing the proper web conformance guideline. I'll start with a brief introduction of official conformance guidelines. Then, I will introduce you to Section 508 and the Web Content Accessibility Guidelines, or WCAG. We will do a high-level overview of both, and discuss how they compare, contrast, and overlap. And finally, we will discuss which you should choose. Web conformance guidelines help in providing guidance on how to ensure that your websites are accessible to people with various disabilities. They can also cover you from expensive discrimination lawsuits. Now, I don't mention lawsuits to scare you, but it is a real thing, and it does happen. I would rather you focus on the positive benefits of ensuring access to users with disabilities that will also impact all of your other users, including better SEO and greater usability. You will also be doing your future self a big favor, as one way of looking at disabilities are the certain effects of old age. At some point, you will eventually have diminished vision, hearing, and use of your hands. When it comes to web accessibility there are 2 main guidelines to follow that I've already mentioned, Section 508 and WCAG. Let's first talk about Section 508.
Section 508

First, let's talk about section 508. Section 508 was originally a 1986 amendment to the Rehabilitation Act of 1973, but was updated to its current iteration in 1998. It is expected to be updated in the future, a process commonly referred to as the Section 508 refresh. It's been delayed a few times, and we're not really sure when this is going to actually happen. Section 508 is a set of requirements that target electronic and information technology of federal agencies, or projects that are either federally funded or under contract by a federal agency. More information about Section 508 can be found at www. section508. gov, so let's take a quick look at the guidelines now. At Section 508 you can do a search for quick reference guide, and it should be the first result. This quick reference guide has links for each of the provisions. Let's take a look at more detailed information for provision 1194. 22, Web based intranet and Internet information and applications. First there's a detailed description of the scope of this provision. And then, in detail is each part of the provision with a description, definitions, as well as information on how to meet the requirement.
WCAG 2.0: Level A, AA, AAA

The second conformance guideline I would like to introduce you to is the Web Conformance Accessibility Guidelines, or WCAG. WCAG, written by the WCAG Working Group as part of the W3C web accessibility initiative. It is meant to be a globally accepted standard for accessibility. WCAG version 2. 0 contains 61 total criteria that is organized as 12 main guidelines under the POUR principle. POUR stands for perceivable, operable, understandable, and robust. Even though they are mostly pretty straightforward, let me briefly describe what each of these principles are. Perceivable means that users must be able to perceive the information being presented. In other words, the content of your site has to be made available for everyone. Low vision or non-sighted users must be able to see and read everything on the screen, including images. Videos should be captioned for users that are deaf or hard of hearing. Operable means that users must be able to operate the interface, interacting with your site should be possible for all the users, whether that's via a mouse, touch, keyboard, or any other method of interaction. Their motor disabilities should not get in the way. Understandable means that you must be able to understand the information, as well as the operation of the user interface. Your site's content should not be too difficult to understand, and the interaction should be predictable. Lastly, robust means that users must be able to access the content as technologies advance. There are many browsers, devices, and assistive technologies being used today, and your site should work in all of them. For each of the guidelines, there are three levels of conformance and they are labeled Level A, Level AA, and Level AAA. Each higher level includes conformance of lower levels, that is to say that Level AA includes Level A, and Level AAA contains Level AA. In more detail, Level A represents the lowest level of conformance and includes the most basic of web accessibility features. Every page on the internet should meet this basic level of conformance. Level AA represents a midrange level of conformance, and includes the biggest and most common barriers for disabled users. Finally, Level AAA represents the highest level of conformance and accessibility. More information about WCAG version 2. 0 can be found at www. w3. org/WAI/intro/wcag. php, which we'll take a look at now. The WCAG overview has a lot of great information on meeting WCAG 2. 0, and I highly suggest you take advantage of all the great information. For now, I'll just click on the How to Meet Quick Reference. This is a filterable reference that details each of the 38 guidelines as listed in the table of contents. You can use the filter to display only the appropriate levels and technologies in order to make the list easier to read. Each of the guidelines comes with a full description. They also give suggestions on techniques on how to meet the guideline. Now even though these can be very helpful, it's important to keep in mind that these are just suggestions. The goal is to successfully meet each criterion. I've got to be honest, this stuff is really hard to read and can be very confusing, but hopefully this video course will give you a better understanding, along with concrete ways to meet the guidelines.
Section 508 vs. WCAG 2.0

So now that you have a general idea of each of the official web conformance guidelines, you're probably still stuck with answering, which should you choose? The answer is actually pretty easy. As a recommendation, you should achieve WCAG 2. 0 Level AA. You may think it's noble to try to achieve Level AAA, but even WCAG does not expect all cases to meet this level of conformance. Let's take a quick comparison of Section 508 versus WCAG version 2. 0. First of all, even though WCAG 2. 0 is 8 years old, it is still 10 years newer than Section 508. WCAG 2 is a globally accepted set of guidelines, and a lot of other countries use WCAG 2 as a basis for their own web accessibility guidelines. Section 508 is only scoped to the US. Conforming to WCAG 2 means that you're most likely covered internationally. Lastly, WCAG 2. 0 Level AA has 38 criteria to meet, whereas Section 508 only has 22 requirements. Here's some good news, if you successfully meet WCAG 2. 0 Level AA you are also meeting Section 508. Not only that, the Section 508 refresh that I mentioned earlier is expected to require conformance to WCAG Level AA. Included in the exercise files is a spreadsheet that easily maps Section 508 guidelines to WCAG 2. 0 Level AA criteria for reference. For the rest of this series I will be demonstrating techniques on meeting WCAG 2. 0 Level AA. But up next, I will start retrofitting an existing website to meet WCAG 2. 0 by using semantic markup for document structure, lists, navigation, tables, and forms.
HTML
Introduction

Believe it or not, one secret to good accessibility lies in the markup, the HTML that you choose to build your site. This makes accessibility kind of easy because it's just HTML, but it also makes it hard because you have to know how to use HTML. HTML is semantic, and semantics are extremely important to accessibility. You get so much accessibility for free if you use HTML properly. See, the way that the Web stack works, and by Web stack here I mean HTML, CSS, and JavaScript, is that you can build an entire site or application using divs and spans, styles you need with CSS, and then create all your interactivity with JavaScript, and it'll work, for the most part. It may not be as performant, or as performant as it could be, but it'll work. It definitely wouldn't be accessible though. Actually, you could make it accessible by adding ARIA, but you would be going a really long way to add back in everything that you stripped out. Again, HTML is already accessible, and has been since the beginning of the web. So, we're going to be spending a good chunk of time discussing how to use HTML to improve the accessibility of an already existing site. I'll first start by talking about document structure and landmarks, the foundation for everything. Then I'll go into proper application of various types of lists, which will lead nicely into navigation and skip links. I'll talk about tables, and last, but definitely not least, I'll demonstrate proper forms, focus indication, and color contrast. But this isn't really an HTML course, or a course in semantics, because there are already really good courses here on Pluralsight for that. The focus here will be on using proper markup and semantics to meet our chosen conformance guideline of WCAG Level AA.
Document Structure and Landmarks

Document structure and landmarks are a crucial part to accessibility and meeting WCAG. It also might be the easiest topic because so much of this is repeatable across your pages that it can or should be templatized, whereas all the other sections or criteria for accessibility are based on the content and functionality, and this can vary from page to page and site to site. So document structure has two meanings here. The first is how the page itself is actually structured, the frame or architecture. Document here means the page in the development sense. This is basically machine readable code, important for assistive technologies like screen readers. One part of this is landmarks. Landmarks are sectioning containers, standard ways of designating sections for your page. These are basically your HTML5 elements like header, main, aside, footer, etc. The second is how the content is structured. Here, document is related to the information architecture of your page. This is human readable information, there has to be an order to your content that makes sense. Here we'll be talking about headings, and creating a logical document outline. Now, let's take a look at our existing site, and see how we can make it more accessible. First things first is we need to make sure that we have a valid doctype. You're probably already doing this to make sure you're in stricter standard mode for proper rendering, but this first line is also the first step to meeting guidelines 4. 1. 1 for Parsing. It is a Level A conformance guideline that means browsers and assistive technologies can properly read your code. There should not be any errors when parsing your code, and having a proper doctype lets the parser know which set of these rules to use. Make sure it's the first line, and there are no comments or whitespace before this line. Proper parsing has many great effects on your page. If a page cannot be properly parsed, then search engines can't read, and more important for us here, assistive technologies like screen readers will not be able to read your code. Some additional methods of ensuring proper parsing are things like making sure that you properly open and close your element tags, that element attributes are not duplicated, and that any element IDs are used only once. We'll test all these things later on in another video, but for now I know I have two elements with the id of wrapper, so I'll just change these to a class instead of an id. The next line is the html tag, which you should already have, and it's at this point that we need to designate the language of the page, which is required for Level A guideline 3. 1. 1 - Language of page. This states that the main language of the page should be programmatically determined. The way to do this is by using the lang attribute, and setting it to the main language of the page. The value should be an ISO 639-1 code, and here I'll set it to en for English. This is important for voice synthesis like screen readers, to pronounce things properly. The next two lines don't have any specific requirements or guidelines; you won't fill any specific tests if they're missing, but they do play an important role in proper parsing and rendering. Just like the doctype, you get multiple benefits from adding these, so I recommend that you always include them. The first sets the character encoding to utf-8, and the second sets the compatibility mode for ie. After those 2 lines, it's time for the title of the page to satisfy the Level A guideline 2. 4. 2 - Page Title. You need to make sure this is a unique descriptive title, that it's different for every page. Not only is this helpful for your users, but it's great for SEO as well. This is the About page, so the title should actually be About Acme Web Design. Last in the head is setting the viewport for responsive design and mobile browsers. This is the first part to meeting the Level AA guideline of 1. 4. 4 for Resize Text. This is to allow mobile users the ability to pinch and zoom in order to increase readability. I know it can make layouts frustrating, but never ever disable zoom by setting user-scalable to no, or setting minimum and maximum-scale to 1, as I have here. Here's the actual recommended viewport value. Now one other important key to meeting the 1. 4. 4 guideline for resizing text is to make sure that you're using relative units for sizing your elements, either using rem or ems. I won't get into which to choose, it's really up to you, but using a relative unit allows the page to adjust accordingly if a low-vision user increases their font size. They can do this either by modifying their OS or browser settings, using text resizing or screen magnifying software, or even just using the browser zoom. Guideline 1. 4. 4 requires that a user is able to increase text up to 200% without losing readability or functionality. Text, images, and controls cannot be cut off, nor do you want the text increase to cause any horizontal scrollbars. A good responsive design with relative units should take care of this for you. Moving to the body, this is where you should chunk your content in sections using landmarks. These are new elements to HTML5, and you should be using them as part of meeting Level A 1. 3. 1 - Info and Relationships, which we'll see a lot, and part of meeting Level A 2. 4. 1 - Bypass Blocks, which we'll see again later on. The landmark elements that are available to use are header, nav, main, footer, and aside. Of those that I mentioned, main can only be used once per page. These elements not only give us a good logical structure to our document, they're also used as navigation items, as users with assistive technologies can navigate and discover any of those sections directly, using either special keyboard combinations or interfaces. Incidentally, I already have some classes on these sections that correspond to landmarks, so I'll just update them in this fashion. First starting with the header, header navigation, main, aside, another nav, the footer, and another nav. Now here's the case where we have multiple instances of the nav landmark, technically we have three, but there are two different types of navigation. The first is in the nav with a duplicate copy in the footer for high-level navigation. And then the nav in the sidebar is for page level navigation. It's important that we label these instances to give context to the user, and we can do this with the aria-label attribute. So for the nav in the header and footer I'll give a label of site, and for the sidebar I'll give a label of page. Now when a user is navigating via these landmarks, they can choose which navigation is more relevant. So we've gotten our machine readable, our document or page structure taken care of. Let's start looking at our content structure. We need to begin creating a logical outline for our document. Think of this as the table of contents for the page. This is provided by way of headers, h1 through h6 tags. I'll start with the mandatory h1 as part of meeting Level 1. 3. 1 - Info and Relationships again, and as part of meeting Level A 2. 4. 6 - Headings and Labels. The content of this h1 should match the title that we set earlier. Every page should have 1 and only 1 h1 tag, and it should be the first element in your main section. I'll go up to the header and change the h1 there to a span. Up until this point, everything that we've done should happen on every page consistently. It's easy if you just use some kind of templating system, or you can start with the basic boilerplate page. I've included one as part of the assets for this video. So, after the h1 the rest of the headers are based on the page content. You may not need anything past the initial h1, and that's okay, but if you do it's important that you follow the proper header hierachy. Each heading level is nested, and make sure you don't skip any header levels. You can't go from an h1 to an h3 to an h2 to an h5, they have to go in order. So based on the content of this page we have a logical outline that we can express via the markup. This should be an h2, and this one being a subsection of the previous should be an h3, and then another h2, and the last h2. One thing to note here is that screen reader users will oftentimes navigate and explore the page by using headers, and this is why it's important to provide a logical outline for your content. Speaking of screen readers, let's try out our modified page in VoiceOver, the screen reader that comes up with Apple, and let's see how all this works. I'll launch VoiceOver by pressing the Cmd and F5 keys. VoiceOver on Safari, About Acme Web Design, window, About Acme Web Design, HTML content has keyboard focus. The first thing we want to try out is navigating by the landmark roles that we added. With VoiceOver, you can do this by bringing up the Web Rotor by pressing Ctrl+Option+U. Static Text menu. And use the arrow keys to cycle through the available lists. Window Spots menu, Landmarks menu. Once we get to the Landmarks section, you can use the up and down arrows to select an item. Landmark banner, site navigation, main, complementary, page navigation, site navigation, page navigation. You are currently in a navigation. Let's try the same thing, but with the headers that we added. Landmarks menu, Headings menu, heading level 1, About, heading level 2, Who We Are, heading level 3, Meet the Staff, heading level 2, What We Do, heading level 2, Why We Do It, heading level 2, heading level 3, Meet the Staff, heading level 3, Meet the Staff. You are currently on heading level 3. We can also navigate the page via headers using keyboard shortcuts. For VoiceOver, the shortcut is Ctrl+Option+Cmd+H. Heading level 2, What We Do, heading level 2, Why We Do it, last heading, heading level 2, Why We Do It. You are currently on heading level 2. Once you get down to the bottom, you can do Ctrl+Option+Shift+Cmd+H to go back up. Heading level 2, What we Do, heading level 3, Meet the Staff, heading level 2, Who We Are, heading level 1, About. You are currently on heading level 1. Everything seems to be working very nicely here. Let's move on. So in summary, I talked about setting the doctype, language of the page, and character encoding, text resize via the viewport meta tag, and using relative units like em or rem for text and elements, setting a unique page title, using landmarks for logical sectioning of content, and headers for providing a logical document outline. With all of this we're on our way to meeting 7 out of the 38 guidelines for WCAG 2. 0.
Lists

Lists are, I think, the workhorse of elements. It can be used for so many different things, but it's important to know which ones to use and how to apply them. There isn't a specific requirement that calls for the use of lists, but they are part of meeting Level A 1. 3. 1 - Info and Relationships. Using lists and meeting this guideline is really dependent on the content you have, so you may not need them. Chances are though, you will. There are three types of list elements, each with a different semantic meaning. The first is an ordered list, it's pretty self-explanatory. It's just a list of items in specific order, and changing the order will change the meaning of the list. The second is an unordered list, and it's just a generic listing of items in no specific order. This is probably the most used of the list elements. Last is the description list, which is an element to present a group of named value pairs, like in a glossary or even an FAQ. Let's take a look at our site and see if there's anywhere we can apply these lists. Here on the Index page, I have this set of instructions on how to get an awesome website, and since it is a numbered list of steps to take, it looks like it would be better structured as an ordered list, so I'll update that. The ordered list will provide the item numbers for us, so we don't need to add them manually. Now, let me check the About page. I think the Meet the Staff section here should probably be an unordered list. Next, over on the Services page, I know that I have a few lists. Here's a list of services that Acme provides, and it looks like a good excuse for an unordered list. Underneath that is a small FAQ that would be perfect for a description list. So why do we even bother changing the markup we already had into lists? It seems like it would just add more code, more markup, and more CSS, just to end up with the same presentation we had before. This is true, but what we didn't prove is the semantics of our document. Now, assistive technologies can provide the same experience to non-sighted users that sighted users would take for granted. A screen reader user now has the ability to discover this content with special keyboard combinations. Also, when a screen reader encounters a list they are notified as to what type it is, and will get additional information like the total number of items, along with the item number in that total so they know where they are in the list at all times. All of this is important to meeting Level A 1. 3. 1 - Info and Relationships, which we've already see a few times. This guideline states that information, structure, and relationships conveyed through presentation can be programmatically determined or are available in text. That's not very clear, but what this is saying is that you should have a logical structure to your document, and that any visual cues to content for sighted users via styling is also conveyed to non-sighted users. And you do this by using the proper elements. Let's go back to our site so that I can use a real example of what this means. On our About page, we can immediately tell a few things by the visual cues. We can tell there is a sectioning and hierarchy to our content because of the differing font styles or sizes via CSS, but without using the header tags, h1, h2, etc., non-sighted users don't get that cue. Same goes for the lists that we added. Visually they were presented as lists because we used paragraphs or break tags to separate them individually on separate lines, but a screen reader user might just get a lot of continuous text with no structure, or a structure that makes the content confusing. Using the different types of lists we talked about now gives the same list structure to non-sighted users. We changed the markup to be more semantic, but the visual presentations stay the same because that's all CSS. If you turned off the CSS it should still all make sense. So in summary, we looked at different examples of an ordered list, an unordered list, and description list as a way of meeting Level A 1. 3. 1 - Info and Relationships. In the next video, we'll continue talking with meeting important guidelines related to navigation.
Navigation and Skip Links

We're going to build off the markup and guidelines we talked about in the previous document, structure, and lists video to talk about navigation and skip links. In this video, we'll be focusing on a few important guidelines for easy and consistent navigation, providing more than one way to find pages and content, and since navigation on the web means links, we'll talk about meaningful link content, keeping the interface consistent overall, and finally we'll talk about skip links. Going back to our code, we've already begun to work on our navigation by using nav landmarks for all of our blocks of navigation links, but the actual links themselves could use a little more structure. The navigation links in the header and footer, as well as in the sidebar are just a bunch of anchor tags, but we could provide some additional semanticism by making these lists, unordered lists to be exact. Doing this again will support guideline 1. 3. 1 - Info and Relationships. One thing about the navigation links and the header though is that they are all using images of text, which is not accessible for a couple of different reasons. First of all, screen readers can't read the content of images, and I haven't provided any alternate text here so there's no way for a non-sighted user to know what these links are for. We could use the alt attribute, and we'll talk about that later, but there's another reason why we should try to make these plain text. In the document structure and landmarks video, we talked about the Level AA 1. 4. 4 guideline for resizing text. And for low-vision users that need to increase text or magnify their screen, these images will not scale and become increasingly distorted and pixelated. Ultimately though, we need to meet Level AA 1. 4. 5 - Images of Text, which states that when possible use text to convey information, rather than images of text. So I'm going to do that now, replace the images with actual text, and use CSS to match the visual design. This is a basic font, but if you're using images to display a fancier font or style then you could choose to use a web font instead. One important Level AA guideline is 3. 2. 3 for Consistent Navigation. This guideline states that any navigation that is repeated across your site should also remain in the same order. Basically that means it should always be in the same spot and in the same order. This is kind of a common sense thing to do, and if you're using a template then you're already meeting this guideline. Since we're here in the header, we can attempt to meet another Level AA guideline, 2. 4. 5 - Multiple Ways. This guideline states that you need to provide more than one way to find pages in your site. And one way we can do this in the header is providing search functionality. If you don't have the capability of providing this functionality, it's okay, we'll talk about a few other ways to meet 2. 4. 5 in a minute. I'm going to add a small search form here, and of course it needs to be accessible. I'll explain how to make forms accessible in another video, but for now I'll just add this simple code. Notice I gave the form the role of search. Search is a landmark role, and now users of assistive technologies can easily navigate to this section. Another thing to notice is the input type of search, this gives additional semantic meaning to the input field, it can also provide specialized keyboards for touch devices, which is helpful for everyone. Moving on, I'll take this opportunity to talk about a Level AA guideline 3. 2. 4 - Consistent Identification. This states that components that have the same functionality should be identified consistently. Just like consistent navigation, buttons and icons should be labeled the same if they are used for the same purpose, don't switch things up. Using this search box as an example, the Submit button can't be labeled Search on one page and go on another, keep them the same. Again, if you're using some kind of template, you should be okay here. Elsewhere in your site, just make sure that you maintain a consistent interface for functionality. In the case that you're a simple static site, or just don't have the functionality to support a search, another way to meet 2. 4. 5 is by adding a site map. You should already be providing a site map because it's great for SEO, and if you are then great, you can scratch this guideline off your list. I'm going to add mine to the footer. I'm just going to add a simple link here to my site map, and since it's part of the footer, it should be part of my template again, making this a consistent form of navigation, or another way of meeting guideline 3. 2. 3 for consistent navigation. Now the site map needs to be structured properly as well, of course it has to be accessible. The site map should basically look like a table of contents. Depending on the size of your site you can use a simple list, either ordered or unordered, or even a combination of these. If you have a large site, you may need to choose to categorize everything with the use of headers. Whichever you choose, make sure you're using a semantic and logical document structure as we have discussed. For this simple site, I'll just use a set of nested, unordered lists. Now going back to the site map link, I'm really not liking how this is worded here. The link text is just here, which is not really descriptive. We have a Level A guideline that we can talk about, 2. 4. 4 - Link Purpose. This guideline states that the purpose of each link can be determined by the link text alone. Again, here doesn't really tell us anything, so I'll change the anchor tag to just Site Map, and that will make more sense. Guideline 2. 4. 4 is a Level A guideline, which means it's a basic necessity for web accessibility. I can think of another very popular instance where this guideline is not met. Have you seen a Read more link? A page could be littered with a bunch of Read more links, but what am I reading more about? Let's take a look at the FAQ on the Services page with the screen reader, so that I can demonstrate why being able to tell the link purpose by the text alone is so important. Using VoiceOver's Web Rotor again, I'll bring up a list of links. VoiceOver on Safari, Services | Acme Web Design, window. Headings menu, Links menu, Visited link. See the Read more links? A screen reader has no way of knowing which is which. Now let's try tabbing through the page to see what it sounds like in context. Frequently Asked Questions. Visited, link, Read more description list 6 items. Visited, link, Read more. So, how can we fix this? Well, the most obvious way, as the guideline suggests, is to modify the link text to include more information about the link. We can make this a more complete sentence, and use the word products as our link. That's one way that will work great, but maybe you don't want to change the look and feel. We can add some text to the link for screen readers to add more context, and we do this by using a CSS technique called visually hidden text. This is some special CSS that can hide text visually, but still make is available for screen readers. Bootstrap has the sr-only class, and the Foundation framework has a show-for-sr class. But if you're not using any of those, here's the basic CSS you will need. I'll try an example of this with our second FAQ link to help meet guideline 2. 4. 4. Now, I'm showing you two different ways to do this just as an example, normally you would just pick one technique and use throughout. Let's go back to the browser and hear what these changes sound like. VoiceOver on Safari, Services | Headings menu, Links menu. Checking our Web Rotor list of links, we see an additional link for products, and we also see a link with a more descriptive title. Now let's tab through the page to hear in context. Heading level 2, Frequently Asked Questions, heading level 2, Frequently Asked, link, products description list 6 items, link, Read more on our products page. This is way more helpful. We talked about page-to-page navigation, but let's talk about in-page navigation and another Level A guideline, 2. 4. 1 - Bypass Blocks. This guideline states that we provide a way to bypass blocks of content that are repeated across our pages. We've actually met this already for screen reader users by using landmarks, but we also need to provide the same for non-screen reader users, or users that are using alternate input devices like keyboards. These users use the Tab key, and since our template always has navigation at the top of the page it can get very frustrating to have to move past each one of those links just to get to the main content. For these users we provide a skip link. A skip link is the very first item on the page that is encountered. It is a link that will take them to the main content. Now let's add this skip link to our page. The skip link needs to be the very first item on the page. It's a simple link, and in most cases it just reads Skip to main content. We'll use an href of main here. Now, down on our main landmark we'll add the id of main, and we'll add a tabindex of -1. I'll explain what the tabindex is in a later video, but for now we need to add it to properly support this functionality in some browsers. Let's see how this works. So here's the skip link, and if we activate it you see that it will take us directly to the main content of the page. But the skip link is very out of place here. Usually what is done is that this link is absolutely positioned off-screen so that it appears hidden, and then when it is focused it will reappear, and we do this with CSS. In this example, the skip link is absolutely positioned with the left position of -100% to move it off screen. When the skip link is focused, we move it back into position. In my example, I set the left to a value of 50%, but you can position this where you need to to make the most sense for your layout. Let's try this in the browser. The skip link is currently not visible, but upon the first tab it's moved back into position, and we can now activate it. So in this video we talked about consistent navigation to meet guideline Level AA 3. 2. 3, making sure your navigation stays in the same place and in the same order. We talked about multiple ways of finding pages to meet Level AA 2. 4. 5, by adding a site wide search and a site map. We talked about clear link purpose for guideline Level A 2. 4. 4, making sure link text makes sense. We talked about consistent identification of interface elements for guideline Level AA 3. 2. 4, to make sure that functionality is consistent. And finally, we added some skip links for non-screen reader users to meet guideline Level A 2. 4. 1, as a way to skip all the navigation at the top of the page. While you're thinking of these guidelines it's important to remember the purpose. These guidelines support the POUR principles that we talked about, by ensuring you provide a simple, consistent experience for your users. So far we've met 13 of 38 guidelines, we still have a way to go. In the next video, I'll be showing how to provide proper tables.
Tables

Tables are another element that is often used incorrectly, either in usage or implementation. In this video, we're going to talk about how to properly use and build a table in order to continue meeting Level A guideline 1. 3. 1 for Info and Relationships. A table is used to display data like text, images, links, form fields, etc., in a structured format using rows and columns of cells. Tables should not be used for layout, this is not 1999. We now have CSS for style and positioning. Not only would you be using too much unnecessary markup, but you will make your sites extremely difficult for users of assistive technologies to navigate and consume the content of your site. Now let's take a look at the Products page of this example site to see how we can properly use a table. There is some basic information here about the products with data points for type of product, description, and cost. It would seem that this is using a table, but it's not. It's just using a series of divs and spans with some CSS to achieve this presentation. Here's where guideline 1. 3. 1 comes in. This looks like a table, but it's not structured as one. The fact that it looks like a table and is meant to act like a table is lost on assistive technology users. Let's try this out with a screen reader to hear how it comes across. VoiceOver on Safari, Headings menu, heading level, heading level 1, Products. Here is a list of products, Product, Description, Cost, Basic Web Server. Notice there is just no structure, no relation to anything. Visually, you can immediately tell what this table is for, if you needed to know how much it will cost for an SSL certificate, you can get that information immediately, but for screen reader users it's just not as easy. Tables can be difficult to access for screen reader users. Screen readers will provide special shortcut keys in order to discover and navigate tables. Because of this, there's a definite recipe for making sure that the data you are presenting is easy to consume. Before we get to our code, let's go over the parts of the table that we'll be using. I don't want to take up too much time talking about table basics, so I'm just going to be talking about the key things to keep in mind when structuring a table. The first is a table caption, which is used to display a title for the table. A title for a table is not always required, but if you find yourself using a header or any kind of text before the table as an introduction or description, then caption is the perfect use for this. Then we have some grouping elements for specific sections of our table, the thead, tfoot, and tbody. These are also optional in most simple cases, but they can make more complex tables easier to read and style. I generally always use them, it doesn't hurt, and ensures that I don't forget to use them when appropriate. After that, I'll be talking about header cells using the th tag, and associating cells with those headers using some special attributes, scope and headers. Now let's go back to the code, and I'll talk about implementing these. So the list of products here can be a very simple table. The crazy thing about this here is that it's already using the basic structure of a table, but without the proper tags. The tags are what give the purpose and meaning for our table. Divs and spans have no meaning, so we use the same structure and added a bit of CSS, but if we just use the proper tags in place of the divs and spans, we'll get a lot more for free. So I'll just start converting these divs and spans into proper table tags. I want to separate the parts of this table a little better, so I'm going to make this a thead since this is a row for headers, and I will wrap the rest in a tbody tag. This right here is already a big improvement over what there was previously, and all we did was just change the tags. Now let's start adding a little more to this table to make it better. First, I'm going to take this paragraph above the table, which is being used as a title, or a description for my data, and associate that table using the caption tag. Again, the caption tag is not a hard requirement per se, but if you're using some proceeding text to describe or title the table, then it's best to use the table caption. The caption tag absolutely must be the first child of the table. Now I need to do a little more with the table headers, and so I'm going to change these to th tags. In our fake table we used some CSS to make the text center aligned and bold, but th tags do this for us automatically. We don't need extra CSS for that, but the effect is the same. One other thing we need to do is associate all the other cells with these headers, and we do that by adding the scope attribute. The scope attribute has a few values like row, col, rowgroup, and colgroup. In this case, this is a header for the column, so I'll set the scope to col. A screen reader will take this information and announce the header along with the cell data. A sighted user can just look up and down the table to understand the relation, so we need to provide the same to non-sighted users. In the body, I would consider the first cell in the row to be a type of header, so I'll make use of a th tag there as well, but this time I will use a scope of row since these are row headers. And that's it for this basic table of lists of products. The next table for bundles is a little more on the complex side. It's complex because it appears to have multiple headers, and each bundle has this summary of costs, and then at the bottom is a couple bundle additions. So this table, by appearance, is going to require some different structure if we want to provide the same experience to non-visual users, and we'll need to make some decisions here. I'm going to actually show two different ways to handle this so that I can go over all the different available tags and attributes. First, I'm going to take this header and make this the caption for the table, I think it better describes the table. I'm not going to go through the rest of the basics of the table again, so I'm just going to point out some key differences here. We won't need to actually repeat these products and cost headers, so I'll put them in the thead tag with the scope of col, I also give them an id. Since this table is using nested headers, and this can be difficult for screen readers, we need a different way to associate the cells with multiple headers. In the tbody, since we have multiple bundles, we can break these up into separate tbodys. Each has a header, so that will go in a table row with a single th, I will also add an id and add a colspan of 2 with a scope of colgroup. Now, for the rows in each bundle, basic trs and tds, and to the tds I'm going to add the headers attribute. Here I will use the ids, separated by a space, to associate this cell with its appropriate headers. The ids go in the order in which you expect them to be announced. So first the id of the bundle title, and then the id for the column, and I'll continue to do this with each of the bundles. This table is not really that complex, it only as a few rows, but the fact that it has nested headers makes it complex. There is a possibility that no matter how hard you try you will end up with a very complex table, and in that case it's recommended that you add a summary or description of how the table is structured. Table has an attribute for summary that works great with screen readers, but unfortunately it has been deprecated in HTML5. So another option is just to add it to the caption. I don't really want this long description to clutter up my page, so I'll actually just use our visually hidden CSS here. You can go either way, visible or not, but the point is to have this description available for people that need it. If you think sighted users need it, then make it available to them as well. Lastly, this data for bundle upgrades doesn't really belong in this same table. It's really a different set of data, so I'm going to decide to break this out into a separate simple table, similar to our first table for list of products. Now as a side note, these are really bad upgrades. As a web developer you should not be charging extra for accessibility as a service, you should just be making everything accessible from the start. I could personally make a case for the other upgrades, but I'll leave that decision up to you. Now let's try this out in VoiceOver. VoiceOver on Safari, Products. First of all, we can check out our Web Rotor for tables, and we can see our tables, and they are labeled using the captions we provided. Bundles, this table has a list. We can also use a shortcut key, Ctrl+Option+Cmd+T, to navigate tables. List of products, table. Bundles: This table has a list of bundles. And Ctrl+Option+Cmd+Shift+T to go backwards. Bundles: This table has a list, list of products, table. Our first simple table, I'll navigate using the Ctrl+Option+right arrow to move from cell to cell in the row. You notice that the column header is included for each cell. I can navigate from cell to cell in each column by using Ctrl+Option+down arrow, and in this case the row header is announced. $199/yr, column 3 of 3. On any cell I can use a combination of Ctrl+Option+R to get the row header. Awesome Web Server. And then again to read out the rest of the row. Description Awesome server to host your awesome site, Cost $299/yr. Description, Awesome server to host your awesome. Ctrl+Option+C will give me the column header, Description, and then again will read the combination of headers and cells for this column. SSL Cert. Make sure your site is secure. VoiceOver tries not to repeat so much information, so it will only repeat the access the first time you enter a new roter column. Next to our complex table, we'll start navigating. Bundles: This table has a list of bundles, which are collections of products and services. Product. Cost, column 2 of 2. Row 2 of 9 Product, spans 2 columns Basic Bundle, column 1 of 2. Row 3 of 9 Awesome Bundle Basic Web Server, column 1 of 2. We can already tell that VoiceOver is not announcing this complex table, as well as the simple table. Part of it, as mentioned before, is that complex tables are just complex to navigate. It can also vary based on users' personal settings. It can also be an issue with this version of VoiceOver in Safari. Other screen readers may do better. The important thing to note here is to make sure that you use the right markup. Last, our Bundle Upgrades table. Bundle Upgrades, table. This is a simple table, so it works fine. I mentioned there were two ways to handle the complex table, and we've seen the first. The second way to handle it is to not have a complex table to start with. As we have experienced here, complex tables can be very tricky for screen reader users, and this one wasn't even that bad. It's much better if you can avoid nested items. Try to go for as flat a table as possible. In my case, I think I'm going to improve this complex table by breaking it up again into two simple tables. So, I'll start by adding an h2 of bundles for this section. The first table will have a caption of basic bundle. I'll add my headers in the thead tag, and for this total cost row I'll add it using the tfoot tag. Again, this is not a requirement, but if you do use it, it's important that the tfoot tag always go before the body. Next, I'll just add the tbody and the rows, and I'll do the same for the awesome bundle. Now let's try this with VoiceOver. VoiceOver on Safari, Products, Tables menu, No items, Forms, Links menu, Headings menu, heading level 1, Products, heading level 2, Bundles, heading level 2, Bundles. Basic Bundle, table. Product, column 1 of 2. Cost, column 2 of 2. Row 2 of 4 Product. This is much better. In summary, we talked about the proper use of tables for tabular data, and not for layout, table grouping elements thead, tfoot, and tbody, table header cells, and table data cells, and I showed you the importance of associating headers and cells using either the scope or headers attributes, and we talked about the difference between simple and complex tables. All of this is important to make sure you're meeting Level A guideline 1. 3. 1 for Info and Relationships. In the next video, I'll talk about making forms accessible, including focus indication and color contrast.
Forms

Forms are one of the most common pitfalls for accessibility. They are extremely easy to get right, but so easy to get wrong. In this video, I'll be going over an important part for any website or application, data input via forms. A quick overview. I'll be walking you through the steps of creating accessible forms. Working through accessible forms gives us the opportunity to touch on a lot of other important topics, such as input error identification and suggestion. I'll discuss issues with color and color contrast, as well as keyboard navigation and focus indication. Now let's get started by looking at the Contact page. So this looks like a pretty typical form that you would see out on the internet today. And without even looking at the markup or trying with the screen reader I can already see a few things that will need to be corrected, most of these coming from a design that did not have accessibility in mind. The first thing that stands out is that these inputs do not have any proper labels. These inputs are using the placeholder attribute to describe the fields, but technically these aren't labels. In fact, there are a lot of accessibility and overall usability issues with the placeholder attribute. The first thing is that default browser placeholders are hard to see for users with low vision or users that have a level of colorblindness. This light gray color against a white background has poor contrast. Level AA guideline 1. 4. 3 for Contrast states that visual presentation of text and images of text have a contrast ration of at least 4. 5:1. Having proper color contrast not only affects low-vision users, but it could also be situational or environmental, such as the case when you're outside with your mobile phone and the screen gets washed out by the sun. You need to make sure that you maintain proper color contrast throughout your site, and this means making sure that the foreground color stands out from the background color, including hover states for links or other elements. Now this doesn't apply to disabled elements or logos, but it does apply to images and videos. Just make sure that any text you have overlaying the media has proper contrast with the background. Of course, it's easy to change the color with CSS, and we can darken the colors to meet the color contrast guidelines, but then we start running into other usability issues. Once you've darkened the placeholder text, some users will think that these fields are already prefilled, which can lead to confusion. Another problem is that browsers treat placeholder text differently. Some browsers will not remove the placeholder text until a user starts typing, as shown here in Safari, but others will remove the placeholder text as soon as the field is focused, and this can also cause confusion for users, because the instructional cue of what to enter has disappeared. We can fix this by using proper labels for input fields, as required by Level A 1. 3. 1 for Info and Relationships, and Level AA 2. 4. 6 for Headings and Labels, both of which I've already talked about. In addition to those, proper labels are needed to meet Level A guideline 3. 3. 2 for Labels or Instructions. This requires that labels and/or instructions are provided for user input. If there's a special format that is required, like for dates or currencies, then you need to provide instructions for this as well. Labels for input fields is a big one, this is one of the highest offending violations and it's so easy to fix. My preference is to always have a visible label, but a visible label is not always required, and I'll talk about that once we get to fixing these problems. One last guideline to meet with form labels is Level A 4. 1. 2 for Name, Role, and Value, and this is mainly meant for cases where you're building your own widgets, not using default HTML. This guideline basically means that when you're building your own interfaces you need to make sure that you provide the same level of accessibility that would be provided with native HTML elements, so your fancy React widgets need to be just as accessible. Moving on from input labels, there's no logical structure or grouping to these inputs. It just looks like one big form, which can make it hard for users to understand. We need to take care of this to continue supporting Level A 1. 3. 1 for Info and Relationships, and Level A 3. 3. 2 for Label and Instructions, which we've talked about already. We're going to group these fields so that they can make sense in context. Looking a little bit closer now, we notice that this paragraph above the form makes mention of required fields, but I couldn't immediately tell that there were any required fields, or which were required versus optional. The text also mentions a blue button at the bottom, but these instructions can be difficult for low vision, colorblind, or non-sighted users. Level A guideline 1. 3. 3 for Sensory Characteristics states that instructions provided for understanding and operating content do not rely solely on sensory characteristics of components such as shape, size, visual location, orientation, or sound. Basically, you can't use instructions that include things like the big rectangle or the red item to the right. Speaking of the blue button below, let's see what happens when we try submitting the form. To get down there I'm going to navigate using the keyboard with the Tab key. Notice as I'm tabbing, I can't really tell where I'm at. This was because either the designer or developer of this page did not like the standard focus outline that browsers provide, either the dotted line or the glowing ring, depending on the browser, so it was removed, but nothing was used to replace it. There are a set of guidelines that we need to meet here for users with motor disabilities. We need to make sure they can navigate and interact with the page without the use of a mouse or a trackpad. This is to support Level A 2. 1. 1, which states that all functionality of content is operable through a keyboard interface. You need to make sure that all interactive elements are reachable and operable using only the keyboard. And once you have ensured that a user can navigate and operate with the keyboard, you need to make sure that you don't present any keyboard traps in order to pass Level A guideline 2. 1. 2, which states that if a keyboard focus can be moved to a component of the page using a keyboard interface, then focus can be moved away from that component using only a keyboard interface. Keyboard traps can occur when scripting is used to either intercept or highjack keystrokes like tab or arrow keys, this could even by caused inadvertently by common responsive patterns, which I'll talk about in another video. But in order to meet all these keyboard guidelines, you also need to make sure we provide some level of focus indication, to let the keyboard user know which element they're interacting with. Level AA guideline 2. 4. 7 for Focus Visible states that any keyboard operable user interface has a mode of operation where the keyboard focus indicator is visible. This is another common accessibility pitfall. Getting back to the form, the instructions here mention that there were required fields, but I can't really tell which ones are required. If I try to submit this form, I guess that's what these red borders are trying to demonstrate. There is no error message or indication of what's wrong, a user may not know how to fix this. Now I realize this is a really contrived example, but you should be able to get the point here. Now the red border to indicate the error is not very helpful for vision impaired users. Not only does it not have proper color contrast, it also violates Level A guideline 1. 4. 1, which basically states that color is not used as the only visual means of conveying information, indicating either action, prompting a response, or distinguishing a visual element. A colorblind user may not be able to tell the difference between the red border and any other color. An interesting stat is that 10% of men are colorblind, and the most often kind of colorblindness is a red/green deficiency. Colorblind doesn't mean that you can't see colors, or that you see everything in grayscale, and red or green deficiency just means that you have a hard time distinguishing those colors from others. Think about that in terms of forms and error validation. We use red to show errors, and green to show everything is good. If all we did was use these colors, there's a chance that 10% of men are missing that information. One way we could fix this is by making sure we present some form of error identification, which is a Level A guideline 3. 3. 1. The item in error should be identified, and an error description is provided in text. Taking it a step further, in addition to identifying an error, Level AA guideline 3. 3. 3 for Error Suggestion states that when possible, you should provide information on how to correct the error. This is necessary for fields that require a specific format or type of content like emails, phone numbers, dates, or amounts. So that's quite a few guidelines that we need to address here, and we haven't even tried this in our screen reader. Let's do that now to get an idea of what this sounds like. VoiceOver on Safari, Contact. So as usual, let's first bring up the Web Rotor and see what kind of information is provided. Search, Name, Email, Phone. Notice the radio buttons and the checkbox have no information or context, just that it's an element and whether or not it's checked. The text inputs have some general information provided by the placeholder, but let me show you what happens when they are filled out. Email, Name, edit text, Name, edit text. I'll put in my name, G r d, Gerard, K, o n, Cohen, and an email address, Email, edit text. E s t @ t t. o m, test. com. And then I'll bring up the Web Rotor again. Form Controls menu, search, search. You'll notice those fields are now described by the information I filled in. Now again, this is a pretty contrived example, and even though I might be able to tell by the content what this element is for, it won't always be so easy. Navigating through the form fields, I'm given the same type of information as the Web Rotor. So I've put in my name and email address, and I don't want to give up my phone number or my address, so I'll just submit the form now. Edit text, City, State, edit text, Zip, edit text, edit text, Comments, Comments, unchecked, checkbox, Submit, button. And nothing, no indication, no change, nothing. At this point a screen reader user is just stuck. Now, because we can see that the Comments field is red, that might give us a visual clue of what's going on, so maybe a screen reader user starts to navigate and try and get an idea of what's happening. I'll navigate back up to the Comments field, and still no indication of what's wrong. I can't tell that this is a required field, I can't tell that it's in an error state, I have no idea what's going on here. Let's hit the code and start to fix these things. First thing I want to do is point out the novalidate attribute on the form here. This tells browsers not to use native validation, which is provided by HTML5. As of right now, the native error message balloons are not accessible, it's also hard to style them, so for this reason it's better to provide your own validation logic with JavaScript. I still want to use some of the HTML5 attributes, and I can still do that without the need of the actual validation. Next, I'm going to move this paragraph of text outside the form. This is because when screen readers encounter a form, they enter forms mode, and forms mode has a completely different interaction than the default mode. Depending on the screen reader, forms mode has a different set of shortcut keys since with forms you're not using your keyboard to navigate and discover information, you're using it for input. So unless text is directly associated with an interactive form element, then it may not be discoverable. With this text, I'm going to edit it so that I can meet Level A guideline 1. 3. 3 for Sensory Characteristics by removing this instructional text that relies on the position and color. Next, I've noticed this se habla espanol part, and we have another Level AA guideline that we need to meet here, which is 3. 1. 2 for Language of Parts. We've already met 3. 1. 1 for Language of Page in another video by specifying that this page is in English, but we also need to note when contents of the page are in a different language. Since this is in Spanish, I'll just wrap it in a span and use the lang attribute again, setting it to the ISO 639 code for Spanish, which is es. Now we have to start labeling all our form elements. There are a few ways to do this, but I'll show you my preferred method first by using an explicit label. Staring with the label tag, I'll just put the label of Name here. Now in order to explicitly associate this label with the relative input, I'm going to add the for attribute, and for a value I will add the ID of the input, which in this case is simply name, and that's it. We now have an explicit label for this input. Now, since Name is a required field and we need to notify users of that, I'm going to add the required attribute to the input. This takes care of screen reader users, but I also need to let sighted users know, so I'll just add the word required to the label. Here I'm being very verbose about it, and you could choose to use an asterisk, just make sure to describe the asterisk as a signifier for required. Now I'm going to make these changes to the rest of the text inputs in the text area, but I want to point out a few things. For the email field, which is also a required field, I use the HTML5 type email. Another HTML5 type is tel for telephone numbers, this just gives a little more semantic meaning. Some screen readers may announce this field type, and touch devices may present a specialized on-screen keyboard for easier input. You could also use this as a flag for validation. For the radio buttons and the checkbox, I'm going to show you another method of labeling, this time with an implicit label. An implicit label is when you wrap the input field with the label. So I'll open my label, and inside I'll put the input and the text for the label. Notice, unlike the explicit label there is no need to use the for attribute here. I prefer the explicit method because it makes styling a lot easier for me, but this is also a way that you could label your input fields. Next, there is some logical grouping that we can do here to give additional context to users. Grouping is done by using the fieldset tag, and a proper label for the group is handled by the legend tag. The first thing that needs to be grouped are the radio buttons. I'm going to wrap the radio buttons in a fieldset. The very first child of the fieldset must be the legend tag, and the legend is the label for the group, so I will label this group as Phone Number Type. Radio buttons almost always need to be grouped, at least with the fieldset and legend, because the label for the radio buttons are just to describe the value of the selection. In this case, home, work, or cell, but for what? The legend gives additional context. Another useful place for logical grouping is the address fields. Here I use a paragraph tag as a label, but it should be used as the legend of the fieldset. Again, this is a contrived example, but if you have more than one address like a billing and shipping address, then it's good to wrap them in a fieldset and label them properly. Even though it's required to have everything properly labeled using either explicit or implicit labels or legend tags, it's not always required that they may be visible. You could use our visually hidden CSS to hide these labels from sighted users, but still be available for screen readers. As always, if you think that sighted users can benefit from visible labels, just go ahead and include them for everyone. So we labeled all our inputs and logical groupings, and specified which fields were required, and we've done this to meet guidelines Level A 3. 3. 2 for Labels or Instructions, and Level A 4. 1. 2 for Name, Role, and Value. Next, we need to work on error validation. I'm using my own JavaScript to provide validation, which I won't get into. How you choose to validate user input is completely up to you and out of scope for this series, but I'll show you some ways to properly notify your users that fields are invalid. I'm going to work on Level A 3. 3. 1 for Error Identification, and I'm going to use a real simple, low-tech solution here. For my fields that are required I need to present an error message when a field is empty. I'm going to demonstrate how to do this both on submission of the form, but also inline with blur events. Even if the event timing is different, the techniques are going to be the same. I'm just going to add my error messages directly to the labels, using a span with a class of error-message and the text for the error. Using CSS the default state of this text will be hidden with display none, and then when validated with JavaScript, I'll just show the error message by setting the CSS display property to inline block again. Another thing I need to do via JavaScript is place these fields in an invalid state. This is done by adding aria-invalid and setting to true. ARIA is another specification for making web content accessible, especially with dynamic applications. I'll get into ARIA in another video, so this won't be the last time you hear of it. In the meantime, we still need to make sure that this field has a proper invalid state on it. One thing that would be very helpful for users is a collection or a list of errors, as a summary that is placed above the form. The list would be generated by JavaScript of course, but there are a couple of things we can do in the markup to set this up. First, I'll add a section to the top, right above the form. I'll have an id, aria-live set to assertive, and a tab index of -1. Aria-live is considered a live region, and allows screen readers to announce content dynamically when updated. Again, I'll talk about ARIA in more detail with another video in this course. Since section is not a natively focusable tag, I add a tabindex value to make it focusable. The tabindex has to do with focus order, and this accepts a number, while tabindex accepts any integer up to 32, 767, there are only 2 values that you should ever use. Basically, never set a tabindex greater than 0. The only acceptable values are -1 and 0. Setting higher than 0 will lead to unpredictable behavior, you will need to set a numbered tabindex for every element on the screen. Tabindex should follow the visual order of elements on the screen, and the visual order of elements should match the DOM, so if you use natively focusable elements, you never really need to specify the tabindex. Let's quickly talk about the acceptable values for tabindex, starting with -1. A tabindex of -1 will remove the element from the natural tab order, but it will still be focusable via JavaScript. This is important for some interactions, especially more complex widgets that require a lot of JavaScript. Next, tabindex of 0 will add the element to the natural tab order, and of course like -1 it's still focusable via JavaScript. Back to the section, I've set the tabindex to -1 because I don't want this element to be in the natural tab order, but I do want to be able to set focus on it. The reason is because the Submit button is at the very bottom of the page, and in order for visual users to get this information I need to move back to this location, and setting focus is one way to do this. I won't actually go over the JavaScript because how you choose do write this code is up to you and based on your specific context and use case, but all the code I'm using is included in the assets for this source. Okay, let's try this out in the browser and see how it works. So there's quite a visual difference here with the addition of the labels and the fieldset legends. Tabbing around you'll notice that there's a nice clear indication of focus now. Previously, the CSS outline property was set to 0 to avoid ugly browser focus indication. I've replaced that with some custom CSS to give this a nice glow. I highly recommend that you specify your own custom CSS for focus, as the focus indication in some browsers is actually inadequate. You can use any combination of outlines, borders, or box shadows to accomplish this. Focus doesn't have to be ugly, you can have it match your site's palette, just make sure it has a good color contrast so that it stands out visually for keyboard users. By doing this we have met Level AA guideline 2. 4. 7 for Focus Visible. Since we've added the labels, now we get another feature for free. Clicking or tapping on the label will automatically place cursor focus on the associated field. This gives users a nice touch target to access. Another thing to notice is this fieldset and legend around the radio buttons. This is the default visual rendering of a fieldset, and it adds a border around the radio buttons. It's definitely ugly in my opinion, and I imagine that's one reason why it's not used often enough, but fieldsets and legends can be styled, just like anything else, and I have done that with our next fieldset for the address. For the address grouping, I removed the fieldset border and spacing, changed the font for the legend, and then added this border underneath to visually separate the content. Under the hood, it's still just the fieldset and the legend, it just looks a little better. Now I'm going to attempt to submit this form so we can check the validation. Notice the browser shifted from the bottom of the form by the Submit button to the top of the form where our numbered list of errors is clearly visible. These errors are in a shade of red that has a contrast ratio greater than 4. 5 to 1, as required by Level AA guideline 1. 4. 3 for Contrast. The errors include the specific error message, as well as an anchor tag link to the related fields. Activating the links moves the cursor straight to the invalid field. Here in our field, you'll notice that everything is red, again in the same shade of red that meets color contrast guidelines. Along with the red font change, the input field has a red border, and if you can notice the border is slightly thicker than the border around the valid fields. This, along with the error message and the aria- invalid state added to the field, are all ways that I've been able to present this field as invalid without using color alone, which supports Level A guideline 1. 4. 1 for Use of Color. I'm going to reset this form and then open up VoiceOver so we can see the improvements we've made. VoiceOver on Safari. First, let's check the Web Rotor to see our list of form elements. Notice everything is properly labeled here, the text inputs, the radio buttons, and the checkbox. We have information as far as which fields are required, from both including that information in the label, as well as by using the required attribute on the input. Now let me tab around to see what we have. Required, Phone Number, edit text, Home, radio button, 1 of 3, Phone Number Type group Phone Number Type 4 items. Notice when we I get to the fieldset that the legend is announced after every field to give context. Some users find this extremely helpful, and others think it's annoying. The important thing is that you use the proper markup, and let screen reader users handle the way they prefer. If you remember the first time we did this, the placeholder text was coming through as our label, but once we enter anything into the field the placeholder label was lost. Let's see how this works now that I have proper labels. Notice that the content of the input fields is included, as well as the label. This makes more sense now. Gerard K. Cohen, Name. Gerard K Cohen. G. Let's try out the validation. I'm going to submit this empty form so you can see how this works. Edit, Comments, Submit, button. Two Errors 1 Name cannot be empty 2 Email cannot be empty 3 Comments cannot be empty. Okay, so our error messages are immediately announced, and we can again use the links to navigate directly to the appropriate field for correction. Let's check out the Web Rotor one more time. Notice that we can tell which fields are invalid by the error message included in the label, as well as the aria-invalid state that we used. This is working very well now. With the labels, legends, and error messages we have met guidelines Level A 3. 3. 2 for Labels or Instructions, Level A 4. 1. 2 for Name, Role, Value, Level A 3. 3. 1 for Error Identification, Level AA 3. 3. 3 for Error Suggestion, and we continued meeting Level A 1. 3. 1 for Info and Relationships, and Level AA 2. 4. 6 for Headings and Labels. Earlier I mentioned that another way to provide error messaging on validation was on blur of input fields, and we can still do this in an accessible manner with just a few additions to our markup in JavaScript. To our markup, all I need to do is add another ARIA property to the label, I'm going to add aria-live with the value of assertive. The only change to the JavaScript is that our validation procedures will run on blur of the required fields, in addition to submitting the form. Let's try this out now. First without VoiceOver. On blur of the empty field, validation is done and we get our error state. I'll enter my name and on blur this is now corrected, and now with VoiceOver on. Blurring on the empty field will immediately announce the error message. Required, Name Required: Name cannot be empty. We're just doing simple validation for required fields here. You would most likely want to do additional validation on proper email and telephone format, or any other level of validations. If you do, just make sure that you make any required formats or instructions clearly displayed, and that the errors include suggestions on how to correct. This way you can be sure to meet AA guideline 3. 3. 3 for Error Suggestion. Lastly, there are two additional guidelines related to forms that I want to make you aware of. The first is Level AA guideline 3. 3. 4 for Error Prevention. This guideline basically states that any time a user is engaging in a legal, financial, or data action, you must allow a way to reverse that action, check the action before completing, and then providing a confirmation of the completed action. Think of this as your typical shopping cart scenario where you can cancel your order during checkout, you're presented with a summary of items you're about to order, and finally a confirmation of a successful order. The second is Level A guideline 2. 2. 1 Timing Adjustable, which states that for each time limit that is set by the content, the user has the ability to turn off, adjust, or extend the time limit. This applies to any forms with time limits to submit, or even automatically logging out due to inactivity. Users must be given at least 20 seconds in order to extend a time limit via a simple action like pressing any key. This guideline does not apply to time sensitive cases like auctions or reserved seats for events. In summary, I really covered a lot here. I demonstrated how to make accessible forms with labels for identification and fieldsets with legends for logical grouping. I also talked about giving users the ability to cancel or reverse, review, and get confirmation of legal, financial, or data transactions, as well as giving the user the ability to turn off, adjust, and extend time limits. I talked about error identification and suggestion as part of validation, along with properly specifying required and invalid fields. I talked about color contrast, not using color alone as the sole means of conveying information, as well as not using size, shape, visual location, orientation, or sound for instructions. Lastly, I talked about the importance of ensuring that all interactive elements are accessible and operable by keyboard, that no keyboard traps are present, and that proper focus indication is provided. And with the additional 13 new guidelines, this concludes the HTML section. In the next section, we'll be taking a look at multimedia, such as images, audio, and video.
Media
Introduction

One reason why the internet has exploded over the years has been the introduction of media, images, audio, and video. This rich media has turned the internet into an immersive experience. We need to make sure that this immersive experience translates to users with disabilities, and WCAG has some very specific guidelines around media that I'll be talking about in this video. The basis for accessible media comes from Level A guideline 1. 1. 1 for Non-text Content, which states that all non-text content that is presented to the user has a text alternative that serves the equivalent purpose. Level A only requires that you provide text alternatives to media, but I'll also be talking about Level AA guidelines that require alternate means of providing equivalent purpose and meaning. The important takeaway is that you need to make sure that users with hearing and vision impairments can also benefit from rich media content. A quick overview of this section. I'm going to talk about images, including background images via CSS and accessible SVG, then I'll go over the guidelines for making audio accessible, as well as video, and finally some additional media guidelines I want you to be aware of.
Images

Images are the most basic form of media on the internet today, and being basic also means that it is extremely easy to make accessible. Unfortunately, inaccessible images are consistently one of the most often occurring accessibility violations. Assistive technologies like screen readers cannot read text in images, that is why it is important that if you're using images for more than just decoration purposes, and not supplying a text alternative, then users with vision impairments may miss out on the meaning or lack comprehension of your content. Level AA guideline 1. 4. 5 for Images of Text basically states that you should prefer to use real text instead of images of text. I talked about this in the navigation and skip links video, where I changed out my navigation links for text instead of images, and then used CSS to achieve the same visual styling. But what about all the other images that don't have text? There is the basic Level A guideline 1. 1. 1 for Non-text Content, which basically says that we need to provide text alternatives for any content that is not text, so that users of assistive technologies can benefit from them. Let's go back to Acme and check out some examples. On all the pages for Acme there is the logo image, and then there is this big image at the top, a hero image. VoiceOver on Safari, Welcome to Acme. Bringing up the Web Rotor, I'm going to the Images category first. There are two images listed here. I know because of the file name that this is the logo, and this is the hero image. In this case, since there is no text content supplied with the image, VoiceOver is just using the file name, which in most cases is not very descriptive. You could be tempted to be clever and use a descriptive file name, but that's not really that clever. Going through the page, we basically hear the same thing, just the file name. Search, visited, link, visited, end of navigation, end of banner, home-header. png, image. Next, let's check the Portfolio page because I have some images there. Here, the portfolio is using images to demonstrate past work, but these images are actually links to pages with details about the particular project. In the Web Rotor, if we look at the images, we see that of course the file name is used, but what about the links? Since there is no text in the anchor, just the image, the file name is again used. Big-ugly. jpg, link, image, worlds-worst JPEG, link, image, worst-website JPEG. All the images on this site have no descriptive text, so let's fix this. When it comes to images, all images must use the alt attribute. Sometimes you will hear this called the alt tag, but it's really an attribute of the image tag. The alt attribute is not just for assistive technologies, it's helpful in other cases when the image is not visible, such as when it's not downloaded completely due to network timeouts or when users have decided to turn off images. The contents of the alt attribute can vary greatly depending on the usage. For images that are purely for decoration only, you should set that alt attribute to an empty string. Screen readers will ignore images with an empty alt attribute as decoration and will not announce them. Let's do this now for the logo. You might be tempted to just use the word logo as the alt text, but that's not helpful or descriptive. If the logo had some kind of meaning I could describe it, but I'm just going to add an empty alt attribute for the logo. Going down to the hero image, I could also choose to just use an empty alt tag, but the hero images were picked to convey a special meaning, and enhance the marketing message. So for this image, I'm going to set the attribute to, Web design is home for us. Now for the images used in the portfolio, I'm just going to use the project name as the alt text here. Okay, let's try this out now. First, on the Home page, I'm going to bring up the Web Rotor and check out the images. Now there is only one image in the list, and that's the hero image. The logo is not showing up because I used an empty alt attribute. Now, over to the Portfolio page, I'm going to bring up the Web Rotor again and check the images. The images here are properly labeled, and if I go to the Links category, I can see that the links are also described properly. Link, image, Worlds Worst Website redux. So let me go over some tips for writing some good alt text. First, don't describe the image literally. For the hero image on the home page, I could have wrote the alt text as, brown couch, with brown pillow on the left with alphabet imprint and pencil on top, with a laptop next to it, etc., etc. That would be really long winded and not be helpful to anyone. When writing alt text you want to avoid using words like this is a picture of or this is an image of, because that information is redundant. Assistive technologies will usually note that it is an image. What you do want to do is describe the meaning or purpose that the image conveys. What was the point of the image? What were you thinking of when you decided you wanted an image? And why did you pick the particular image? Lastly, include any text that's used in the image. I could have very easily used an empty alt attribute for the hero image, in fact I did for other pages, but whatever you convey visually also needs to be conveyed programmatically for users with visual impairments.
Background Images via CSS

Sometimes you don't use the image tag directly, but instead you use the background-image property in CSS to display an image. It is a common performance technique to use CSS sprites to cut down on network requests, especially for things like icons. I'm going to go back to the Portfolio page. I have some images here that demonstrate the browsers that these awesome websites support. Notice, VoiceOver just skips right over the images. All of our projects support the latest browsers. Dimmed collapsed on top, horizontal separator. The reason is because there's no text content here. I used a CSS sprite for the images. These images are not for decoration, they're supposed to convey browser support. So to fix this, I just need to add some text content. The designer is pretty adamant about making sure these just stay as images, and I don't want to use individual images just so I can use the alt attribute, because that would force four additional network requests and I want to keep this page pretty snappy. This is a pretty easy solution that I have already talked about before, which is basically to use some visually hidden text here. I'll add a span with the browser's name, and then add my visually hidden class. Now, trying this again in VoiceOver. VoiceOver on Safari. Images menu, Bad HTML, image, link, image, Bad HTML, dimmed collapsed, Opera, Safari, Edge, Internet Explorer, Firefox, Chrome. Now I can find out which browsers are supported.
SVG

What about SVGs? Let's take a look at the Contact page to see an example of some SVGs for images. On the Contact page I have social media links, and I'm using SVGs here. VoiceOver on Safari, Contact | Acme Web Design. Checking the Web Rotor, since these are links I'm going to check that first. Slash, link, /. Notice, these just have a /. Link /, link /, link /. So I have to make these SVGs accessible. I need to do two things here. The first is I have to make sure that assistive technologies will recognize this as an image, and so I will add a role of image directly on the SVG. SVGs have a title tag that I can use to label this image. This is not to be confused as a title attribute. This is an actual tag that is a child of the SVG. If necessary, if this was a complex image, I could add an expanded description using the desc tag. Last, just to ensure support with all browsers and assistive technologies, I will add an aria-labelledby on the SVG that will reference the title. In the case I need to use the description tag, I will use the aria-describedby on the SVG and reference the description tag. Let me do this now. So for each of the SVGs I'm just going to add a role of image. Then, as a child of the SVG I'm going to add the title tag with some text that describes the intent here. Now, I'm going to add an id to the title, and then on the SVG I will add an aria-labelledby referencing the id of the title. Okay, let's try this in VoiceOver. First with the Web Rotor checking the Links. Image, Follow on Twitter, link, image, Like On Facebook, link, image, Follow on Instagram. Now the images. Images menu. Follow on Twitter, image. Like on Facebook, image. Follow on Instagram, image. And then navigating the page. Link, image, Follow on Twitter, link image, Like on Facebook, link, image, Follow on Instagram. Everything is working great here.
Audio

Audio falls under a classification that WCAG calls time-based media, and you need to make sure that you make this accessible to users with hearing impairments. Some examples of audio only that you might encounter on the internet. The most popular would probably be podcasts. It could also be recorded or archived radio newscasts, and possibly things like TV or movie soundbites. Level A guideline 1. 2. 1 for Prerecorded audio states that we need to provide an alternative that presents equivalent information. I intentionally left out video here because there are other guidelines that will cover video later. Of course, there's again Level A guideline 1. 1. 1 for Non-text Content that requires that we provide a text alternative for non-text content. So the alternative for audio only is pretty low tech. It's simply just providing a transcript of the audio. Here are some ways of creating a transcript for your audio only files. You can obviously pay a service to transcribe everything for you, probably for larger projects. If you choose to do it on your own, you could use some speech recognition software to help you out. Some examples of good speech recognition software; Google Docs Voice Typing, which requires Chrome, Windows has the built-in Windows Speed Recognition, and Apple includes Apple Dictation. And as a paid option, you can use Dragon NaturallySpeaking. All of these have some pretty good results, but you should always double-check to make sure that everything is transcribed properly. Even if you have to make some modifications, it's still a good start. Lastly of course, you could just transcribe manually. Some tips for creating transcripts. Make sure to include the names of speakers, it helps to know who is speaking at all times. Be as descriptive as possible, don't just transcribe the dialogue that is spoken, do your best to describe tones and verbal expressions, any sounds. Basically, you want to represent the same story and oftentimes a story is more than just dialogue. Once you have your transcripts, you basically have two options to present and make them available. First, you could just have the transcript inline, usually under the audio player. And of course you could just link to the transcript as a separate asset. This link needs to appear immediately after the audio.
Video

Video is another time-based media, and the internet would be pretty boring without it. You also need to make sure that video is accessible to users with hearing and vision impairments. First is Level A guideline 1. 2. 3 for Audio Description or Media Alternative for Prerecorded media, which basically states that we need to provide media content in an alternate format. If we couple this again with Level A guideline 1. 1. 1 for Non-text Content that requires we provide a text alternative for all non-text content, the simplest thing you can do is provide a transcript, just like the audio files. I already went over ways to create and present transcripts in the section on audio, so I recommend that if you haven't already gone over that, you do so in order to understand how to create transcripts for video. Aside from providing a descriptive transcript, there a two guidelines for presenting captions. Level A 1. 2. 1 requires captions for prerecorded video, and Level AA 1. 2. 3 requires captions for live video. There are two types of captions that you can provide. The first is open caption. Open caption is always available as it is embedded directly in the video. Open is a great way of providing captions and can benefit a lot of people, since they are always visible. A lot of videos on Facebook are now popping up as open-captioned videos, and it allows you to enjoy these videos in loud places where you cannot hear everything, or if you're in a quiet place like me in meetings watching those tasty recipe videos. I can get all the ingredients being used for these recipes, other than bacon and cheese, without anyone knowing. Closed captioning is a separate asset altogether. It's not part of the video like option captions. This means that unlike open captioning, closed captioning has to be toggled on. Closed captioning is essential for users with hearing impairments to consume video, but like open captioning, it also has greater benefits. I often watch Netflix with captions on when I can't really understand accents, or if I need to watch at night without any sound. Captions need to be synchronized to the video and require a special format, the most popular being SRT. Some ways to caption your prerecorded video. YouTube provides an audio-subtitle service, which you can use to start up your first draft. It's not perfect, but it should get you started. If you already have a transcript from meeting Level A guidelines 1. 1. 1 and 1. 2. 4, then you can upload the transcript and then sync all the lines to the video. Lastly, you can just manually type everything. In all cases, you can download the subtitle file for use elsewhere. Of course, there are professional video captioning services that you can hire to caption your video, and you can manually create captions. Again, if you already have transcripts then all you need to do is include timings in order to sync with the video. For captioning live video your only real option is to hire a live, professional stenographer to produce real-time captions. Another guideline you need to meet is Level AA 1. 2. 5 for Audio Description. Audio Description is to basically provide all the non-dialogue elements that contribute to the meaning of the video. Audio description should be included in the transcript and in captions, or it can be a separate alternate version of the video that includes the audio description, but I just think it's easier to include everything together. Essentially, you need to narrate any non-visual cues like scenery, expressions, and gestures, musical tones that affect mood, or other non-dialogue related video. These could be things like door slams, thunder and lightning outside a window, or Pam covers mouth while laughing as Dwight discovers his stapler is molded in jello. It's easy to include these in the text transcript, but with video it's usually customary to include this information in between the dialogue, when possible. One of the easiest ways to provide audio description is just to have the subjects or people in the video introduce themselves and describe as much as possible in real time.
Additional Media Guidelines

There are some additional guidelines for media that I want to point out. Level A guideline 1. 4. 2 for Audio Control basically states that if any auto started media is longer than 3 secs, you should provide a method of stopping or lowering the volume of the media independently from the system volume. I highly suggest that you don't even have any auto playing media. In most cases it's unexpected, surprising, and just annoying. Similarly, Level A guideline 2. 2. 2 for Pause, Stop, Hide states that any content that is moving, linking, scrolling, or auto-updating needs a method to stop or hide. This could be applied to video, but it's also relevant for things like carousels or scrolling message, or even real-time updating information like stock tickers, sports scores, or social media feeds. Level A guideline 2. 3. 1 for Three Flashes or Below states that you should never allow anything to flash more than 3 times in any 1 sec period. This is important to prevent triggering any seizers. Realistically though, flashing is just annoying on the internet, and there is never really a good reason to do this constantly. Lastly, if you're embedding any media like audio or video using an iframe, you should label the iframe with a descriptive name via the title attribute. Yes, this is one of the few cases when it's okay to use the title attribute. Labelling iframes helps support Level A 2. 4. 1 for Bypass Blocks because you're allowing a user to skip past content if they're not interested. It also helps support Level A guideline 4. 1. 2 for Name, Role, and Value as it just helps properly identify this block of content.
Summary

So in summary, I talked about making non-text content accessible for images by using alt text, for audio and video I talked about transcripts, captions, and audio descriptions. I talked about providing controls to stop or hide for auto playing or auto-updating content. And lastly, I talked about guidelines for flashing in order to help prevent seizers. In the next video, I'll be talking about guidelines related to responsive web design.
Responsive Web Design and Accessibility
Introduction

Responsive web design and accessibility are natural partners. If you consider that the goal of responsive web design is supporting as many screen sizes and devices as possible, you can easily see how it begins to help with accessibility. But of course there are a few things that I want to make you aware of, including the last couple of guidelines to meet. Most of the things that you need to worry about when implementing a responsive design revolve around switching context, order of content, focus order, and finally I will go over some loose ends with additional responsive patterns and guidelines.
Switching Context

The first thing I want to talk about is switching context. Context switching on the web is basically when there is a shift in focus, and it could be a literal shift in the actively-focused element or because of navigation, either to a different URL or a different part of the current page. An unexpected switch in context can be very disorienting to users with various disabilities. These could be low vision or non-sighted users, or users with cognitive disabilities. I'm going to go back to Acme to show a good example of an unexpected switch in context. So, taking a look at the Services page. I'm going to start to resize the browser window here to simulate a smaller screen. The media query here is at 768 pixels and there are a few things that happen here. What I want to point out is the main nav at the top is replaced by this drop-down with a list of pages to navigate, and selecting any of the options performs the navigation. This is a very common pattern that you see a lot on responsive sites, but this actually causes a few problems for users, and there's a guideline that we can meet here. Level A guideline 3. 2. 2 for On Input states, changing the setting of any user interface component does not automatically cause a change of context. Having a page switch as a result of selecting an item in a drop-down list is not an expected behavior. As 3. 2. 2 states, we could just notify the user that the switch is going to happen. I don't want to mess with my layout and design, and adding this message will just make the page look ugly, so I could use some visually hidden text, but that's only going to help screen reader users. We still have a problem for keyboard users. Safari does not trigger the change until an actual selection has been made with the Enter key or spacebar, but most browsers on Windows will fire the change event when the up and down arrow keys are used to navigate the list. This means you can never get past the first option because using the down arrow to display this causes the change event to fire and the page to navigate. So, other than having a notice to users, one way that this could be fixed is by adding a button next to the drop-down to trigger the change. This puts the user back in control, a selection can be made, and when ready, activating the button will trigger the change. This is a perfectly good and acceptable solution, but I don't really like it for this site though. I want to be a little more stylish, so instead I'll just add a Menu button that will show and hide my menu. Basically, I'm hiding my menu off-screen using a negative left position, and activating the menu places a class on the menu to move it back into view. This is much better.
Order of Content/Focus

A real basic aspect of responsive web design is fluid web layouts, basically stacking and hiding or showing content, and maintaining the order of that content is important to accessibility. Back to the site again, another thing that happens for smaller screens is this sidebar, or aside, shifts to be on top of the main content and is flattened out. I did this basically by using flexbox order properties, setting the aside order to one, and the main content to two, in addition to switching the flex direction from row to column. That's not that big of a deal, back in the days we used to do this with floats, but flexbox just makes this so much easier. Let me show you what this means in terms of accessibility. So, I'm going to start tabbing from the top here until I get to the Menu button. Now watch what happens with the next tab. It skips over the aside links and goes down to the first products link, then if I continue tabbing I'll make it back up to aside links above, and then back down to the footer links. This is a pretty basic contrived example, but there are two guidelines we need to meet here. The first is a Level A guideline 1. 3. 2 for Meaningful Sequence, which states that when the sequence in which content is presented affects its meaning, a correct reading sequence can be programmatically determined. What does that even mean, and how does it relate to what I'm showing in this example? Well, the simplest way I can describe this is that visual order must match the DOM order. This may be kind of hard to figure out depending on your layout, but it's important and will force you to pay attention to document structure, information hierarchy, and architecture. Assistive technologies like screen readers access page content via the markup or DOM. So if the meaning of your content is depending on a specific order of presentation, you have to make sure that it maintains that order in the markup. But my example here on the Services page is not that serious. The aside links coming before or after the content does not change the meaning of the content. So why do you still have to worry about making sure that the visual order matches the DOM? Some low-vision users will use a screen magnifier along with a screen reader, and it can be very confusing if what they are seeing, or expecting to see on the screen, is not the same as what is being announced by the screen reader. Another reason you want to make sure that visual order matches the DOM order is related to Level A guideline 2. 4. 3 for Focus Order, which states that focusable components receive focus in an order that preserves meaning and operability. Focus has to happen in a logical and expected manner. In this example, you would expect that focus would go from the Menu button, to the aside links, the links in the content, and finally the links in the footer, but the order here is just off. Flexbox order arranged the visual order, but the DOM order is still the same. There is any number of ways this could be fixed. In my example, the aside is not essential for smaller screens, so rather than rearrange using flexbox order, I just decided to hide the content all together. Of course, however you choose to solve this should also be accessible, and I'll be talking about hiding content in the next video, but I have one more thing I want to show you here. Over on the Contact page I have a couple of issues. The first is I have decided that I'm going to be helpful and automatically focus this first form field, which is the Name, and I did this by using the HTML5 autofocus attribute. This can be problematic and just annoying to some users. Autofocus is really only acceptable if all you have on the page is a search form, like Google. Another thing, I have this functionality in the address form where after entering the State, which is two characters, focus immediately shifts to the Zip code field. You have probably seen this a lot with phone numbers or social security numbers, and you might think this is clever by saving your user a few keystrokes or clicks, but it's actually kind of annoying. Level A guideline 3. 2. 1 states that when any component receives focus, it does not initiate a change of context. On the Contact page, as clever and helpful as you think it is, this is not an expected action for focus to move automatically from one field to another. You never want to programmatically shift focus on users when it's not expected. Of course, one way to get around this is by notifying the user up front that this change will happen, but that doesn't make it any less annoying, it just gives the user a heads up that they're about to be annoyed.
Additional Responsive Guidelines

There are a few more things I want to point out when it comes to responsive web design and accessibility. In a previous video, I replaced a drop-down for navigation with this off-screen menu. The menu is absolutely positioned off-screen with the negative positioning, but technically I'm not really hiding the menu, all those links are still in the tab order. This could be considered a keyboard trap, there is the perception that focus is lost and tabbing is not doing anything. Now there are only a few links in my menu, so a user may luckily make it out of this trap after enough frustrating tabs, but if this were a big mega menu, the user would probably just give up and leave your site. So instead of moving off-screen, I'll just set to display none and then it will no longer be focusable. Be careful with off-screen content, as I just showed you the content is still tabable and can still be discovered by screen reader users. There are a couple different ways to accessibly hide content. The first is by way of using the HTML5 hidden attribute. This is probably the most preferred method as it is semantic, and ensures that the content is hidden for all users. Obviously, this attribute is manipulated by JavaScript to hide content by adding the attribute, and showing the content by removing it. It wasn't supported by IE until version 11, so as a backup for older browsers you can use the CSS as a backup. The second method is your basic display: none CSS. This will also hide content from all users, as well as visibility: hidden. Lastly is using the aria-hidden property and setting to true. This is last on the list because this will only hide from screen reader users. The content will still be visible to sighted users. In most cases, you want content hidden for everyone, so any of the other options would be better. Make sure to use relative units like em, rem, or %. Try to avoid using pixels. You're probably already doing this if your site is responsive. By doing this, not only will you be helping to meet Level AA guideline 1. 4. 4 for Resizing Text, which we talked about in a previous video, but your responsive site will work better for users that zoom or magnify since media queries are invoked simulating a smaller screen. This will also help you to avoid unintentionally clipping content with overflow hidden or introducing unnecessary scroll bars, which can be difficult for users with motor disabilities. One last note, make sure to maintain color contrast with text overlaid on images. In a previous video, we talked about Level AA guideline 1. 4. 5 and not using images of text, so you might decide to have text overlaid on top of an image that resizes responsively. For example, you may have an image of a blue sky with a few white clouds, and overlaid on this is text in white that reads something like, the sky's the limit. This is designed with the text hovering over the blue cloud, but as the image is resized along with the screen, parts of the text are now over the clouds, and hard to see as white on white. You might want to add a drop shadow from some added contrast.
Summary

So in summary, I talked about not switching context, either on focus or input. Maintaining order of content, with visual order matching DOM order. Be aware of floats, absolute positioning, and flex order to change the order of content. Related to that is focus order, make sure focus stays logical and predictable. And lastly, some additional guidelines, be aware of off-screen content and make sure you use relative units to support text resize and fluid layouts. And with that, we have covered the last four WCAG guidelines.
Course author
Author: Gerard K. Cohen
Gerard K. Cohen

Gerard K. Cohen loves front end engineering so much that he is on a mission to make sure that the web is inclusive to all users, making rich internet experiences available for all. He believes...
Course info
Level
Beginner
Rating
4.6 stars with 123 raters(123)
My rating
null stars
Duration
1h 44m
Released
7 Sep 2016
Share course
