Android Fundamentals: Localization and Internationalization
by Viral Patel

This course will teach you in detail the Android localization process and how to apply the best practices to your localization efforts.

At the core of Android localization process is a thorough knowledge of which Android resources can be localized and how the Android system deals with the localized resources. In this course, Android Fundamentals: Localization and Internationalization, you'll learn how to effectively localize your Android applications. First, you'll discover what localize resources are. Next, you'll explore what factors to consider when localizing yours apps. Finally, you'll learn how to apply the best practices to your localization efforts. When you're finished with this course, you'll have a foundational knowledge of the Android localization process that will help you as you effectively localize your Android apps the right way.

Course author
Author: Viral Patel	
Viral Patel
Viral Patel, a Senior Software Developer with 10 years of experience in the IT industry, specializes in Android Development. It started as a hobby and soon become the main stream of his work. Many...

Course info
Level
Intermediate
Rating
0 stars with 8 raters
My rating
null stars

Duration
2h 25m
Released
18 Oct 2017
Share course

Course Overview
Course Overview
Hello everyone. My name is Viral Patel and welcome to my course, Android Fundamentals: Localization and Internationalization. I am a senior software developer with several years of experience in the software industry. Did you know that translation is only one of the several elements of the localization process? Localization is actually the process of adapting your app to a specific located market or device. In this course we are going to understand the localization process and see the infinitely possible ways in which you can localize you're Android apps. Some of the major topics that we will cover include understanding localizable resources in Android, providing localized resources considering different factors, understanding how the Android SDK deals with your localized resources, and applying best practices to your localization efforts. By the end of this course, you will know what localization is all about and how to do it right. A basic understanding of Android app development is good enough to get started with this course. I hope you will join me on this journey to learn the process of localizing your apps with the Android Fundamentals: Localization and Internationalization course at Pluralsight.

Introduction
Introduction
Hello everyone. Welcome to this course about Android Fundamentals: Localization and Internationalization. I am Viral. In this course I will teach you everything you need to know to effectively localize your Android apps. By the end of this course you will have a strong understanding of the simplified offerings by the Android SDK to enable localization in your app, the different factors to consider when localizing your app and how localization in Android is far more than just translating string, images and media, contrary to how it is like in web development most of the times. Let us start by taking a quick look at the various modules in this course and what I will be talking about in each module. We will start with a brief introduction to the processes and terminology that we will be using throughout this course. In the second module, I will demonstrate how to provide localized strings, images, and simple media. Now this is where most people think localization is done. But in the mobile applications, there is a lot more when we talk about localization. The examples in the later modules will change you think of localization. In the third module I will talk about different resource groups and type of localizable resources in each resource group. in the fourth module I will talk about different configuration types and qualifier values for each resource group. Don't worry about the jargons for now, they are simple to understand and it won't take long to get a hang of them when we move to the demos in the fifth module. In the fifth module I will show some demos of how to provide localized resources using configuration types and qualifier values for each resource group. We will then understand how the SDK deals with localized resources when they are provided, considering different factors. In the seventh module I will show some examples about how to force localization in your app by bypassing different device settings. And we'll conclude by highlighting some of the best practices that you can leverage when localizing your apps. So who should take this course? If you are a web developer, looking to dive into mobile app development and want to understand how you would go about localizing apps, this is the best place for you to learn because you will get to know how localizing in mobile apps is a lot different than how it used to be in web development and how much more you can achieve when localizing your Android apps. The same goes for the beginners who are starting straightaway with Android development, you have an advantage over the people coming from web development because you will not have to worry about changing your thought process when talking about localization. And if you are an experienced developer who is already familiar with the localization process in Android, you can still take this course as a refresher because there is always more to learn. Now to get the best out of this course, it is nice to have a basic understanding of the project structure in Android and a little bit of familiarity with the Android app development. But there's nothing to worry about if you do not already have these. They are pretty intuitive and easy to understand. I will also be briefly explaining these before getting started with the examples for the benefit of the beginners in Android development.

The Localization Process
This course is focused on localization, so let's start by defining it. Localization is the process of adapting your application to a specific locale, market or device. Translation is only one of the several elements of the localization process. The second statement is really important, translation is only one of the several elements of the localization process. We will learn about this in the upcoming modules. And that is the main motive of this course, to help understand what the localization process is all about. Also notice in the definition, it is the process of adapting to the locale, market, and the device, not just the locale. So it's much more than just translations. Now you must be wondering what that 10N next to the word localization means, aren't you? It is simply the numeronym for the word localization, the first letter L at the beginning, the last letter N at the end, and the count of letters between the first and last letter, that is 10, in the middle. Localization is often referred to as L10N and in the later modules I will also be using the numeronym from time to time in the display. But now you know what it means and it is something too simple to forget, isn't it? Alright, so like we saw, let me reiterate, translation is only one of the several elements of the localization process. Let's see how. When localizing your mobile applications, there are various factors to consider. The first is obviously the language and region. We want people speaking in any language to use our app, and that's why we translate texts and images and audio. That we all know. Now recall the definition again, adapting to the locale. This address is adapting to the locale, but the process also said adapting to the marketing device, how do we do that? We can provide different themes and colors per region to generate an appeal based on culture and trends, we can limit the set of functionalities offered in certain regions. Let's say in one country it is already to provide a certain functionality, but it is totally illegal in another. Controlling that is also a part of localization. These were examples of adapting to the target market. Next, Android has made home on different type of devices, not just mobile phones. We have it on tablets, on televisions, on wearables and watches and even on the car dashboard. Every device it resides on has a different shape and size. Some are large, like the television, some are very small, like the wearables or the watches, they could even be round. So the layout you create for one device or the content you decide to display for the particular device, is not going to work with all the other devices because they all have different shapes and sizes. And the information you probably decided to display may not fit in that well. You will need to create different layouts for each of them and populate only a reasonable amount of content on small devices. This is an example of adapting to the target device. I guess now you have an idea and will be able to tell what dimensions we are adapting to in the next few examples. Every device will have a different resolution. You may choose to provide richer content and media on devices with higher resolution to make your apps look better, and lighter content and media on devices with lower resolution. Now what did we adapt to here? That's right, the device. Now let's look at something interesting. What if your app changed its behavior based on time? For example, used bright colors during the day, but less eye straining colors at night? Wouldn't it be something users of your app would love? And that is really easy to do in Android. You could also choose to change the behavior of application for different network providers, certain features for Verizon users and something else for AT&T users. Again, this is very easy to achieve in Android. But this will most of the time be used by major organizations who has tie ups with the network providers and provide different sort of deals to the customers based on the subscriptions they have, but if you have a use case that fits in well, you will know to get it done by the time you're done with this course. And there are many other factors like these that you can consider when localizing your Android apps. The next three modules we'll teach you about all of these factors, and configuration types.

The Globalization Process
Before I talk about internationalization, let's take a quick look at the globalization process. Globalization is the process of designing and developing a software product that functions in multiple cultures and locales. The globalization process can be broken down into three steps. Identifying the culture and locale that must be supported, designing features which support these cultures and locales, and writing code that functions equally well in any of the supported cultures or locales. Important part here is writing the code. So for achieving globalization, most of the time you'll need to write some code. Let us take a look at where globalization comes into picture. Here are some examples of the date conventions in different locales. Like you see, every locale follows a different convention for dates. The Canadian and the Danish using the year, month, date format, for example 1998-08-13. On the other hand, the Italians and Norwegians follow the date, month, and year format. Also notice, at some places they use a period, but other places they use slash, and at some places they use a hyphen. So there are different date conventions for different locales that we need to take into consideration when we're planning to localize them or rather globalize them. These are examples of time conventions used by different locales, like we saw in the case of dates, every locale had a different convention, here also every locale has a different convention for time. Some use the AM, PM format, others use the 24 hour format, some of them use the dot separator between the hour and the minutes components, others use a colon. Similarly, the number and currency formats also differ for different locales. We have the dollar, yen, baht, lira, and all of the stuff as currency symbols. Also, notice the difference in the number representations. At some places, like here, the decimal component is separated using a dot, and at other places, like here, it is separated using a comma. Also, the separation of the whole number part is different in different locales. There are many other considerations to take when globalizing your apps. Some of them are as seen on the screen. The word delimiters in different locales could be different. There are different character sets for different locales. The sort order in each of these character sets could be different. There could be legal or cultural differences between the different countries and regions and your app needs to comply with all of them and your globalizing them. So by now you must have a basic idea of how the localization and globalization processes are different, but here is an important difference that really matters to you as a programmer, globalization is almost always applied using code and localization is only sometimes applied using code. Most of the time you can do it by just providing alternate resources in different folders. We'll see the examples in the following modules.

The Internationalization Process
Now let's talk about internationalization. Internationalization is the process of localizing the globalizing your application. I18N is the numeronym for internationalization, just like we saw how L10N was the numeronyn for localization. Do you remember how it was derived? Let's do it again for internationalization. The first letter I at the beginning, the last letter N at the end, and the count of letters between the first and last letter, that is 18, in the middle. That gives us I18N, the numeronym for internationalization. We learned about localization, the process of adapting your application to a specific locale, market or device. Then we looked at globalization, the process of designing and developing a software product that functions in multiple cultures and locales. Both of these fall under the umbrella of internationalization. In other words, internationalization is equal to localization plus globalization. So basically, when you do both localization and globalization, you will have internationalized your app. Alright, so now that we understand the processes, let's move on to actually doing some localization and see some examples of how things are done. In the next module we will start with quickly looking at the Android project structure for the benefit of the beginners, following that we will look at some examples of how to provide localized text, images, and simple media, and then we will look at how the application behaves when these three simple things are localized and the locale changes.

Localizing Strings, Images, and Simple Media
Module Overview
Hello and welcome back. I am Viral. This is module 2, Localizing Strings, Images, and Simple Media of the course Android Fundamentals: Localization and Internationalization. In this module I will start with a quick explanation of the Android project structure for the benefit of the beginners, for others, while doing that we will also focus on understanding the parts of our Android project we will mostly be working on throughout this course, so it is definitely going to help. After that, I will show you an example of how strings are localized and what could be possible in addition to translating the strings. Following that, I'll show you how images are localized and explain how localizing images in Android is a completely different thing as compared to localization of strings, in terms of motive as well as how it is done. And finally, we'll also see how audio can be localized based on the locale.

Android Project Structure
So let us start by quickly going through the Android project structure and understand the parts of the Android project that are most important to us when localizing the Android apps. This is a fresh project that I just created in Android Studio. No matter what project template you select, if it is an application in Android, your project structure is pretty much going to look like this all of the time. We will not worry about the manifest and the Java folders in this course, but let me talk about them briefly. The manifests folder contains your Android manifests. xml, that is where all your configurations for your apps go, for example your activity declarations, your permission declarations and stuff like that. All your source code, all your Java files, and your Java code for your activities are going to go into Java code. We won't be touching that most of the time. What we really need to look at is the resource folder. This is the folder we are going to work on most of the time when doing our localization. If we expand the resource folder, we see a couple of folders pre-created. The first one is a drawable folder, which would contain the images and drawables that we are going to use in our activities. The second one is a layout folder. This is the actual layout of your activities, so all the views that you place in your activity, like text views or buttons, or any other stuff like that, are going to be in the layout folder in form of XML files. The mipmap folder is a special folder created in the latest versions of the Android SDK to provide a special resource folder for the app icon. So what you see right now is the ic_launcher. You see a lot of different variations of this file, don't worry about them for now, right now let's focus on the type of the main folder. So mipmap folder is basically going to contain your Android application icon. And the values folder, which has stuff like your colors that you're going to use in your Android application, the strings, and the styles. Basically we need to focus on the resource folder right here, everything that we do throughout the course is pretty much going to be in the resource folder, and going through the next modules you will understand how important this is when localizing your Android apps.

Localizing Strings
Before we dive into examples, let's take a quick look at one of the very successful apps that has localized strings very efficiently. Yes, what you see is the Twitter app. Pretty much everyone uses it these days, right? What you see on the screen right now is the welcome screen of the Twitter app that is shown when you first install it and have not yet logged into it. Now notice for each locale the strings are translated. But wait a minute, are they just translated? The right term to use is they are localized. Look at the last image in Arabic, do you notice anything different in addition to translated strings? Right to left layout, right? The strings are starting from the right end and moving on to the left. So the layout has also been accordingly restructured. Also notice how Android system itself has adjusted to provide localization for the Arabic locale. The notifications are on the right, the battery and time are on the left, exactly opposite to how it is for the other locales. The navigation buttons are also reversed. In addition to translation, the layout also has been taken care of. Let's take an example of localizing strings and see how it is done. In this example, we will focus mainly on translating the strings, adjustments of layout, for example, the right to left like we saw in the screenshot for the Twitter app, needs a little more understanding of the resource groups and examples of layout switching and we will cover those in detail in the fifth module along with many other interesting examples. Still, in this module I will explain in brief about where changes are required to be made when the layouts need to be adjusted. So let's move on to the examples now. We have a very simple activity here where we have an image view and a text view. In the text view we have the string Hello! How are you? and we are going to translate and localize that. What we see right now is the string being hardcoded. We don't want that. We want to more reduce the string. xml without which we will not be able to do the translation. So we'll go and extract the string resource and name it txt_hello and say OK. What it did was it replaced the hard coded string with a reference to the text in the strings. xml file. Now let's go to the strings. xml and see what it looks like. So this is our strings. xml and the extracted text is now placed in the string with the key txt_hello. Now how do we localize this? One very simple way is to go back to the XML or your activity layout and click on the globe icon here and say Edit Translations. This is going to open a Translations Editor for us. Like we see all the strings and the strings. xml are listed here, we can again go to this globe and add a translation or, let's say, French. When we select the locale, an additional column is populated where we have the app name already localized between most of the time it is going to be the same, but the string which we just added to our activity does not have a translation for French. We are going to add it later. Let us add for another locale, a translation, let's say Hindi. So now we have two columns, one for French, another one for Hindi. Let us go ahead and translate the string Hello! How are you? and add the localized values in each of the locales. So now we have added the translated values for French and the Hindi locale. I am not going to try and pronounce them because I really don't know the language, and don't want to sound funny. But let's go back to the layout and see what it looks like now. We still see the default language, which is Hello! How are you? If we click here and switch to one of the locales we've added, it shows as the translated string. Again, if this was the next one, it switches. Now what happened in the background? When we added the localized strings, all it did was it went into the resources, values, and strings, and if you notice the strings. xml now appears three times, one for the French locale, one for the Hindi locale. If we look into the folder, we'll see that the resource folder has three folders for values. Now when we added the other locale, what it did was it created a separate values folder for each locale by appending the locale name to it. And if we drill down inside one of these, we will see it has its own strings. xml. And if you open the strings. xml, we'll see it's exactly the same as the strings. xml we had initially. But the txt_hello string is now containing the translated string. So that's basically how we localize strings. We can also go to the resource folder and add a values folder with the locale name for any other locale we want to localize directly. So we could have added the folders values-fr and values-hi manually, and added the strings. xml inside them with the localized or translated strings. But we do not want to go through all that hassle and the chances of having created a wrong folder in a wrong location, so the easiest and the safest approach is to go using the Translations Editor provided within Android Studio. Now let's go back to activity layout and say Preview All Locales. What it does is it shows us the localization for all the locales we've translated. Pretty straightforward and easy to translate, isn't it? So that's how we localize strings.

Localizing Images
So translating strings was a piece of cake, wasn't it? Now let us take a look at how images are localized. We take the Amazon app as an example for this one. What do you see on the screen right now? The images for each country are totally different, right? Not just the same image with the same picture, but translated text for different regions, right? In the image we see the localization has been done to adapt to the market. There are familiar faces of people based on the region the app will be used, promotional offers based on the target market and the products available in that region, referral offers in new markets to expand the user base, donation requests for relief funds for regions hit with calamities, and so on. It makes a lot of difference when images display meaningful content on the app. Would it have made sense to show the donation request for the relief fund in other countries? People in the other countries might not have even know the place and may not even have cared that much. Similarly, would there be a referral reward in a saturated marked where pretty much everyone is already using the app? Probably no. We also see a slight difference in the layout per region, but in this example which we are going to see next, we are going to mainly focus on how to localized images and provide alternate images for different regions. So let's move on to the demo. In this demo, we will take an example and see how we can provide localized images for different regions. Localizing images is mostly different content, but sometimes they can also be the same translated images. So let's move ahead and see the example of how to provide different images for different locales. We are going to use the same project that we used for localizing the strings. We already see the strings that we translated on the string for each locale. We had this image view here, which used the image_people drawable as the source of the image, currently displayed on the screen. Right now it is the same for all three locales. Let us go ahead and add an alternate image to show for different locales. For this we'll need to go and click on the resource folder. We right click it and say New, Android resource directory. Under resource type, we select drawable. We will select locale under the qualifiers, do not worry about what qualifiers means for now, we will be covering that in detail in the next module. So we select locale and select the language, French, and say OK. Before that notice that the directory name says drawable and -fr. So once we say OK, let us go to the resource folder and see what happened. So inside the resource folder we see a new folder called drawable-fr that is created. What we need to do is we need to drop the alternate image that we want to provide for the French locale inside this folder. So I drop an alternate image for img_people inside the folder drawable-fr. Now let's see how it looks like in Android Studio. If we see the French locale has a different image now. It's basically the same image, I've just changed the color to green. Now let's do the same thing for the Hindi locale. We go to the resource, right click and say New, Android resource directory, select the locale, resource type drawable, and add for the language Hindi. Folder name is going to be drawable_hi. So we go to drawable, open it in Explorer, and inside the drawable Hindi, I'm going to drop another image. So I dropped another image in drawable-Hindi, which is, again, the same image with a different color. Let us see how it looks in Android Studio. So when we refresh the preview in Android Studio, we see that the locale for Hindi has an orange image. It is simple to remember that, you basically need to create manually a drawable folder -fr, or simply using the IDE like we did by right clicking the resource folder and adding a new resource directory. So that's how we localize images. Here we use the simple image as an example, but it could be banners or promotions or anything like we see in the Amazon screenshots.

Localizing Audio/Speech
Now let's talk a bit about localizing audio and speech in your apps. There could be two types of audios in your app, one is text-to-speech, this basically speaks out any text which you have in your string. xml or hard coded in your app. This uses a text-to-speech engine, which basically speaks out any text provided to it, so if you have localized _____ strings in the app, your text-to-speech is automatically going to take care of the localization because it is going to speak out the translated text. The second one is recorded audio files. So you could have ogg files or mp3 files wav files or any sort of an audio file embedded in your app, which are played at different times in your app. So you would be adding separate resource folder for dropping the translated audio files for each of the locales and the Android SDK will automatically take care of rendering the appropriate audio files for the selected locale. We're not going to do this as an example, but the approach is pretty much the same as what we did for the drawable images.

Differences When Localizing
So now that you have learned how to localize strings, images, and simple media, let's take a quick look at what is the difference when localizing each of these. As we saw in the examples, for the text and text-to-speech, it is mostly translation of the same content. It could be different content for different regions if your text is such, which has completely different meaning when, or completely different thing you need to save when you are doing it for a different country or region. Your strings and text-to-speech is controlled using the strings. xml under the values folder. Your drawable images and your recorded audio are placed in the drawable directories or the assets directories under the resource folder. Each of them will have a locale affixed to it. And the final difference is the strings are all in one file in the strings. xml, on the other hand, each image or your recorded audio is a completely separate file under the directory, drawable or assets. So if you have a lot of strings, you have one file to manage, you could easily do that, but if you have a lot of images or recorded audio files, it would get slightly difficult to manage because you have too many files under a folder. So now that you know that localization is more than translation, let us proceed to the next module where I will explain how much more you can do when localizing your apps in Android. We will look at different types of resources that can be localized, yes text and images are not the end of the world. There are many more resource types in Android that can be localized. You will see that in a while. We will see how these localizable resources are grouped, we will also see how alternate resources are provided when the app is localized considering different factors. In this module, we only localized visual region and language, but there are several other factors we can consider like the screen's shape and size, the resolution, the network providers, the time of the day, the type of your Android device, for example, if it is a television or a wearable, and I'll explain all of these in detail in the upcoming modules. So hope you'll be with me. Thanks for watching this module and see you in the next module.

Understanding Localizable Resources in Android
Overview
Hello and welcome back. This is module 3, Understanding Localizable Resources in Android of the course Android Fundamentals: Localization and Internationalization. In this module, we will start with a quick recap of the definition of localization to make sure we understand what localization in mobile application really means, and how it is different from localization in web applications. We will talk about the res directory, that is the home of all resources and see how and where it is placed in the Android project. We will talk about different resource groups that can be localized and look at how to place them in our Android projects. We will also talk about how to provide alternate resources. We will conclude this module by looking at how the resources included in the Android projects are accessed from different places in our project. So let's get started.

Understanding Localization (L10N)
Let us start by recapping the definition of localization. Localization, also referred to as L10N, is the process of adapting your applications to a specific locale market or device. Translation is only one of the several elements of the localization process. Do you remember the important part in this definition? Translation is only one of the several elements of the localization process. That is important to remember. Let us look at the project we created in module 2 and see where all different factors come in play when we try to localize and how we would need to provide localization differently for different factors. So this is the project we have created in module 2 where we had added an image and a text view, and we had changed them based on different factors, mostly the language we were switching on the device. Right now the screen that you see is for a normal Nexus 4 device. What if we were to play the same app or use the same app on a device of different shape? Let's try and see a preview for an Android Wear, which is round in shape. It would look something like this, not really what you the users to see, right? So you definitely would need to design a different layout for the circular device. Similarly, what if we had a very high resolution device? So let me select this Pixel C device, which has a very high resolution like we see. If you notice, everything has shrunk to a very small size. We do not want that, right? So we would want to, again, sort of scale up our content or probably display more content because we have higher resolutions and we would want to display more content. Again, if we go for a different type of device, let's say an Android television, which again would have a very huge screen, and our content would be sort of like this. We do not want that and probable this is not something that a user would like to see on a television. It is alright when it is on a handset, but on a television we would want to give them a different sort of interface with the larger icons. So this is right now a very simple screen, but think of a scenario where we have a lot of complex functionalities and how we would like to place it differently on a mobile phone and on a television, and what amount of minimal information you would like to display around wearable devices. So these were some factors related to the shape and size and resolutions of devices. Similarly there could be other factors, like the time of the day or the orientation of the device. So basically for different types of devices, for different type of factors, we would want to generally design a different layout so that the user gets the feel of the device and feels comfortable using the app on the device.

The “res” Directory
I will now explain the res directory that is an integral part of the Android project. Res is a short form of resources. Let us take a look at how important it is for us when localizing our Android apps. The res directory is the home of all resources, that means all your resources, no matter what type goes in the res directory. Here are some important things that you should know about the res directory. Each type of resource is placed in a specific subdirectory of the res directory. This has been enforced and should be religiously followed. It allows us to organize and easily find resources that we intend to use in our application. An important thing to remember, no resource is supposed to be placed directly in the res directory. Each resource goes into a specific subdirectory under the res directory, depending on the type of resource it is. There are 10 different resource types or groups in Android and each one has its own subdirectory under the res directory. I'll explain each of these groups in the following slides. Now let's take a quick look at the directories again to understand how the resources are grouped together. So we are back to the project and we see the res or the resource directory right there. It has four subdirectories right now, drawable, layout, mipmap and values. These four resource groups are created by default by Android Studio because most of the app we create will, in one way or the other, always use these four type of resource groups. But there are in all 10 different resources groups and when we want to use the other type of resources we will have to go out creating and adding those resource folders manually into our project. Next I'll be talking about what each resource group contains and what type of files go into each of them.

Resource Groups
Now I'll talk a bit about each resource group and the type of resources that are a part of each resource group. Here is an important thing for you to remember. Each resource group has its own subdirectory under the res directory and the type of resource that you put into your project goes in its own resource subdirectory. None of the resources that you put into your project should go directly into the res directory. It might lead to compile time errors. Here are the different resource groups that Android makes available for easy management of resources in our project. Alright the name of the subdirectories are the resource groups to some extent imply what goes in them, it is important that you understand correctly all of the different type of resources to put in each. We will not be going into details of how to create the resource and how to use them because that is a whole different topic. But I talk about each different resource group in this module so that you know what to put in them and how to localize them when you actually use them in the project. Now not all of the subdirectories are created by default. When you create a new project, you will only see a few of these pre-created, by the drawable, the mipmap, the layout, and the values folders. These are pre-created because they are the most essential and there are only rare cases when you would not use one of these. In those rare cases where you do not use them, you can, of course, go and remove them from your project so that you keep your project clean. The other resource groups, like the animator, anim, raw are all optional. You'll need to create them explicitly when you decide to include those in your project. So let us look at what each type of resource group contains. The animator subdirectory under res would contain XML files that define property animations. Similarly, anim would contain XML files defining tween animations. Again, we will not talk about how to create those animations because that is, again, a completely different topic. But yeah, these are the folders that contain those animation files. Colors directory obviously would contain the different state list of colors. Drawable folder would contain all your image or bitmap files, like the png, jpg, or gif, and sometimes XML drawable files that you may create for your project. Mipmap folders contains a launcher icon for your app. Layout contains the XML file which actually define the user interface layout for your app. Menu folder would contain the XML files that define the application menus for your app. The raw folder would contain arbitrary files to save them in their raw form, for example music files or some other database files that you might want to use in your project, and stuff like that. The values folder would contain XML files containing simple values, like strings, integers, and colors. The XML folder would contain arbitrary XML files that are needed at runtime and they can be called using resources. getXML method. Like we see in the project, the drawable, layout, mipmap, and values directories are already created under the res directory. But like we saw, there are different type of other resource groups. What if we want to use one of those, how do we add them? We got to the res directory, right click it, and say New, Android resource directory. It gives us this window where we need to select the type of resource group we want to add. Here in the dropdown, if you notice I have a different type of subdirectories we talked about that could come under the resource directory. So we would, for now, select one of these, let's say xml and say OK. It creates a subdirectory under the res directory with the name selected, that is XML. Now we could put all our arbitrary XML files in these XML folders and use them as have been required in our project. If we do not want to use one of the resource subdirectories, you could simply right click and delete them. But we should be careful when doing this because it might possibly also delete all the content contained in the subdirectory and we might actually lose some data which _____ for planning to use later in the project.

Accessing Resources
Now that you know the different resource groups and what kind of resources go in each resource group, let me show you the different ways in which you can access these resources that you place inside different subdirectories of the res directory. You will be accessing the resource in two types of files, the Java file, which is nothing but the classes for your activities, and any additional functionality that you may add in your app as separate Java classes. And the XML files, which could be your layout XML files, menu XML files or the AndroidManifest. xml. Next I'll explain how to access the resources from each of these file types. In the Java class, you will be accessing the resources as static integers from the R class. I'll tell you in a moment what the R class is. The most common use cases of referencing or using resources in Java classes are loading or inflating your layout XMLs, getting values from the strings. xml file, setting the background of a view using the drawable resource, or setting a property or tween animation in your app. There are many other use cases where you will access resources in your Java classes, but the ones that I just mentioned are the most common ones. So let us look at the syntax for referencing resources from your Java classes. The basic syntax of referencing resources in Java classes is the package_name dot R dot the resource type dot the resource name. The package_name here is optional. You will need to explicitly specify the package_name only when you access resources from a different package or when you want to access a platform resource. I'll also show you examples of that in a moment, but right now let's look at examples of referencing resources that are in the same package as the Java classes. This line here is setting a drawable resource as the background of the current screen. Look at how the drawable resource is accessed. No package_name here, that means the drawable is in the same package, so R. drawable, that is the resource type or the resource group,. my_background_image, that is the name of the drawable resource. Similarly, in the second example you see how you would get a string resource and set it as the title of the current screen. R. string. main_title. Here main_title is a string resource saved in the strings. xml file. The next few examples, like you should already have made out, are on similar lines. Here we are referencing the layout resource main_screen, here the anim resource hyperspace_in, and here the string resource hello_message. If you are new to Android, you must be scratching your head wondering what that R we are using everywhere actually is, aren't you? Let me tell you what it is. The R class, or the R. java, is an auto-generated class by the aapt tool, which is Android as its packaging tool. It contains the resource IDs for all the resources in your res directory in form of static and _____ values. You don't need to worry about how it is created. But rest assured that once you drop your resource in one of the resource directories, it will be accessible using the R class once your project is baked. Now I'll tell you how to access the resources in the XML files. Some examples of the XML files are your layout XML files or menu XML files or even the AndroidManifest. xml files. The resources in XML files are referenced using a special syntax. I'll explain that in the next slide. The most common use cases of referencing resources from an XML file are getting a string from strings. xml, getting a color from colors. xml, referencing a drawable, or referencing a system resource. Just like I said for Java files, there are many other use cases, but these are the most common ones. So let us look at the syntax for accessing resources from XML files. The special syntax for XML files is @ followed by an optional package_name and a colon followed by the resource_type/ resource_name. Here too, just like in the Java files, the package name is optional, unless the resource is in a different package than where the XML file is or when you want to access a standard platform resource. In the example here, we are accessing the string resource hello using @string/hello. Similarly, here we are accessing the color resource opaque_red using at the red color/opaque_red.

Accessing Platform Resources
Now let us take a look at how to access standard platform resources. What are these platform resources, you ask? Like the name says, they are the resources provided by Android platform. Android contains a number of standard platform resources, such as colors, styles, themes, and layouts. You can access these in your apps when you want to. Let us take a look at the syntax for doing this and some examples. The syntax like you see is exactly the same as what you saw for accessing the in package resources. The only difference when accessing platform resources is that the optional package name is always Android. So for Java, it is Android. R. resource_type. resource_name. And for XML, it is @android:resource_type/resource_name. Here we are accessing a platform resource called simple_list_item_1. And here we are accessing a platform provided color resource. So accessing different type of resources in our project, as well as those provided by the Android platform, is as simple as that. In the next module, we will learn about the different configuration types we have when localizing Android apps, what qualifiers are and the different qualifier values for each configuration type, providing multiple configuration types, and the Qualifier Name Rule. Now this rule is really important for you to understand before you go about localizing your app, and this will ensure that you do not end up missing your localization. So see you in the next module where you'll learn some more interesting stuff that will help you easily localize your Android apps.

Organizing Resources with Configuration Types and Qualifiers
Module Overview
Hello and welcome back. I am Viral. This is module 4 Organizing Resources with Configuration Types and Qualifiers of the course Android Fundamentals: Localization and Internationalization. In this module I will teach you about the configuration types for Android resources. These are the factors to consider when localizing your apps. Then I'll talk about qualifier values for each of these configuration types, how to use qualifier values to provide alternate resources in your apps, and the qualifier name rule. This rule is a really important thing to understand to make sure that your app resources are not all messed up when you localize your apps. So let's get started.

Understanding Configuration Types
To start with, let me talk about the different configuration types for Android resources. In the previous modules we learned about all of these resource directories, which we can create in our project and put different type of resources in each of them. You also saw examples of how to localize strings and images for different regions by providing alternate resources. So now you must be wondering, how do I localize the other resources? How do I put them in my project? What factors do I consider when providing localization in my apps? All of these questions will be answered in the next few minutes. Now that you've heard me say so many times that localization is much more than providing alternate strings and images, the most obvious question on your mind right now must be - what other factors to consider when localizing my app? Let's see. You have not one, not two, but these many factors that need to be consider when effectively localizing your Android apps. You could localize based on the country code and network code. MCC here is the mobile country code and MNC is the mobile network code. These values are for different countries and different network providers and they are generally a 3 digit integer. Then is the most obvious factor, the language and region. We already saw examples of these in the previous modules. If you haven't gone through the previous modules before getting to this one, I highly recommend you do so because there is going to be a lot of referencing to examples in the previous modules throughout the rest of this course. Other factors are the layout direction, like left to right or right to left. Do you remember the Twitter welcome screen example we saw in the second module? Then there are the shape, size, and resolution factors that you may consider when localizing your app. Providing richer content on high resolution apps, providing the right amount of content depending on the size of the screen, providing different layouts depending on the shape of the device, all of this is localization. You could have different resources to provide a different view when the orientation of the device changes. The same layout may not look as great in a landscape orientation as it would in a portrait orientation. Android has different UI modes for different types of devices it resides on. Other than phone, we see Android in cars, dashboards, desktops, televisions, appliances and watches. Needless to say, the layout and functionalities cannot be exactly the same for any app on all of these places. They would undoubtedly require localization. Then you have these hardware factors. You need to consider them too when localizing your app. For example, what is the touch screen type? Does the device has a touch screen? Is there a keyboard available? What is the type of the keyboard? Is it a QWERTY or a 12 key? Are navigation keys present on the device? If not, how do we facilitate navigation? Yes, you should consider these things to ensure that your app is usable on such devices. Did we ever think of these things when developing web applications? Probably no. Finally, what is the Android version installed on the device your app is going to run on? Will you support Marshmallow and later versions or will you support older versions like Gingerbread 2? So like we see, there are many factors that you can consider when localizing your apps. You will not use all of these every time, and you should not. Otherwise you're going to go crazy managing your resources in your Android project. You need to make the right choice of which factors you're going to consider based on the type of your app and the functionality you're offering in it. Configuration types are nothing but these factors. Each configuration type has one or more qualifiers and multiple values for each qualifier. Next, let us take a look at what qualifiers and qualifier values are.

Understanding Qualifier Values
I will now tell you about qualifiers and qualifier values for each configuration type for Android resources. Qualifier values tell the Android system to react to different factors by providing alternate resources. Here is the syntax for specifying a qualifier value for any of the Android resources directory under the res directory. The resource name, which is nothing but a subdirectory for a particular resource type, under the res directory hyphen the configuration qualifier value. There are a lot of qualifier values that you can use and we will see examples of these in a minute. Here are some simple examples. Drawable here is of our drawable resource directory, which is created by default when you create a new project. This one has no qualifier value appended to it. When there are no qualifier values appended to a resource directory, it serves as the default place for the app to look for the resources. So basically when you've not localized your apps, you are always using a default directory. When you would be localizing your apps, you would be creating alternate resource directories using qualifier values. This one has the qualifier value fr suffix to the drawable directory. This means when the locale is French, the resources will be picked up from this directory. If a particular drawable does not have an alternate drawable resource in the drawable-fr directory, the app will look for it in the default drawable resource directory. What would the layout-fr directory contain? The alternate layout XMLs for the French locale. This directory has two qualifier values affixed to it. Yes, you can have more than one. This particular directory, that is layout-ar-ldrtl, will contain alternate layout XMLs for the Arabic locale, which has the layout direction right to left. Wondering what ldrtl is, let me explain. Ld means layout direction and rtl means right to left. It sounds confusing, but you do not need to remember all of these values. Android Studio provides tools to select the right factors or the configuration types and the qualifier values when you need them. Finally, this directory, like the name says, will contain alternate layout XMLs for round screens, like your Android watches. So let us quickly jump to Android Studio and see a few examples of how to create these alternate resource directories and select different qualifier values to append to it so that you can provide alternate resources for those factors when you are localizing your Android apps. So we are in Android Studio now and I have the very same project which we used in earlier modules to see different examples open right now. If you remember, we had already done a little bit of localization for this image drawable and this string over here, and what did we do? For the benefit of the people who are new to Android, let me explain the view first. So the view which you see right now here is the Android view. It is an optimized view for you to easily access different files in an Android project. But in our module or this course, we are going to deal with a lot of directories, for the sake of simplicity and better understanding, I am going to switch to the Project view so that we can see the actual directories as they exist on our hard disk. So I switched to the Project view and I am going to navigate to the resource directory in this view. So I go to app, src, main, and r-e-s, that is the resource directory. Now do you remember we added two new drawable directories for the French and Hindi locale? So the drawable directory for the French locale is right here, drawable-fr. If you can relate now, we had added the qualifier value fr to the drawable resource directory when creating a new resource directory to localize our app for the French locale and the exact same thing was done for the Hindi locale right here.

Using Configuration Qualifier Values
Now let us see how to use qualifier values to create additional resource directories and provide alternate resources. If you recall the qualifier values that we saw in the previous slides, you can easily say some things about the qualifier values, like the following. The qualifier values are easy to guess if we know the factor or configuration type. For example, we saw in the examples earlier that fr is for the language French and ldrdl meant layout direction right to left, and so on. The qualifier values are suffixed to the resource directory name. You can provide multiple qualifier values for a single alternate resource directory and in this case the qualifier values are separated using hyphens. Something which we did not discuss in detail in the examples earlier is when providing multiple qualifiers, the order of the values is very important. When suffixing values to a resource directory, we need to follow a set of rules known as the Qualifier Name Rules. If these rules are not followed, the directory, which we create as an alternate resource directory, will simply be ignored by the Android system. Next I will explain in detail the qualifier name rules and how we can use Android Studio IDE to create resource directories with qualifier values which follow the qualifier name rules. But before we move to the IDE, let us understand some important considerations to take when deciding whether or not to create an alternate resource directory. First, we should know when to create an alternate resource directory using qualifier values. Does our functionality or user experience consideration really call for it? Which resources are we are going to use and of those, which resource directories would we need alternate directories for localization? You should first decide on how many qualifier values you will use in each resource directory that you are going to include in your project. As in when you add more qualifier values, the resources from these directories will keep narrowing down because the directory will be picked when all the specifying qualifiers are met. You should also be careful that you do not create resource directories that conflict each other, otherwise you will never be able to obtain your resource. We will see examples of these in the later modules, but for now let us see what the qualifier name rules are and how to add alternate resource directories without violating any of these rules.

The Qualifier Name Rules
There are five simple qualifier name rules to follow when creating alternate resource directories using qualifier values. I will talk about each rule followed by a demo or an example to show how it is to be applied. This will not only help you understand the rules, but also how to correctly create the alternate resource directories in Android Studio. So the first rule is, when using multiple qualifier values, we need to separate them using hyphens. Let's see an example. So here we are in our Android Studio where I have already opened the new resource directory dialog. The default directory selected is values and we'll let it be that way. Let us go ahead and add some qualifier values. So let us add a locale, let's say Afrikaan, so it appended a qualifier value -af for the language. Now let us say we also want to add the region. So we select one of the African region, say South Africa, and it added another qualifier value, r-Z-A, that is South Africa. Let us go ahead and add one more. We will add an orientation qualifier value. So when I select the orientation qualifier value and put it under chosen qualifiers, we see that a default orientation that is portrayed is already appended to the directory name right here. We could go and choose landscape if we want to. So that's an example of how we can add multiple qualifier values and each of them is separated using a hyphen. So we have three qualifier values and the directory name here, so in all four sections of the directory name, and each of them is separated using a hyphen. The second rule is that the order of the qualifier values when using multiple qualifier values on the same directory is really important. Let us see an example again. So continuing on the example that we just saw earlier for the first rule, we added three qualifier values here and we did not really focus on what order they were being added on. We just thought that as in when we are selecting a qualifier value to be added from the list below, it is getting appended at the end. But that is not really the case. Let us see. If we go about adding another qualifier value, let's say Layout Direction, and add it. We will assume that it would get appended right here in the end. But let us see if that really happens. So I select this and it selects LTR by default, that is left to right, but if you look at the directory name now, it did not get appended in the end but rather came before the orientation qualifier value. So see ldltr before -landscape, l-a-n-d. This is because the order of the qualifier values should always be specified in the available qualifier list that we see right here on the left. When we do it in Android Studio it automatically takes care of it, but you should be really careful if you are going about creating these directories manually, because if they are not in the right order Android Studio will simply ignore the directory. The third qualifier name rule says that alternate resource directories cannot be nested. All the resource directories, that is the default resource directory without any qualifier value, as well as the alternate resource directories with qualifier values, should be only one level below the root resource directory. Let us see. So I'm now going to switch to the Project view in Android Studio so that we can see the directories as they are on the disk. And I'm going to go to the resource directory under app, src, main, and res. If you see all the directories are at the same level under the resource directory. These are the directories that are the default resource directories created by Android Studio when you create the new project, and these are the directories with qualifier values which serve as alternate resource directories. All of them are at the same level, just one level below the resource directory. You cannot have them nested within one another or, again, they will simply be ignored. The fourth qualifier name rule says that the qualifier values are case insensitive. I would say this is not actually a rule, but a relief for you as a developer because you do not need to worry about what case your directory name is in. But the official documentation of the qualifier name rules lists this as one of the rules and must be followed. The fifth rule, and the final rule, is that you can use only one qualifier value for each configuration type on a particular directory. Let us see. So let us go back to the add new resource directory window and try to add a new resource directory with multiple qualifier values. We have the default values directory name, which does not have any qualifier value suffix to it right now. Let us add a locale like we always do. So we will go and add Arabic. So it appended one qualifier value, -ar. Well we cannot have two qualifier values of the same type that is language right now. If we try to change a language to Assamese, it'll just change it. You could go and add manually another qualifier of the same type, but this is not going to work for you. It will create the directory, you will see it in the project, but it will never get picked up by the Android system. So we are simply going to ignore this and revert back to what was valid before. Now again, if we try to add another qualifier value, let's say orientation, it added one, that is Portrait, by default. If we switch to another one, let's say Landscape, it just changes it. Again, we can go and add manually another value of the same type, but this is not going to work, although you may be able to create the directory. So the basic rule is for any available qualifier or configuration type, you can have only one configuration value.

Module Summary
I hope now you have a clear understanding of how to create alternate resource directories. This is the most important part when localizing your Android apps. Let us quickly recap what we learned in this module. I told you about the different configuration types, like network, country, language, shape, size, resolution of the device, hardware, software on the device, etc, which became the factors that you will consider when choosing which resource to localize and how. We saw in the examples how each configuration type has multiple qualifier values and how we can use only one qualifier value but configuration type for a single folder or a directory. We also saw how to use these configuration values and created a few alternate resource directories. In the end we learned what qualifier name rules were and how they are important to follow when localizing your Android apps. Now I would suggest you grab a cup of coffee or probably take a short break before starting the next module because the next module is full of examples where I try and explain every possible situation that you may encounter when localizing your Android apps. The examples will cover several scenarios where you'll need to create new resource directories, you'll need to provide alternate resources, you'll need to use multiple qualifier values, and situations where you are most likely to violate the qualifier name rules and how you can avoid that. So go get that coffee and I'll see you in the next module. Thank you.

Providing Localized Resources Considering Various Factors
Module Overview
Hello and welcome back. This is module 5 Providing Localized Resources Considering Various Factors of the course Android Fundamentals: Localization and Internationalization. In the previous modules you must have already understood what localization and internationalization is all about. How to localize strings, images, and simple media was also something that we looked in detail in the previous modules. You now also understand what localizable resources in Android are and how they're organized with different configuration types and qualifier names. So now it is time to look at some real examples. So like I said, in this module, I will show you some real examples how you could localize resources in your apps. To refresh your memory, we will start by quickly looking at the examples of how to localize resources using language and region. Next, we will see how to localize resources considering the software and hardware factors. Following that I'll show you how to consider the time factor when localizing your resources, for example, how to show different resources when it is day and another one when it is night. Shape, size, and resolution factors. Here I will show you how the app appears different on different sizes of devices, for example, you might have a square or a round shape Android devices, like a wearable Android device, and you want your app to look completely different on those devices as compared to how it looks on a normal smartphone. After that we have the device type factor. Depending on the type of device you are on, your app is supposed to look different. For example, how it looks on the smartphone is completely different from how it looks on an Android television or an Android watch. I will also explain briefly how to localize resources based on the network provider that your user is subscribed to on his or her mobile phone. Yes, that's right, it is also possible to show different content or different localized resources based on which network provider your user is subscribed to on his or her smartphone. And finally, I will teach you the right extent up to which to exploit these Android offerings and how not to over-localize your apps.

Language and Region
So let us get started with some quick examples of localizing the resources in your app based on language and region. You always saw these examples in the early modules, but I will show them again as a quick refresher so that you could easily grasp the upcoming examples for different factors, which are much more complex in nature as compared to localization for simple media, images, and strings. Before we dive into examples, let's take a quick look at one of the very apps that has localized strings very efficiently. Yes, what you see is the Twitter app, pretty much everyone uses it these days, right? What you see on the screen right now is the welcome screen of the Twitter app that is shown when you first install it and have not yet logged into it. Now notice for each locale, the strings are translated. But wait a minute, are they just translated? The right term to use is they are localized. Look at the last image in Arabic, do you notice anything different in addition to translated strings? Right to left layout, right? The strings are starting from the right end and moving on to the left. So the layout has also been accordingly restructured. Also notice how Android system itself has adjusted to provide localization for the Arabic locale. The notifications are on the right, the battery and time are on the left, exactly opposite to how it is for the other locales. The navigation buttons are also reversed. In addition to translation, the layout also has been taken care of. Let's take an example of localizing strings and see how it is done. We have a very simple activity here where we have an image view and a text view. In the text view we have the string Hello! How are you? And we are going to translate and localize that. What we see right now is the string being hard coded. We don't want that. We want to more reduce the string. xml without which we will not be able to do the translation, so we're going to go and extract the string resource and name it txt_hello and say OK. What it did was it replaced the hard coded string with a reference to the text in the strings. xml file. Now let's go to the strings. xml and see what it looks like. So this is our strings. xml and the extracted text is now placed in the string with the key txt_hello. Now how do we localize this? One very simple way is to go back to the XML or your activity layout and click the globe icon here and say Edit Translations. This is going to open a Translations Editor for us. Like we see, all the strings in the strings. xml are listed here, we can again go to this globe and add a translation for, let's say, French. When we select the locale an additional column is populated where we have the app name already localized because most of the time it is going to be the same, but the string which we just added to our activity does not have a translation for French. We are going to add it later. Let us add for another locale a translation, let's say Hindi. So now we have two columns, one for French, another one for Hindi. Let us go ahead and translate the string Hello! How are you? and add the localized values in each of the locales. So now we have added the translated values for French and the Hindi locale. I am not going to try and pronounce them because I really don't know the language and don't want to sound funny, but let's go back to the layout and see what it looks like now. We still see the default language, which is Hello! How are you? If we click here and switch to one of the locales we've added, it shows as the translated string. Again, if we switch to the next one, it switches. Now what happened in the background? When we added the localized strings, all it did was it went into the resources, values, and strings, and if you notice, the strings. xml now appears three times, one for the French locale, one for the Hindi locale. If we look into the folder, we'll see that the resource folder has three folders for values. Now when we added the other locale, what it did was it created a separate values folder for each locale by appending the locale name to it. And if we drill down inside one of these, we will see it has its own strings. xml, and if you open the strings. xml, we'll see it's exactly the same as the strings. xml we had initially, but the txt_hello string is now containing the _____ string. So that's basically how we localize strings. We can also go to the resource folder and add a values folder with the locale name for any other locale we want to localize directly. So we could have added the folders values-fr and values-hi manually, and added the strings. xml inside them with the localized or translated strings. But we do not want to go through all that hassle and the chances of having created a wrong folder in a wrong location, so the easiest and the safest approach is to go using the Translations Editor provided within Android Studio. Now let's go back to activity layout and say Preview All Locales. What it does is it shows us the localization for all the locales we've translated, pretty straightforward and easy to translate, isn't it? So that's how we localize strings. So translating strings was a piece of cake, wasn't it? Now let us take a look at how images are localized. We'll take the Amazon app as an example for this one. What do you see on the screen right now? The images for each country are totally different, right? Not just the same image with the same picture with translated text for different regions, right? In the image we see the localization has been done to adapt to the market. There are familiar faces of people based on the region the app will be used, promotional offers based on the target market and the products available in that region, referral offers in new markets to expand the user base, donation requests for relief funds for regions hit with calamities, and so on. It makes a lot of difference when images display meaningful content on the app. Would have it made sense to show the donation request for the relief fund in other countries? People in the other countries might not have even known the place and may not even have cared that much. Similarly, would there be a referral reward in a saturated market where pretty much everyone is already using the app? Probably no. We also see a slight difference in the layout per region, but in this example, which we are going to see next, we are going to mainly focus on how to localize image and provide alternative images for different regions. So let's move on to the demo. In this demo, we will take an example and see how we can provide localized images for different regions. Localizing images is mostly different content, but sometimes they can also be the same translated images. So let's move ahead and see the example of how to provide different images for different locales. We're going to use the same project that we used for localizing the strings. We already see the strings that we translated on the screen for each locale. We had this image view here, which used the img_people drawable as the source of the image, currently displayed on the screen. Right now it is the same for all three locales. Let us go ahead and add an alternate image to show for different locales. For this we'll need to go ahead and click on the resource folder. We right click it and say New, Android resource directory. Under resource type, we select drawable. We will select Locale under the qualifiers. Do not worry about what qualifiers means for now, we will be covering that in detail in the next module. So we select locale and select the language, French, and say OK. Before that, notice that the directory name says drawable-fr. So once we say OK, let us go to the resource folder and see what happened. So inside the resource folder we see a new folder called drawable-fr that is created. What we need to do is we need to drop the alternate image that we want to provide for the French locale inside this folder. So I dropped an alternate image for img_people inside the folder drawable-fr. Now let's see how it looks like in Android Studio. As we see, the French locale has a different image now. It's basically the same image, I've just changed the color to green. Now let's do the same thing for the Hindi locale. We go to the resource, right click and say New, Android resource directory, select the Locale, resource type drawable and add in for the language Hindi. Folder name is going to be drawable-hi. So we go to drawable, open it in Explorer and inside the drawable Hindi I'm going to drop another image. So I dropped another image in drawable-hi, which is, again, the same image with a different color. Let us see how it looks in Android Studio. So when we refresh the preview in Android Studio, we see that the locale for Hindi has an orange image. It is simple to remember that, we basically need to create manually a drawable folder fr or simply using the IDE like we did by right clicking the resource folder and adding a new resource directory. So that's how we localize images. Here we use the simple image as an example, but it could be banners or promotions or anything, like we see the Amazon screenshots.

Software and Hardware Factors
Software and hardware factors. Now let's take a look at some examples of how you would localize your resources based on the software that you have on your device, like the Android version you are currently on. And also how you could localize the resources based on hardware factors, like whether or not you have a keyboard to input your commands or text, or whether you have a touch screen on your phone or not. So we are in Android Studio now. I've created a new project for this module which also includes the change we did in the previous modules to see different examples of how we localize strings, images, and simple media. Now in this example, I'm going to show you how to localize your resources based on your Android version or your software, and your device hardware, like, for example, do you have a keyboard on your device or do you have a touch screen or do you have a stylus to go with your device? Just like before, to add another localization for any specific factor, we will need to add another resource directory. Right now we are in this Android view of the project, I will switch to the Project view for a better understanding. So here we have our resource folder and inside the resource folder we see all the previously created resource directories. We remember having localized for drawables, for layouts where we did localization for landscape, and for values we did a French and Hindi localization. I am now going to go ahead and clear the localized string for API level 24, and let's see what happens. So I go to the resource directory, right click it, and say New, Android resource directory. I have the resource type selected as values for now and that is correct because my strings. xml is going to be in the values folder. So I go ahead and select a qualifier for the Android version, which is the last one here, and I choose it and move it to chosen qualifiers. Now I need to specify the specific API level for which I want to localize my string. So I select 24, and you see that the directory name has been changed to values-v24, which means values very specific for API level v24. I say OK and the new directory, as specified, is created. I'm now going to go and copy the strings. xml in the default values folder and paste it in the new folder which we just created for API level 24. I'm going to keep the name the same, strings. xml. And there we have our new file created. Now I'm going to change the string for the key txt_hello to API level 24. Now when I close this and return back to my Layout Editor in the design view, you see that I have API level 25 selected here, but you still see the text which we put there in API level 24 is showing up in 25. Now thinking about the previous examples, you think, why it is that? One thing we should know about API level is that it would pick the value automatically for the highest level of localized version it finds below the selected API level. So right now we are in API level 25, as selected here, and we see that the string which is localized for API level 24 is already showing. Now if I go ahead and select an API level which is less than API 24, let's say 21, you see that the old string is back, which is the default string in our default values folder right here. So it picks this value from the strings. xml in the default values folder and if I switch back to version 24, picks up the new string which we created in the strings. xml for API level v24 in the folder values-v24. Now let's localize something for our other factor. So this time I'm going to do it for a layout. So I go to my resource directory again, right click and say New, Android resource directory, and we will do it for our layout resource type and for the Touch Screen qualifier. So I select the Touch Screen qualifier and choose it and I can select a type of qualifier value that I want to, whether it is a No Touch or whether it has a stylus or whether it is finger enabled. For now I'm just going to keep it as No Touch, and like you see, the directory name is going to be layout-notouch. So I create this directory and just like before, I'm going to take the layout out of our default layout folder and I'm going to copy it to layout-notouch folder. Name is again going to be the same because whenever we are localizing the resource name needs to be the same, but just in a different direction. So this is our activity_main. xml for the notouch _____ like we see here. What I am going to do here is, again, just change the string. This time I'm not going to create a separate string. xml for this one, but just going to do it here for the sake of simplicity. So like you see, the display over here or the preview, shows us the new string. As I close this layout again and go to my preview for Android_main, I can see the normal layout that would be our Nexus 5 device with API level 24. What I could do to see the layout for notouch that we just created is I could go to this last icon here, which allows us to select the different layouts which we have created. I could just expand it and I could switch to layout-notouch to preview how my screen would look like on a device with no touch. If I select this one, I'm taken to the no touch activity_main and I can see the preview there. So that's how we localize for hardware factors. I did it for a no touch. Similarly you could customize your resources for any of the hardware factors, like screen width, screen height, size, ratio, density, touch screen, text input, keyboard, and so on.

Time Factor
Time is another factor using which you would want to sometimes localize your resources. For example, you might want to have a very bright layout during the day so that the user can clearly see the content in bright daylight. Similarly, at night you might want to have a dark background or a less bright background so that the users eyes are not strained when reading your content. Now there are different ways you could tell your app whether it's supposed to display a content which is made for night or made for the day. You could write a custom logic in your app to detect the time on the device and then show relevant content, or in most of the Android devices these days there is a toggle to simply turn on or off the night mode on your device. I've taken a few screenshots from my phone. In the first screenshot that you see there, the night mode is off and the second one, the night mode is on. Now when you toggle this setting, your app will automatically detect whether the device currently has the night mode on or off and would load the localized content accordingly if you have localized content based on the night mode. So let's see how this is done. So for the very same activity that we were working on early, I'm going to add another layout for the night and let this one remain the default for day. So I go to Resource, right click it and say New, Android resource directory, select the resource type layout, and select a qualifier, Night Mode. And I'm going to select the night mode to be Night. So you see the directory name is now going to be layout-night. I create this directory. Again, I copy the default activity_main layout and paste it in layout-night. So now we are looking at the activity_main layout for the night configuration or the qualifier type. What I'm going to change in this layout is add a dark background, let's say a black one, so that the user's eyes are not strained when he's looking at it at night. So I made the color black for this particular layout, specific to night. Now I'm going to return back to the main and if you see, by default, it would show as something like this where the background is white, the default color, and if I were to preview how it's going to look at night, I can, again, always go back to switching the layout to layout-night and then you can preview how it is exactly going to look like when it is night. So then you now run your app on the device with this particular layout. Every time you have the night mode toggled on or you programmatically activate the night mode, you are going to see this dark background and not the regular white one which we saw before. So that's how you localize based on time for day and night.

Shape, Size, and Resolution Factors
Now let's talk about the shape, size, and resolution factors. Nowadays we have Android devices that come in different shapes, sizes, and resolution. We have round watches, square Android watches, regular Android devices, or mobile phones set up with different resolutions. We will want to localize all the content for each of these different type of devices so that the content looks appropriate on whichever device it is viewed on. Let us see how this can be done in exactly the same way we localized resources using factors like time or language and origin. So we're back to our project and are looking at the main activity layout, which is the default one. Right now what we see is the layout as it would display on a Nexus 5 device, which is selected right here. Let us select a different device from there, let's say an Android Watch-- now this is how your app would look like if viewed on an Android watch, which is square in shape. But that is not really how you want it to look like, right? So what you would need to do here is create another layout, just like before, which would be very specific to wearable watches. To do that we will go to the resource directory and create another resource directory for this specific device type. We select the layout resource type and we select the qualifier UI Mode. And here we get an option to choose a UI mode, which could be Normal, Car Dock, Desk Dock, Television, Appliance, or a Watch. What we need right now for the device which we just tried to preview is a watch. So we would select the watch UI mode here, which would create a directory for us named layout-watch. I will not go about creating the directory again and creating a new layout because you already know how that is done. So all you need to do now to have another sort of layout displayed on your watch is to create this directory, add another layout with the same name, and put your content as you wish it to appear on the device. In the same way, you could do it for all other type of UI modes, which we will, again, talk about later in a while. Similarly for different type of resolutions you can select the Density qualifier. Here you can select different type of densities that your device might have, for example, XXX-High Density, XX-High-Density, Medium Density, Low Density or any other option that you want to. And you see the directory name would be created based on the density you select. Currently the XXX-High_Density is selected, so the directory name is layout-xxxhdpi. So you would create this directory, put your layout file in there, and for devices with that type of density, that layout that you put in this directory will be picked up. Similarly, you can have qualifiers for width and height selected, for different type of screen sizes where you could just select the height and give a dimension in terms of a number. Alright so 480, and it would create a directory named layout-h480dp. So like I said, select any qualifier, create the directory, put in your layout, and your localized resource is available for the resource type you select and the qualifier name you associated.

Device Type Factor
The device type factor. I think by now you have a pretty good idea of how to go about localizing your resources based on different factors. Another very interesting factor which we already saw a little bit in the previous clip was how we can localize our resources based on the device type. Gone are the days when Android was just limited to mobile phones. Like we saw, it can be found on watches, televisions, and many other devices. Nowadays we have Android which is on car dashboards. You can connect your phone to your car dashboard and pass commands to the Android system and exchange information between your Android smartphone and your car dashboard. Obviously what you show on your handset is not what you want the user to see on your Android dashboard in the car. You want it to be really less content with bigger icons, easily clickable so that it does not get distracted from driving, and so on. So let's go ahead and see how we could localize content to display on different type of devices. We are now going to add a layout specific to a device type. So just like we saw before, we will go and create a new resource directory for another layout type. And we will select the qualifier UI Mode. Here, like we saw in one of the previous clips, we can have different UI modes to select from. If we want it to be on a car dashboard, we select the Car Dock and the directory name would be layout-car. If it is a Desk Dock, it would be layout-desk. If it is a television, the directory name would be layout-television. Similarly, the resource type would differ for the different device types, not only for layouts but for any other resource type. Let's say we select values, and you could have a values-television directory where you would have all different sort of values for your television display, different strings and different colors. Same way, you could go about selecting different types of UI modes, like Watch and Appliance and so on, and combine it with any resource type. Again, all you need to do is create that directory, drop the relevant resource in the right directory and it gets loaded up when the qualifier types match your device type.

Network Provider Factor
Network provider factor. Now this is a really interesting one that has nothing to do with what kind of a device you have, what hardware or software it has or where in the world you are, which region you are in or what language your device is set to work on. This is to do with the network provider that you are using, for example, Verizon or AT&T or _____ phone or whatever network provider you might be using. Yes, you heard it right, you can totally localize your resources based on what network provider your user is subscribed to when you are using the app. We did cover this in theory before and it is based on the MMC and MNC configuration types. At this moment it's just really difficult for me to show you a working example of this one, but I will leave it to you as an exercise to try it out. All you need to do is add different resource directories based on the qualifier names Country Code and Network Code that we see here. It could be a resource type layout or drawable or values or whatever you like it to be, but when you configure it for specific Country Code or Network Code, based on your same configuration, those resource directories will automatically get picked up when the _____ takes a SIM card of that type. You must be wondering how this might help. Let me give you a very simple use case for this one. Let's say you want to show the user some sort of a promotion, like a special voice plan or a data plan for a specific network provider. For another network carrier, you would have saw a different type of plan, probably as an ad or probably because your app has something to do with the network or something. This scenario might not be applicable in general to all the apps, but there are very few people who would actually need this sort of a localization, but it is nice to know that you can do it if you want to.

How to Not Over-localize Your App
How not to over-localize your app. Now that you have seen a few factors that you could use for determining what kind of resources to load for your app, you can already imagine the level up to which you could customize your app by localizing resources for different user groups and audiences. But it is really important that you understand that just because you know how it is done does not mean that you do everything that you know. You should really spend some time thinking about how much you want to localize and what would really make an impact on the users that use your app when they see the localized content. Over-localizing your app, something like what you see in the screenshot right now, will lead to a lot of confusion among the users when using your app. When things change too much, the users might not understand what is happening in the app and might just uninstall it right away. So really be careful when you go about localizing your app and make sure that you do not over-localize it. Localize only as much as you really need to provide a good user experience. This is something what an over-localized resource folder in a particular app would look like. Now look at those resource directories. Drawable directory for a specific region, not night mode with no keyboard and Android version 21. Now how often do you think will that drawable resource in that directory will ever get picked up? Hardly. So why even create a directory for that? Similarly, all the other long directory names that you see with multiple qualifiers are not really that useful. So be very selective when picking the qualifier types you want to localize your apps with, otherwise you'd simply go about increasing the size of your app and spending time on developing things which will never get used. Again, keep the user experience in mind when localizing your apps.

Module Summary
Let us quickly summarize what we learned in this module. We saw different factors that can be used for determining how to provide localized resources. We saw how we can quickly preview the localized content within Android Studio and not have to test them on the device every time we localize one of the resources. And towards the end, I explained how not to over-localize your app and how to keep it really user friendly. I hope that now you are comfortable with localizing the resources in your app considering the different factors that we talked about through the previous modules. We saw quite a few examples in the previous modules, but there are a lot more factors that can be used to localize the resources in your app. Make sure to try them out when you get some time and when building your app, really choose the factors very carefully. In the next module I'm going to explain to you how Android deals with the localized resources that you provide in your app and how it picks the right one that needs to be shown to the user. I'll also tell you how the settings of the device play a major role in the right content being displayed in the localized app. And I will show you an example of how Android finds the right localized resources from amongst all the localized resources you provide in your app and how the device settings play a major role in the selection of these resources by the Android system. So see you in the next module. Thank you.

Understanding How the SDK Deals with Your Localized Resources
Module Overview
Hello and welcome back. I am Viral. This is module 6, Understanding How the SDK Deals with Your Localized Resources, of the course Android Fundamentals: Localization and Internationalization. In this module, I am going to tell you about how the Android SDK selects the right resource to use in your app for a particular user when multiple alternate resources have been provided. We will start by understanding the flow or the process that the Android SDK uses to pick the right resource out of multiple alternate resource directories provided by you in the project. Following that, we will see an example of how the flow works, and in the end we will go through an example where I'll explain how the device settings impact the resource selection process. So let's get started. Here is an important thing for you to keep in mind throughout this course and even when you are localizing your apps later after taking this course. By default, Android selects the resource to use based on the current devices settings. All you need to do is drop alternate resources in the right resource directories with the appropriate qualifier values and Android will do the rest. There are often situations in which you would want to bypass the device settings and force a particular resource. Example, a dark theme or a light theme as per the user's choice. There are ways to do that and I will cover that in module 7. In this module I will teach you about the default behavior of the Android system when selecting the resource to use.

Best-matching Resource Selection Process
So let's get started with understanding the best matching resource selection process. If you recall all the localization examples I showed to you in module 5, in each example all we did was add alternate resource directories with different qualifier values for a particular resource type, and dropped and alternate resource inside the directory. The actual alternate resource file in each of the directories had the exactly same name and the reference in XML and Java files continued to work without any code change. You also saw how every time we flipped a device setting, the right resource from the right directory was magically picked and used in the app. Ever wondered how the magic happened? The flow that you see on the screen right now is actually what happened in the background. When there are alternate resource directories provided in your project, in addition to the default resource directory for a particular resource type, the alternate resource directories will always have the qualifier values suffixed to them. We already saw several examples of this in our last module. To pick the best matching resource from one of those default and alternate resource directories, the Android system should basically narrow down to one folder out of all the provided ones. And the resource in that one chosen directory is the best matching resource. Of course, the assumption here is that the right qualifier values have been used and the right resource files have been dropped in the right directory. Also, recall the high precedence order of the qualifier values I told you about in the earlier modules, when we talked about the qualifier name roots. Let us quickly check that again in Android Studio. So we are in Android Studio now and what I have open right now is the New Resource Directory wizard and what we see right here is the list of the configuration types or the available qualifiers, and the order that we see them in right now is the order that needs to be followed when naming a particular alternate resource directory. If the order is wrong, the resource directory, like we discussed earlier, would never get picked up. So when there are alternate resource directories in our project for a particular resource type and a choice needs to be made by the Android system, this is the logic that the Android system would follow to pick the right resource. First of all, it will eliminate all the directories that has qualifiers which contradict with the device settings. For example, if the current language on the device is set to English, all the folders for French locale are simply eliminated. After that, starting with the first configuration type in the high precedence order of the qualifier name values, it checks one by one for each configuration type. First, MMC, then MNC, then the language, and so on. For each configuration type in the high precedence order, the system checks if any of the resource directory uses a qualifier value of that configuration type. If the answer is no, it simply moves on to the next configuration type in the list. If it finds a directory that uses a qualifier value of the current configuration type, it will eliminate all of the directories that does not include a qualifier value of that type. The system will continue eliminating directories in this manner until only one directory remains. And the resource from that directory is picked as the best matching resource, because it satisfies or matched most of the specified qualifier values in the resource directory name. Things will get much more clear in the next slide where I'll discuss an example, but an important thing to remember is that this is the logic that is followed for all the resource types when there are more than one alternate resource directories provided for that resource type. The one exception for this logic is when the qualifier in question is the screen pixel density. Android selects the option that most closely matches the device screen density. In general, Android prefers scaling down to a larger original image to scaling up a smaller original image. Other than that, the logic remains the same as seen in the diagram for all resources.

Best-matching Resource Selection Example
Now let me show you an example of the logic we just discussed so that things get clear. Assume we have these layout directories in our project with alternate layout resources for different cases. This is the default layout resource directory. This is the layout resource directory for the English locale, and this one is for the Canadian French. This one is for the English locale where the orientation is portrait. This one is for the English locale where the device has no touch screen and the keyboard is a 12 key keyboard. This one is for portrait mode and low density. And finally, this one for portrait mode when the device has no touch screen and the keyboard is a 12 key keyboard. And for this example, let us assume that our app is running on a device with the following settings. Locale is en-GB, screen orientation is portrait, screen pixel density is high density, touchscreen type is notouch, and primary text input method is a 12key. Now how does the Android system select the best matching layout resource out of the alternate resources in all of these layout directories? We also have the logic we just discussed down here so that you can easily map to it when I discuss the example. Looking at the logic, first the layout-fr-rCA directory is eliminated because it contradicts with the en-GB locale. After this, it starts picking the configuration types one by one in the highest precedence order that we saw earlier. It is started with MCC, that is mobile country code, then MNC, and then the location, and so on. For each configuration type, it checks to see if any of the directories contain a qualifier value of that type. If it does not, the system moves on to check the next configuration type in the highest precedence order. In this case, none of the directories have any qualifier values for MCC or MNC, so it moves on and comes to the third configuration type, that is location and language. If one of these directories contain a qualifier value for current configuration type, in this case location and language, the system eliminates all the directories that do not contain a value of that type. So all of these are eliminated because they do not contain a location or language qualifier. Do you see how the list for the system to choose from is now smaller? After this it moves on to matching qualifier values for the next configuration type in the list. The next match would be for the screen orientation configuration type. We see portrait here. So the other two directories that do not have a qualifier value for screen orientation configuration type are simply eliminated. And now we are left with just this one directory, and this is taken as the best match for picking the required layout resource for the app on the current device. One important thing for you to note in this example, the precedence of the qualifier is more important than the number of qualifiers that exactly match the device. For example, in the last directory here, the list includes three qualifiers that exactly match the device. Orientation, touch screen type, and input method. While layout-en has only one parameter that matches, that is language. However, language has a higher precedence than the other qualifiers, so layout-port-notouch-12key is out. The example we saw was for the layout resources, but the same logic that we used for the layout resource selection is used for the selection of any other type of resource included in our project. So I hope now you have a good understanding of how the best matching resources are selected by the Android system to use in your app on a particular device with different settings.

Module Summary
Let us now quickly recap what we learned in this module. We saw the logic or the flow of the best matching resource selection process used by the Android system. We saw how the device settings impact the resource selection. We saw examples of the layout resource selection and how the system narrowed down to one folder out of many to pick the best matching layout resource. We also learned that the logic or flow is the same for selection of any other resource type that we include in our project. In the next module, we will see how we can bypass the device settings when localizing of our apps and how we can force the apps to use specific resources by bypassing these device settings and configurations. So see you in the next module.

Bypassing Device Settings to Force Localization
Module Introduction
Hello and welcome back. This is module Bypassing Device Settings to Force Localization of the course Android Fundamentals: Localization and Internationalization. I am Viral. In this module we are going to look at some of the code examples of how to force different type of localized resources and how to force specific behaviors in your apps. We saw several examples in the previous modules on how we can localize the layouts, depending on different factors. In this module I will show you how to force a specific layout, even if they are not localized. This could be a requirement based on the functionality of your app or you might just want to let the user be able to choose. Following that, we will look at how to force translations. In the previous module we saw how based on language and region the Android system automatically picks up a specific localized string, which is translated for a specific locale or region. But sometimes it might be the case that you still want to show non-localized strings for a specific layout. Or maybe throughout the app if your user wants to be able to choose a language he or she prefers to use. In scenarios like this, you will need to make sure that the localized content is bypassed and the user sees content as he prefers to. Sometimes it also becomes necessary to keep the device's orientation locked because your content would be such that it looks good or makes sense only when seen in the specific orientation. It could be landscape or portrait. I'll also be showing some very simple ways of how to lock the orientation on your device so that the localized content that you have in your app is correctly displayed to the user. And in the end, we will see how to not overdo it. Just like how in the previous modules where towards the end I told you about how not to over-localize your app, it is also important that you do not force too many localizations in your app based on the device settings or _____ your code. This will, again, take away the flexibility for the users to choose how he wants to use the app, which as you might guess, is not very good. So avoid forcing things on the user unless it is really required.

Forcing Layouts
Forcing layouts. Let us see how to force layouts when you have already localized them based on different factors, like the region or language or device type or time of the day. Since you already localized them based on the device settings, your Android app is automatically going to pick up the localized layout resource which is specific to that setting. But there could be instances when you do not want that localized resource to get picked up, and you want to force the specific layout. Here is a simple example of how we would force a specific layout in her activity. In general when you create a new activity, you would notice that in your onCreate method, just below this super. onCreate method, you would have a call to the setContentView, which would have a specific layout resource as the parameter. This layout resource is specific to your activity and if you have not given any of these conditions which I have here, it would pick up the specified layout resource or any of its localized version in your layout resource directories. What I have done here is I have set a flag saying whether the localization is disabled or not. Now this flag could be fetched from anywhere, maybe your custom logic or based on the user's preferences that you have used using the settings screen. Now if my localization disabled flag is true, that is the user has chosen to disable the localization, or might apps logic has said that the localization needs to be disabled, it would set the content view with the _unlocalized version of the activity layout. If not it would go ahead and pick up the activity_category_list layout resource as it normally would have. Specific thing to keep note of here is that your _unlocalized resource file should not have any other localized version of it in your layout resource directories. That means that there is just this one layout unlocalized resource that you want to pick up when your localization is disabled. So in this case, just to reiterate, if the localization is disabled it would pick that single unlocalized instance of the layout file and if not, it would go ahead and select the normal layout resource or its localized version, which matches the device configuration and settings and the most number of qualifier values are matched with your resource directory. So that's how you force a layout in your app.

Forcing Translations
Forcing translations. Just like we saw, how we want to force layouts in different scenarios, we would also sometimes want to force translation. I understand that you could have localized your app in different languages and you would feel the urge to let the user see that capability of your app and let him see that your app supports so many languages, but that does not always make sense. Let's say your user knows just one language or he wants to see your app in a particular language irrespective of what the language on his device is set to be. You would want to give him an option to select that language to be used in your app so that he can understand the content that you have provided. Here I've written a method that would set the language for your app. Again, irrespective of what the language is set on the device. We have a string variable called languageToLoad where we will specify the language code. For this example, I have put it as French, it could be English or Japanese or Korean or specified any other language code that you want to force in your app. Right now it is hard coded, but you are to provide _____ based on the user's preferences by allowing him to select an option in the settings or any other mechanism that you feel like. After that I have a locale object declared. Now I'm checking, if the language to load is equal to not-set, that is just a default what you have chosen, it could be anything you want it to be, like a blank or a null or whatever you want it to be, but basically if the languageToLoad string variable does not have a value set, you just get the default locale and assign it to the locale. Otherwise you instantiate the locale object with a new locale with the language that you have stored in the string variable languageToLoad, and you set the default locale to this locale. Next, you declare a configuration object and instantiate it, and you set the locale for this configuration object to the locale that you have explicitly created using the languageToLoad string. And finally, you update the configuration with this configuration object, which has the locale you want your app to use, and you get the resources for that configuration and load it into your context. So every time your app is going to refer to the context and try to get the resources, it will get the resources loaded using the configuration for that specific language that you have specified in your languageToLoad string variable. So now we have the method for setting the language in the app ready, where do we call this? We call this in the onCreate method of our activity just before the setContentView where we load our layout. This will ensure that all the layouts of the strings, or whatever resources you have in your app, are loaded specific to the locale that you have specified and not the default locale, because in the method setLanguageForApp, we have chained the default locale to the language that we have specified and not what is currently set on the device. So that is how you force translation.

Forcing Device Orientation
Forcing device orientation. Now I will show you how you can tell your app to always load in a particular orientation irrespective of whether auto-rotate has been turned on or off on your device. It could be landscape or portrait. So here is a simple example of how to force the device orientation for an activity in your app. For every activity that you include in your app, there is a declaration of that activity in your Android manifest. xml file. To fix the orientation of any activity, all you need to do is include the Android screenOrientation attribute in the activity tag for the activity you want to fix an orientation for. In this activity category list activity, I have fixed the screen orientation to portrait. Now no matter what the screen's orientation is on the device when auto-rotate is turned on, the app would always load this activity in portrait mode. You can do this individually for every activity in your app or any number of activities that you want to fix an orientation for. You could also choose to fix different type of orientation for different type of activities. For example, in this activity I have fixed the orientation to portrait. For another activity, I could fix the orientation to landscape. There is no limit to the variations you could have in the type of orientations you select for different activities. If you do not specify this attribute for any other activity, that activity continues to behave normally and would automatically rotate when your auto-rotate is switched on on your device settings. So that's how you force device orientation for specific activities in your app. Letting the user choose. Like I've already told you several times throughout the course, never force anything on your users, be it translation or localization or any other resource type, unless it is extremely necessary for your app to function properly. So how would you let the user choose? You could do one of these things. You could provide choices in your app settings for the users to choose whether or not he wants to see things that you are trying to force in your app. You may not always need to do that forceful rendering of resources in your app, but you might have chosen to do it just to make the app look better. But sometimes even not doing that could still let the app usable and the user probably might like it. So always let there be the scope for the user to choose whether or not he wants to see what you're forcing on him. You can also provide easily accessible toggles within the screen where you have forced some localization so that the user does not feel that his app has been locked and he has to use it in a specific way. By using one of these means, you would be providing the users an option to use the app as he wants to use and not as you want him to use it. So again, I would like to end by saying that always let the users choose and never force anything on the user unless it's extremely required.

Module Summary
So let us quickly summarize what we learned in this short module. We saw how to force layouts by explicitly specifying the layout in the setContent method in the onCreate for your activity. We saw how to force translations by explicitly asking Android to load the resources of a specified language. We saw how we can lock the device's orientation for a specific activity by specifying the screen orientation attribute in the activity declaration inside your Android manifest. xml. And again, like I always say, let the user choose what he wants to see and how he wants to use your app, unless extremely required, never ever force anything on the users of your app, otherwise you are at risk of having the users uninstall the app as soon as they start to dislike it. In the next module I will teach you some best practices for localization, how to design right for localization right from the start, even before you start writing code for your app, and using the right tools to get the best out of your localization efforts. So see you in the next module. Thank you.

Applying Best Practices to Your Localization Efforts
Module Overview
Hello and welcome back. This is viral. You are watching the final module, module 8, Applying Best Practices to Your Localization Efforts of the course Android Fundamentals: Localization and Internationalization. Now that you have understood how to provide localized resources in your Android apps, considering various factors, it is important to understand how to do it right and how to avoid messing your app up when localizing it. In this module I will teach you about the best practices to apply when localizing your Android apps. This is a list of things you should do or follow to effectively localize your app. And I will also talk about things you should avoid when localizing so that you could avoid negatively impacting your user experience and your app's rating and discoverability on the Android Marketplace. So let's get started.

Best Practices When Localizing
Localization, like we saw, is a really easy thing to do in your apps. But there are some best practices to follow which will make your localization efforts more effective and will help you build a more successful app. The first thing to do is always provide a default set of resources. You may feel like a particular resource is only required in a certain scenario, and providing it in only one of the alternate resource directories is enough. You might even test your app on a few devices and think it will be fine. But Android resides on thousands of different devices of different makes and models, with different hardware and different Android versions. Even if you manage to exhaustively test on all of these existing devices and platforms, which is highly unlikely, but let's say you do it on all, you'll never know when a new hardware or Android version might come into existence and your alternate resource directory would not be valid anymore and not get picked. Your app will then start crashing. Prevention is better than a cure, so always provide a set of default resources without fail when providing alternate resources to localize your apps. Next, do not start thinking of localization only after you have built a fully functional app, start thinking of localization from the requirement or design phase itself. This will make it easier for you to localize your Android apps and avoid reworking on your layouts or scrapping completed work. Be careful about not violating the qualifier name rule. The high precedence order of the configuration types of a resource should be followed when suffixing qualifier values to your alternate resource directory names. The safest way to prevent violation of the qualifier name rule is to always create your alternate resource directories using the New Resource Directory wizard and not create them manually in your project directory. This way you will avoid creating wrongly named alternate resource directories, which will never get picked up by the system, and this will simply result in unfruitful development efforts and unnecessary bloating of your APK size because even though the directories that you wrongly name are never going to be picked up, they will still be included in your APK or your binary. There often will be times, when you develop your app, that you will need to use the exact same resource with another name, probably in the same or another directory. In cases like these, use the resource aliases to reference the same resource instead of making a copy of the resource. This way you will be able to prevent your APK size from growing a lot in case of multiple such duplicate resource requirements. Again, control the APK size. We already saw a few ways of doing this in the last few slides. Apart from that, choose the resources to include in your project wisely. Use ProGuard to trim down the APK size by removing unused resources when building your APK for release. When translating your strings or strings in your images, use professional translation services. Using free translation engines may sound cost effective, but will cause harm in the long run. If your app has a considerable number of strings, then make use of professional translation services to make sure the right meaning is conveyed when each string is displayed. Free translation engines may be okay when you have a few and simple words. In that case also you should translate back to the original language and cross check to be extra sure that your translated strings are close to what they should mean, if not perfect. The same approach should also be followed for your app descriptions and other texts on your app page. Following these simple tips will make sure that your localization efforts do not cause a negative impact on your apps, user experience, ratings, and discoverability. Next we will talk about some things that you should not do or avoid as much as possible, when localizing your Android apps.

Things to Avoid When Localizing
Now let's talk about some things that you should avoid as much as possible to ensure that your localization efforts are fruitful and gets you some great results in terms of user reachability and satisfaction. We talked about not using free translation engines earlier. There are exceptional scenarios where you have a very few and small strings and you can cross check auto-translated strings by retranslating them to the original language. But that will only get you close to right, but not perfect. Always use professional translation services to get your strings translated. This may cost a bit, but will definitely prove fruitful in the long run. And you will also save some time to focus on improving the functionality. By now you have learned that you can localize almost every resource and you have also learned about so many factors that you can consider to localize your app and provide alternate resources. But, just because you know everything does not mean you should go about putting in every sort of localization in your apps. You are building a great product, not trying to prove how much you know about localizing apps in Android. Localize only as much as required and what will really make a difference in the user experience. Too much localization will simply confuse the users and render your app useless. So be careful when you make decisions on how much and what to localize in your app and what factors to choose when localizing them. This one also I talked about earlier, but let me talk about it again. Start thinking about localization early, maybe in the requirement or the design phase of your app development. Do not wait until the end when you have already built a full-fledged app without localization and then realize, oh now I have an app, let me localize it. You may not realize at first, but keeping the design flexible to easily accommodate localization when you decide to go for it will definitely make your life easy. It will help you avoid a lot or rework or even scrapping and rebuilding competence in your apps. Now I will quickly wrap up this module by summarizing what I taught. I taught about some of the best practices to follow when localizing your apps so that you can get the best out of your localization efforts, like always providing a default set of resources to prevent your apps from crashing, designing for localization to avoid rework, ensuring that the qualifier name rule is never violated, avoiding making duplicate copies of resources, controlling your binary or your APK size by making the right decisions on what to localize and what not, and doing translations the right way using professional services instead of using free translation engines. Then I talked about some things to avoid when localizing your Android apps. Like not over-localizing your app and confusing the user, not waiting for the last minute to decide whether or not to localize your app, and not relying on free translation engines to save a few bucks at the cost of user experience and app ratings. With these simple best practices, you can ensure that your localization efforts are fruitful and gets you the desired results.

Course Summary
Now that we have reached the end of the course, let me quickly summarize what we learned. We started by looking at what localization, globalization, and internationalization means. Localization is the process of adapting to the locale device and market. Globalization is the process of designing and developing a software product that functions in multiple cultures and locales. And internationalization is achieved when we do both localization and globalization. In module 2, I showed some basic examples of how to localize strings, images, and simple media. In module 3, I talked about different types of localizable resources in Android. We also saw how these resources are placed in the project folder structure. Every resource type has its own resource directory under the main res directory. In module 4 I talked about the configuration types and their qualifier values. We saw how alternate resource directories can be provided for each resource type to provide alternate resources in the app. We also saw how each configuration type has several qualifier values that needs to be suffixed to the alternate resource directory names. We also saw how the qualifier name rule is really important and talked about the highest precedence order or configuration types that needs to be taken care of when creating alternate resource directories and naming them. In module 5, we saw a lot of examples about how to provide alternate resources and localize your apps considering different factors. In module 6, we saw what actually happens in the background and how Android system picks the best matching resources to use in your apps from all the alternate resources provided by you. In module 7, we saw how to bypass the device settings and force localization of certain resources in different scenarios that your app may need. Finally, in module 8, we saw some of the best practices that can be used by you when localizing your apps so that your localization efforts are fruitful and gets you the desired results. Thank you very much for taking this course and I hope you can now confidently go ahead with effectively localizing your Android apps. In case you have any queries, do not hesitate to get in touch with me for clarifications. Happy localizing.

Course author
Author: Viral Patel	
Viral Patel
Viral Patel, a Senior Software Developer with 10 years of experience in the IT industry, specializes in Android Development. It started as a hobby and soon become the main stream of his work. Many...

Course info
Level
Intermediate
Rating
0 stars with 8 raters
My rating
null stars

Duration
2h 25m
Released
18 Oct 2017
Share course
