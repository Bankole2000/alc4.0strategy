Android Fundamentals: Menus
by Viral Patel

Menus are essential building blocks in your Android applications. This course will teach you the basics of menus, the different menu types, how to build advanced menus, and design guidelines for building efficient menus in your Android applications.

Menus are essential building blocks in your Android applications. In this course, Android Fundamentals: Menus, you will gain the ability to create and display menus in your Android apps. First, you will learn about the different menu types and how to create them. Next, you will explore how to build advanced menus like checkable menus and intent-based menus. Finally, you will examine various design guidelines to build menus the right way. When youâ€™re finished with this course, you will have the skills and knowledge of Android menus needed to build effective and user-friendly menus in your Android apps.

Course author
Author: Viral Patel	
Viral Patel
Viral Patel, a Senior Software Developer with 10 years of experience in the IT industry, specializes in Android Development. It started as a hobby and soon become the main stream of his work. Many...

Course info
Level
Beginner
Rating
0 stars with 1 raters
My rating
null stars

Duration
1h 4m
Released
27 Dec 2018
Share course

Course Overview
Course Overview
Hi everyone. My name is Viral Patel, and welcome to my course, Android Fundamentals: Menus. I am a senior software developer with several years of experience in the IT industry. We all use a lot of apps on our smartphones. Have you ever noticed how great apps always have great menu options in them, making them really user friendly? Just imagine an app with no menus or a really horribly built menu. Would you ever want to use such an app? In this course, we are going to learn about the different menu types in Android and how to build them, building advanced menus, like checkable and intent-based menus, design guidelines and best practices to use when building menus in your apps. By the end of this course, you will have the skills and knowledge of the Android menus needed to build effective and user-friendly menus in your Android apps. Before beginning this course, you should be familiar with the basics of Android development using Android Studio. I hope you will join me on this journey to learn about building great menus in your Android apps, with the Android Fundamentals: Menus course, at Pluralsight.

Introduction to Menus
Course Introduction
Hello everyone, and welcome to this course, Android Fundamentals: Menus. In this course, I am going to teach you what menus mean in the Android operating system. You must have used a lot of Android apps and must have accessed the menu in each of them, but have you ever wondered how these menus are built, and why do different types of actions show in the menu and not anywhere else on the screen in your Android app? Why do some of these options show sometimes in the menu and not at other times? As an end user, it is okay if you do not know this, but as a developer, you should definitely know which menu item to place where and exactly which type of menu to use and why even the menus are used the Android apps. In this module, we will start with a basic introduction to the menus in Android system. Going forward over the course, we will also look at different types of menus that you could build. Once you know how to build the basic menu items, I will also teach you how to build advanced menus where you can show and hide different menu items on the fly. I will also teach you how to use advanced menus in your Android apps, which are far more than just showing a basic list of actions when you use or when you open the menu. So let's get started with this very first module that is Introduction to Menus. Again, I would like to summarize the part of this course. I'll start by teaching you what a menu is and why do we need to use the different types of menus. Yes, there is more than one type of menu in Android, and by the end of this course, you will know what each type of menu is, why are they used, and when to build them, which is really important for us developers to know before we start building our Android apps in order to make the user experience the best possible. So see you in the next module to understand what a menu is.

What Is a Menu?
So, what is a menu? Let's get started with a basic definition of the menu. Menus are common user interface components. Where have you seen these menus generally? On the user interface, right? Hence, they are basic user interface components. They generally hold commands that are normally hidden from the user. Now mind you, when I say hidden, it does not mean that these are some very secretive or mysterious options in your apps that you do not want the users to see at all. Hidden here means just not showing them straight away to their face when they are in your apps. There might be various reasons for this; maybe you want to save some screen space or you do not want to show these options because they are not so often used. Now these hidden commands that are contained in your menus can be accessed by the user as well. They click on your menu button or when they perform a gesture, like long-pressing on one of your elements of the user interface. Let us look at some examples. I am going to show you a very quick demo of a menu using the Google Chrome app. Every Android phone these days has a default browser, and nowadays it is Google Chrome app. So I'm going to use the Google Chrome app to show you these basic examples of the menu because I hope most of you have already used that. So let us switch to the Chrome app and see some examples of a menu. So I am in the Google Chrome app now, and let us look at some examples of menus. I am going to click on this button right on top in the top right corner, and let's see what happens. So when I click that, I see a list of actions appear. This is the menu, and the items that you see within it are the menu items. There are all self-explanatory. Clicking this would open a new tab. This one would show me the bookmarks. This one would show me the Recent tabs. Here I can see the Downloads. And this one would allow me to open the website that I am opening on my mobile device as a desktop site, and so on. Now let us look at another type of menu. We see a lot of user interface elements on this page, like the buttons that are the shortcuts to the different sites, some articles at the bottom. I am just going to go and press and hold the Facebook icon that we see right there. And when I do that, like you see, I see another menu pop up with different types of actions contained in it; this is another type of menu called a pop-up menu. Now, I'm going to go and navigate to a website. Now I'm in the Pluralsight website. So if I come down and I click on any of the items and press and hold, same thing. So it shows me which item I clicked and different types of things I could do with that particular item on the screen; for example, where I clicked was actually a hyperlink, so this would allow me to download the link or share a link, download the image on which the link was built. So these are some menu items that Google has provided in the Chrome app. Now in your app, the actions that you would see in your menu, or the menu in your app, would be very specific actions to the functionality that you offer in your app. So this is something very specific to the browser, and in your app it could be completely different, but this is basically how menus would show and how we would provide actions in the menus when you build them. Going forward in the course, I will also teach you how to build these menus, how to enable clicks in them, and so on.

Why Do We Need Menus?
So now that we've seen what basic menu items look like, we should mainly understand why do we need these menus. Can we not just put everything on one screen? When I saw that, I believe you already know the answer to the question, why do we need the menus, but nevertheless, let's go ahead and take a look at the basic reasons why one would need to build menus in the Android apps. So the primary reason for the need of building menus in the Android apps are as follows: First and foremost, freeing up the space on your screen. Most of the Android apps are used on hand-held devices, like your smartphone or tablet, and there is not a lot of real estate to spare when the device screens are so small on these devices. You always want to show what the user wants to see first and not every possible command that we have in the app right on the screen. So, freeing up the screen space is the primary reason for using menu items. Then there are some actions which are operations that the user wants to perform, but are not directly related to the functionality of your app, like sharing your app, or taking your user to the app store to get a rating for your app, going to the preferences or settings screen; these are actions which are operations that you do not want to put on your main screens. You want to keep them inside your menu items because these are operations the user would not use that frequently. Other types of operations that you would generally put in menus are actions that you perform on selections of multiple items or a single item in your app; for example, deleting selecting items or moving them to different areas, or it could be anything. These operations are best placed only in menu items because they need to be shown only when the user makes a selection and not all the time. And finally, these menu items also enable navigations to other areas of the app, which would let the users perform different operations, like navigating to another functionality which is completely unrelated, or not directly navigable from the current screen. Now let us go back to our Google Chrome example where we saw the basic menu items in the previous demo and tried to relate them to the need of building the menu in the app. So we are back to the Chrome app, and let us try and open the menu from the top right corner and see how it relates to the reasons that we provided for building a menu. So if I open the menu again, just think about these menu options, like the Bookmarks, or History, or Settings. Does it make sense to put all of these options all the time on the screen? You might either place them maybe as a hyperlink or buttons, but how often would the users really use them? Not that frequently, right? So, we would have wasted a lot of real estate if we would've placed them on the main screen on every page that we show to the user. That is the reason we place them in the menu items so that whenever the user wants to use them, they could just go to the menu, click the item, and use it.

Different Types of Menus in Android
Now, let us look at the different types of menus in Android. Like I said before, not all menus that you see in the app are the same. Based on where you see them and what you see in the menu defines what type of menu item they are. As a developer, it is very important for you to understand what each type of menu means and when you should use each type of menu so that you provide the very best user experience to the users of your Android app. There are basically three types of menus in the Android apps: the options menus, contextual menu, and a pop-up menu. Options menu is something that contains actions that are directly related to the current activity or context. Contextual menu contains actions or operations that are directly related to your current selection, and a pop-up menu contains the list of operations that are directly related to an element you have on your screen and to which the menu is currently anchored. In the next module, I'm going to teach you in detail how to build each of these types of menus and how to include actions and perform operations using these menus. For now, let us go to the famous Google Chrome app that we've been seeing so far and see these different types of menu items and try and relate them to the definitions that I just stated. So there we have the Google Chrome App, and if I open the menu from the top right corner here, what we see is called the options menu. These are the menu items, or operations, that are directly related to the current activity or the context. If I click on an element on this screen, like the Facebook icon I had previously showed an example of, I see a pop up and some menu items in it. It is rightly called the pop-up menu. And then looking at the third type of menu, if I go to the History screen, I have a lot of items in this list, and I can go ahead and select multiple items, so I select the first three items. And now if I go and open the options menu, you would see that the amount of menu items that I'm seeing is very limited, and they are limited to the three items I have currently selected. If I go back and unselect these three items, the options menu is gone. If I select just one of them and see the options menu, you see there are now three items in the menu instead of two that we saw before with multiple selections. So we have an additional one here that says Copy link. So that's how a context menu works. So those were the different types of menu items, and I hope you could relate them to the definitions that I briefly stated in the previous slide.

Module Summary
So I hope now you have a basic understanding of what a menu is and what the different types of menus are in the Android operating system. To quickly summarize what we learned in this module, we learned that menus are common user interface components which makes hidden commands visible when a user does a click or performs a gesture on your app, like pressing and holding an element on your screen. The primary reason for inclusion of a menu item, or a menu component, in your Android app is freeing up screen space in your Android apps because the apps are generally used on low real estate devices, like your mobile smartphones or tablets. Menus are also used to perform navigations or other app operations on your screen, which are less frequently used as compared to other operations that a user would do with elements currently visible on the screen. In the next module, we are going to look at creating a simple menu. This will include examples of all the three types of menus that were discussed about in the previous demo, like the options menu, the contextual menu, and the pop-up menu. We are also going to look at how to handle clicks in each of these menu types when you add items to the menus once you create them. And in the end of the next module, we are going to discuss in detail the different between each of these menu types. So see you in the next module.

Creating Simple Menus
Module Introduction
Hello, and welcome back. This is the module, Creating Simple Menus, of the course, Android Fundamentals: Menus. In the last module, we saw some basic examples of menus in the Android apps. You saw how there are three different types of menus, namely, the options menu, the contextual menu, and the pop-up menu. In this module, I am going to teach you how to create those. Let me start with a brief overview of what we are going to cover in this module. We are going to look at what the options menus are in detail and how to create the options menu. Similarly, we are also going to look at contextual menus and the pop-up menus. Once we create these menus, we are also going to go back and look at how to handle the click events in each type of menu. At the end of this module, we will conclude by looking at the difference between the menu types and to better understand how and when to use each type of menu in the Android app. This understanding is really important before you start building menus so that you build the right type of menus and provide the best user experience in your app.

Understanding Options Menus
Let us look at the first type of menu, the option menu. Option menus are where the app should show the actions and other options that are directly relevant to the current activity or the entire app in general. The screenshot here shows the basic option menu of the Chrome app. You can clearly see that the operations in here are something that are for the app in general or are very specific to the current activity. For example, the Bookmarks menu item is something in general that could be used at any point of time in the app by the user. Similarly, the History menu item or Settings menu item is applicable to the entire app and not very specific to an object contained on a particular screen. So let's jump to Android Studio and create a basic options menu. We'll also look at how to handle click events in the operations that we add to the options menu. I've already created this project, and we'll be using this throughout all the demos that I'll show you in this course. The project basically is a blank app. There's no menu at all right now, and we'll be creating some menus along in the demo. Let's start by adding a basic menu layout file, or options menu. I'm going to just add some random menu items so that we can view them when running the app. Now let's go to the MainActivity and we are going to go and inflate this menu. For this, we need to override a method. Shortcut to the override menu is just pressing Ctrl+O, and you can search for onCreateOptionsMenu. Select that item, say OK, and your onCreateOptionsMenu method is generated. We create an object of the MenuInflator class and get the MenuInflator, and using this object, we are going to inflate the menu onto the exiting activity. Now we should be good, and we're going to run the app. Like you see, we now have the icon for the action menu there, clicking which will show us the menu items that we have just created in the options_menu. xml. So we configured the items in the menu resource file and we are now able to see them in the app. Clicking the menu items does not do anything right now, so let's go ahead and handle those clicks. We go to the MainActivity again and override another method, OnOptionsItemSelected. I'm going to select that item and say OK, which will override the method automatically for us within Android Studio. We're going to write a switch case here that will check the ID of the MenuItem that has been passed to this overridden method, and based on the ID that is detected, we will take some action. So we're just going to display a Toast every time a menu item is clicked, and for default, we just call the super class method. So let's go ahead and run this application now. So before running it, we see that the Menu Items click are not handled, and now we run it. So it's up with our changes, and let's go ahead and open the menu items and click on 1. And there we see the toast for the first Menu Item, for the second Menu Item, and for the third Menu Item, just like we had written in the onOptionsItemSelected overridden method that we see on the left. So that's how we create an options menu.

Understanding Contextual Menus
So now that you've understood how to create and handle click events in the options menu, let us do the same thing for contextual menus. Let us start by understanding what a contextual menu is. The contextual menu is a type of menu where you place actions and operations that are relevant to specific items, or a context frame in your current screen. One example, as you see on the screen right now, is when you long-press on an image, let's say when you're browsing a page. We have seen an example of this when going through our examples in the Chrome app in the previous module. Contextual menus can be of two types: floating contextual menus that you see on the left screenshot right now, or a contextual action menu, which is seen on the right side in the screenshot. Let us look at each type of this contextual menu in detail. What you see on the screen right now is a floating contextual menu. It appears as a floating list of menu items then you long-press and hold on an item that you see on the current screen. When you want to display a floating contextual menu, the support for it must be declared by you as a developer when building the menu. This type of a menu, that is a floating contextual menu, can be used to perform an action on only one item at a time. In case of the example that we see right now, the action is being performed on the image that has been long-pressed to see the floating contextual menu. A different way to display the contextual actions or operations is the contextual actions menu. In the action mode, the actions and operations relevant to the selected item on the screen is shown in the action mode on the action bar, as you see it in the screenshot. How is it different from a floating contextual menu? First thing, as it is very visible, is that it displays the actions and operations on the action bar in the top of the screen, but apart from this visual difference, there is another very important thing about the action mode. With the contextual action menu, you can enable performing actions on multiple items at once; for example, selecting multiple items in a list and then performing an action on all of them at once. A basic example would be deleting or archiving multiple emails in your email app. Now let's get back to Android Studio and see some examples of how to create both the floating, as well as action mode contextual menus. We will also see how to handle clicks when a user selects an operation in each of these menu types. We'll be using the same project that we used for our options menu. Let's go ahead and create a new menu layout file for our floating context menu. I'm going to add some items again, just like before, so that we can see them on the app. So we're all set with our menu XML file, and now let's look at the app. In the app, we have a TextView, and I'm going to load the contextual menu item on the long-press of this text box. So I'm going to add an id to the TextView so that we can identify it and associate it with the context menu. So when you find the TextView by its ID that we just added to the XML, and we're going to register this TextView for the context menu so that long-pressing it will help us get the context menu on the screen. We need to override another method, which is the onCreateContextMenu method, and this is where we are going to use the MenuInflator again and inflate the floating_context_menu. xml that we just created a while ago. So we are all set, and let's run the app again. So the app is up, and we are going to long-press the text view to which we associated the context menu. And like you see, the context menu that we defined in the floating_context_menu. xml is now visible on the screen after long-pressing it. Right now the clicks are not handled, so clicking this did not do anything. So let's go ahead and add some code to handle the clicks for these context menu items. So we're going to override another method for this, which is onContextItemSelected. And just like we did in the options menu, we are also going to write a switch block here, which will use the item ID to identify which menu item was clicked and take an action. We are also again going to just display the toasts like we did for the option menu, but just like we are displaying a toast, you could just put in any functionality in there and be able to do whatever you want with the menu items. So I've now handled the click for both the context menu items that we have cleared, and I'm going to run the project again now. And now I'm going to long-press the TextView again to load the context tool floating menu and click on one of the menu items. And like you see, it displays the toast, just like we had configured in the onContextItemSelected method. So that that's how you create floating contextual menus. And now let us look at how we can create action mode contextual menus. So I'm going to create another menu resource file for this, just like we had done for the options and floating context menus. And I'm going to add another few items here so that we can load them in the app. So we've added the items, and now let's go to the MainActivity. But before that, let's go to the layout file for the screen and add a button that we can use to load the action mode contextual menu. So I just added a button, and I'm going to set the ID for this so that we can identify the button and take action when it is clicked, and I'm also going to add a name to the button and add some padding so that it looks a bit neat. I'll change that to wrap_content, and yeah, we're good now. So now let's go to the MainActivity and get the action mode code started. So we're going to create an object of the ActionMode class, which will be used to show and hide the action mode contextual menu. And after this, we need to override the ActionMode. Callback class, and it is an abstract class, so we will have to override these few methods within the abstract class. So onCreateActionMode is something which is done when the action mode contextual menu is created. OnPrepareActionMode executes every time when the contextual menu is prepared again. OnActionItemClicked, like the name says, will handle our click events, so we do not need to do it separately this time. And onDestroyActionMode would basically take some actions when it is destroyed. So I've inflated the menu we created in the onCreateActionMode, and we do not need to do anything in onPrepareActionMode because we don't want anything to happen every time. And now let's handle the clicks for the action mode contextual menu. So we're going to write a switch case similar to what we have done before by getting the ID of the item to identify which menu item was clicked, and we will take actions depending on which item was clicked. Again, we are just going to display a toast like we have done before for each menu item, but you can always put in whatever you want to happen when the user clicks on your menu item. The item mode. finish here, which is a must because once the menu item is selected, the mode needs to be ended before it can be started again. And in the onDestroyActionMode, we are just going to set the mActionMode object to null so that it's reset. Another thing that we need to do before we can try the app is bind the menu to the button that we just created a while ago so that when we click the button, the action mode contextual menu would load and begin to take actions from the menu items we created. So I have the button view, and on the view, I'm going to call the method setOnLongClickListener, and I'm going to define a new onLongClickListener inside this, which again is an abstract class, so we will have to implement a method. which is onLongClick. And within this method, we are going to instantiate the ActionMode object so that it is set before it's actually loaded onto the activity. To instantiate the ActionMode, we call the startSupportActionMode method and pass the callback, which we have initially defined in this demo as a parameter. So we run the app now, and let's see what happens. So we now have a SHOW ACTION MODE MENU button, and when we click on that, like you see, ACTION MODE menu is displayed, and you can click on any of them to see the action occur. You can always close them, and we have seen only two. If there are any more, they will also show up just like the options menu as a list. You can always change them to images. And when you click them, the action that we defined as a toast is now shown. So that's how we define action mode menus.

Understanding Popup Menus
So far we have seen how to build the options menu and the contextual menus. Let us now look at the last type of menu, that is the pop-up menus. Pop-up menus may look like floating contextual menus, but they are quite different from them, although they are just a list of actions and operations that we see in a floating dialog, similar to what we see in floating contextual menus. The difference here is that it does not affect the item that is selected or long-pressed. Also, you can use them to provide an extended form of menu item; for example, one that you see here is the Move to. When you select the Move to, you may present the user with a list of destinations that he would want to move that item. Other similar options would be adding an item to a list where a user selects an option and you can present him with a list of destinations or lists where he can add a specific item to. So again, let's get back to Android Studio and look at how to build and handle click events in a pop-up menu. Back to the same project that we were working on before, and just like we did for the action mode menu, I'm going to create another button that we can use to click and load the pop-up menu. Now we're going to add an onClick attribute, which will have the name of a method, and when we add it it's not already defined, so it says it is missing in the MainActivity. So we are going to just go and create this method in the MainActivity so that we can tell the activity what to do when the user clicks on this button. Now this is just for a demo purpose. Your pop-up menu could basically be involved in many different ways, but for now we are doing it using a button click. And in this method, I am just going to create an object of the PopupMenu class, and I'm going to inflate using this popup_menu object, the popup_menu. xml that I've created beforehand, and it is similar to the ones we have created for the options, floating context, and action mode context menus. And in the end, for pop-up menus you just have to call the show method for the action menu to show up on the screen. Another thing that we need to do is we have to set the onMenuItemClickListener so that we can handle the clicks that happen, and there's a different way to do this. So we are going to implement the onMenuItemClickListener of the popupMenu class. And that mandates us to override the onMenuItemClick method, just like we did before, and we are going to put in the switch case again to get the ID of the menu item that was clicked and will take an action based on which item had been clicked. Again, for now, we are just going to display a toast. So we're all set, and now we are going to run the application to see how clicking the button will show us a pop-up menu. So we have the screen up with the new button that we just added, so let's go ahead and click it. And like you see, it displays a pop-up menu right below the button that we click and shows us the two menu items that we had created in our popup_menu. xml. And when I click one of those menu items, like you saw, I am shown the toast that is configured in the onMenuItemClick overridden method. So that's how we create pop-up menus. Thank you.

Differences between the Menu Types
So now that you know how to build different types of menus, let us reiterate over the differences so that you have a complete understanding of the different types and you know when to apply which. So like we saw, there are option menus, contextual menus, and pop-up menus. What does each menu type apply to? The options menu applies to the current activity, or the app in general. The contextual menu applies to a selected item or an element on the screen. And, the pop-up menu applies to an anchored view or provides an extension of the menu. Which of these has a subtype? The options menu and pop-up menu doesn't have different types, but the contextual menu has two types. There is a floating contextual menu and an action mode contextual menu. Which of these affect the item that you have selected before the menu is shown? Options and pop up do not, the contextual menu does. Which of these menus would you use when you want to perform an action on a batch of items? Contextual menu. And in this one, you will be using the action mode so that you can select multiple items and then from the action bar select a menu item to make modifications to the item or the list of items that you've selected. You would used contextual menus for this, and specifically the action mode so that you can select multiple items in a list and select a menu from the action mode, such that it applies to all the selected items. So these are the differences that you must remember between the different menu types, and you should make the right choice depending on what sort of menu items you need to include in your app.

Module Summary
So let us summarize what we learned in this module. We saw what option menus are. We saw what contextual menus are and the different types of contextual menus. We looked at pop-up menus. And finally, we saw how to handle click events in all of these types of menus. In the end, we also saw the differences between each menu type that would help you choose the right type of menu when you're building your apps. In the next module, we are going to look at how to build advanced menus. We're going to create dynamic menus at runtime. We are going to see how to perform contextual actions on a selected batch of items in a list. We're going to see how we can create checkable menus items. And in the end, we will also see how to make intent-based menu items. So see you in the next module. Thank you.

Creating Advanced Menus
Module Introduction
Hello, and welcome back. This is the module, Creating Advanced Menus, of the course, Android Fundamentals: Menus. In the last module, you got to know some basic concepts of how to create different types of menus in your apps. We looked at how to create pop-up menus, options menus, and also different types of contextual menus. In this module, we are going to look at some advanced concepts. We are going to look at how you can take batch contextual actions using action mode menus. We'll look at how to create checkable menus, and in the end, we'll look at how to dynamically add menu items based on intents. So let's get started.

Batch Contextual Actions
In the last module, you already saw how to create context menus. We saw floating contextual menus and action mode contextual menus. In this example, I'm going to show you how you can take contextual actions on a batch of items in your ListView. So let's jump to Android Studio and look at how this can be done. So we're back to the Android Studio, and I'm going to use the same project that we used in the last module to see different types of menus being added to your Android app. I've built a little bit on top of the last time we saw this project. I've added a ListViewActivity that contains a ListView which will display a list of different planet names, and we are going to do some things on this ListView so that we can see how to perform batch operations on the items in the ListView that we select. So like you see here, I have a simple string array containing the list of the planet names, and I've added it to an ArrayList, which I'm going to set using the listAdapter and display it in the ListView. I've also added a deleteSelectedItems method here, which is currently unused, and we are going to use this method using the action mode contextual menu. We're going to select a list of items and delete them all at once in a batch using the context menu. So let's get started. We go to the res directory and create a menu resource XML for our new acitvity. So I'm going to name it listview_menu and save it. I'm going to add a menu item and call it delete. I gave it the id listDelete so that we can identify it from the Java code, and I'll add another one and call it refresh. So now we've added the menu items in the menu resource XML, and now we are going to go to our ListViewActivity. java. So what I'm going to do now is I'm going to take the mainListView, which is already initialized by finding the ListView using its ID, and I'm going to set the choice mode to ListView. CHOICE_MODE_MULTIPLE_MODAL, and this is going to allow us to select more than one item at a time in the ListView. So once I've set the ChoiceMode, I have to set the ChoiceModeListener. So as soon as I set the ChoiceModeListener, it asks for a parameter, which is MultiChoiceModeListener. I have to override a few methods within the new instance of the MultiChoiceModeListener. The first one is onItemCheckedStateChanged. So this will do something every time you select or unselect an item in the list view. So for now, we are not going to do anything. So we just leave it blank. The next one is onCreateActionMode. This is where we inflate the menu item. So I'm going to create a MenuInflator object, just like we used to do for the regular menu items, and I'm going to get the MenuInflator for the actionMode, and I want to inflate the menu with the listview_menu. xml that we just created a while ago. And in the end, I'm going to return true. For now, we're not going to do anything in the onPrepareActionMode, so we're just going to leave it blank for now. And onActionItemClicked is where our actual actions would be handled. So we are going to write a switch case here and get the ID of the menuItem that was selected. So in the first case, if the user selects the delete option, what we are going to do is we are going to delete all the items that have been selected, and in the end, we finish the ActionMode, and in the end we will return false in case of any unhandled menu item. We already moved that last part. It was a default origin rated code. And the deleteSelectedItems method was already written like I had shown you earlier, and we are going to utilize that method to delete the items that are selected. And in the onDestroyActionMode method, also we're not going to do anything for now, but this one you can use to free up your resources or do some cleanup activities every time your ActionMode menu is closed. So we go ahead and run the app now. So the app is launched, and we are going to click on the SHOW LIST VIEW ACTIVITY, and like I said, I have created a ListView there which is going to show us the list of planets, and this is the part which I had discussed about earlier, and like you see, the names defined there are shown in the ListView. We select Mercury, Venus, Earth, and click Delete. And like you see, they're gone and what remains is Mars, Jupiter, Saturn, Uranus, and Neptune. Now I select Uranus and Neptune and click on Delete again, and those two are gone also. So that is how we create a context menu which can take action on a batch of items in your ListView at once.

Checkable Menu Items
You already know how to add basic menu items in your menus. Now let us look at some advanced stuff, like how you could create checkable menu items and possess the options of the user, whether or not he has checked or not a particular menu item. So let's move on to Android Studio to see how this can be done. So we're back to Android Studio, and we're going to use the same project again. If you recall, we had added an options menu which had 3 menu items, Menu Item 1, 2, and 3, like you see in the app right now. We are going to make these menu items checkable. In order to do that, let us go to our menu resource file for the options menu. Right now, like you see, we have three items defined, and they just show as plain menu items in our app. We are going to add a group and put all of these items inside that group, and we are going to keep the checkable behavior to single for now and see how it behaves. So we close the group at the end of the three items and slightly indent the items so that it is more readable, and let's go ahead and run the app now. So the app has loaded, and if you go to the options menu now, you will see that instead of plain, simple menu items, we now have radio buttons next to each of them. We can click on any of them, let's say item 3, and as of now, you see the behavior is the same as before. And we also notice that when we go back, the option that the user selected isn't saved. So let's go to the Java file again and write some code to make the app persist the user's selection. So we're going to go to the onOptionItemSelected, and we are going to say if the item which is clicked in the menu is checked, that is if it is already checked, we are going to set the item's checked attribute to false. And if it was not already checked, we are going to set the checked attribute to true. If we do this, the app is going to remember what the user's last selection was. So run the app again and see how it behaves now. So our app is up, let's go to the options menu again and try to click on one of the menu items. So click on Menu Item 2, it displays the toast as it is supposed to, and when we go back to the options menu, you see that the selection that the user did is now persisted. We now select Menu Item 3, and when we go back to the options menu, we see that Item 3 shows selected and the selection is cleared from Item 2. This happened because we had set the checkable behavior of a menu item group to a single item. Now let us change the selection, or the checkable behavior, to all and see what happens. So the app is up, and let's go to the options menu again and select one of the menu items. So we click on Menu Item 2, it displays the toast as it is supposed to, and when we go back, we'll see that the user selection is now persistent. So it did not forget like before what the user has selected. Now let's click on Item 3, and when we go back, we now see that both the selections are now retained because we had set the checkable behavior for our menu item group to all. Now let's go to the Item 3 in our switch case where we had handled the selected item, and say if that item that was selected is already checked, then display another toast. So we're going to say, if item is checked, display a toast saying it's checked. And now, let us run our app again. So the app is up, and let's go to the options menu and do the same thing that we did before. We're going to go and select Menu Item 3. It was not already checked, so it set it as checked, and then because it was checked, it displayed the additional toast we had defined. But, when we uncheck it, it just displays the clicked toast and doesn't display us that is it checked toast. It was supposed to be displayed only if the item is checked. Again, if we check it, we see the second toast being displayed. So now you know how to detect if a menu item is checked, and you can take appropriate behaviors whenever a user selects or deselects an item. So that's how you create checkable menu items.

Intent Based Menu Items
Until now, all the menu items that you saw in the menus were explicitly added by you, either using the Java code or the menu resource files. Now let us look at how to add menu items dynamically based on the intents provided by your app or some other apps that are installed on the user's device. So we're back to Android Studio, and let us go to the options_menu. xml resource file that we had defined before and look at the app. So the app still displays the three items that we had explicitly defined in our menu resource file. Let us go ahead and add another group where we are going to add menu items dynamically. Name the group or give it an ID, say, intent_group, and here we will not define any menu item explicitly, but we are going to let the app dynamically identify menu items and add them to the options menu. To do that, let us go to the onCreateOptionsMenu method that we had overridden before, and we are going to add an intent here. So we add a basic intent, which wants to perform a send action, and it wants to share a plain text, which is Check out the menu course app! Based on this intent, it is going to identify other apps and add menu items dynamically. After we have defined this intent, we are going to call the method addIntentOptions for the object menu. Here we provide the group identifier that we had added to the resource file for the menu, and now when we run the app, we'll see that there will be a few dynamically loaded menu items in our options menu. So the app has loaded, and if you go back to the options menu, we see that there is one additional menu item called Messaging, and if we look at the menu resource file again, we did not explicitly define that in the intent_group, and we had only three hard-coded, or explicitly defined menu items, which also show in addition to the dynamically added messaging menu item. When we click that, it opens up the messaging app because our intent was to send a plain text message, and it shows the text that we are defining in the extras. This app was identified because it is the only installed app to send text messages on the emulator, but if the user's device has other apps that supports this action and have the intent filters defined in those apps, they also will be identified and corresponding menu items would be added in addition to the messaging app. So that's how you dynamically add intent-based menu items for your app.

Module Summary
So now I guess you know how to build some advanced menu items in your Android apps. So let us quickly summarize what we learned in this module. We started by looking at how you can take batch actions on a list of items that you select in your ListView using the action mode context menus. Then we saw how we can make the regular menu items checkable and save the user's preferences. And in the end, we saw how we can dynamically add menu items to our menus using the intent filters provided by our app or some other app that is installed on the user's device. In the next module, I am going to teach you about some of the best practices when using Android menus, and also some guidelines provided by Google in terms of how your menu should be built so that the users get the best user experience in the app that you develop. Looking forward to see you in the next module. Thank you.

Design Guidelines and Best Practices for Menus
Module Introduction
Hello, and welcome to the module, Design Guidelines and Best Practices for Menus, of the course, Android Fundamentals: Menus. In the previous modules, you learned about the different types of menus and how to create them. We also looked at different ways in which you can create advanced menus, like checkable menus, intent-based menus, and how to take contextual batch actions on the menus that you create. In this module, we are going to start with a quick recap of the different types of menus so that when I explain to you the design guidelines and best practices, you can relate to the menu types. And finally, after having the recap, we are going to go and look at some of the design guidelines and best practices that would enable you to create great menus in your apps and provide the best user experience to your users.

The Different Menu Types (Recap)
In the previous modules, you learned about the different types of menus, like the options menus, the pop-up menus, and the contextual menus. Let us do a quick recap before we jump into the design guidelines and best practices. Option menus are where the app should show the actions and other options that are directly relevant to the current activity or the entire app in general. The contextual menu is a type of menu where you place actions and operations that are relevant to a specific items, or a context frame in your current screen. Contextual menus can be of two types: floating contextual menus that you see on the left screenshot right now, or a contextual action menu, which is seen on the right side in the screenshot. Pop-up menus may look like floating contextual menus, but they are quite different from them, although they are just a list of actions and operations that we see in a floating dialog, similar to what we see in floating contextual menus. The difference here is that it does not affect the item that you selected or long-pressed. Also, you could use them to provide an extended form of menu item; for example, one that you see here is to Move to. When you select the Move to, you may present the user with a list of destinations that he would want to move that item.

Design Guidelines and Best Practices - Part 1
So I hope now you have refreshed your understanding of the different menu types, so let's get started with understanding the design guidelines and best practices. In the demos, or explanations that I'm going to do in the next few slides, I'm going to use Google Chrome app. I'm just going to use this app because pretty much everybody uses it nowadays and it's like the default browser on the Android phones, and it'll be very easy for you to relate to what I am saying. So the very first guideline for creating menus is choosing the right location for a command that you would put in your menu. Let us look at an example. So we have our Chrome app open here, and I'm going to show you how to select the right location for every command that you want put in the menus. You should always think about what the command that you're going to put in the menu applies to. Does it apply to a particular selection or does it apply to the activity as a whole? For example, if I open the menu for one of the icons in the shortcuts over there, you will see that it is very specific to the current selection. I clicked on the Stack Overflow icon, and it presents to me commands that are very specific to that shortcut. Do I want to open it in a new tab or in a new incognito tab? Do I want to download the link or do I want to remove the link? Now if I go to the options menu, you will see that the commands in there are very generic in nature, which applies to the activity or the app as a whole. For example, viewing the History or viewing the Downloads, go into the Settings or opening a new tab, marking as a favorite, and so on. So it is very important for you to be able to distinguish what your command applies to. If it is for a specific selection, it should go in the context menu, and if it applies to the app in general or the activity that you are in, it should go in the options menu. The order in which you place the commands in your menu are also equally important. Let us look at an example. If I go to the context menu for the icon again, you will see that the very obvious option that is opening that shortcut in the new tab is the very first, and removing it is the last. Most of the time, a user would want to open it and it would be only sometimes that you would want to remove an item. Similarly, if we go to the options menu, you will see that opening a New tab, or a New incognito tab, or the Bookmarks are on top, and Help and feedback, Settings, Downloads, History are all towards the end because they are not used that frequently. Another very important thing to think about when you are designing your menus is the discoverability of the menu items. You should not always put the menu items in the context menu or pop-up menu because the user may not always go there by long-pressing a particular item on your screen. You should always make the most-used items available in the options menu as well. Let us look at an example. So again, opening the context menu for a shortcut, we see that there are very obvious commands for the shortcuts, like opening in a new tab and downloading the link, but we also have a New tab and a New incognito tab in the options menu. So a user can just use the very obvious place to search for a menu item, that is the options menu, open the new tab, and then he can always go and click on the shortcut again or just type in the web address. So this how Chrome works. The workflow may differ in your apps, but the basic point to remember is that your menu items should be discoverable. So it should not be somewhere that the user doesn't go to a lot, like the contextual pop-up menus. Always try to keep the most-used commands in the options menu as well, or maybe as a direct action on your activity or screen.

Design Guidelines and Best Practices - Part 2
We already talked about the importance of ordering the menu items in the menus that you provide to your users in your app. But, what should be the first context menu item? For a particular selection, it should always be the selection's most intuitive command; for example, if I again open the context menu for a shortcut, the most intuitive command is to open the shortcut, and so we have Open in new tab. If I go to a particular website, let's say I go to the Pluralsight home page, and I select an image, for the image, the very obvious or the most intuitive command is to open the image in a new tab. So, the thing to remember is the first context menu item should always be the selection's most intuitive command. It is always important to identify the selected item with your context menu because when you present a context menu, it is either a pop up or an action mode, but when the menu appears, if you have not taken care of highlighting the part the user selected, the user may actually forget what he had selected. So you should always identify which item was selected for presenting the context menu. Let us see an example. Now if I open the context menu for this image, you'll see that it displays the name of the image on top so that I know what the context for this menu is, and then it gives me the commands that are applicable to the image I selected. Similarly, if I open the context menu for a link, you'll see that it displays to me the link that was selected and the context menu displays the commands that are applicable for this link. This really helps the user recall what the selection was or to determine if they actually did the right selection before taking an action. You should always fix the most important commands in your menus; for example, if I go to the options menu when viewing a page in the current browser, you'll notice the few icons on top, which are fixed, and they'll always be there. For example, bookmarking a particular page downloading the particular page, viewing the information about the page, or refreshing a page, and these are the most-used or always-applicable items for any page or any item that would appear in your browser. So those are fixed in the menu. To make the life of the users a little bit easier, you should not always show all the menu items, whether or not they are applicable. You should always try and dim or hide the inapplicable menu items. Let us see an example. Right now I am viewing a page on my browser, so all of the options there that you see enabled are actually applicable, but you see that the very first fixed menu item, that is the forward button, is disabled. So let me do a quick navigation to another page, and then I just go back to the previous page. Now since I navigated back, I do have a page to go forward to. So if I return back to the options menu, you see that that command is now applicable and has been enabled. In a similar way, if I close this tab, or let's say all the tabs, and go back to to options menu, you will see that all of those commands that we saw when a page was open are gone, and we only see the basic actions that we can take when no tab is open, like opening a new tab, or changing the settings of the current browser; hence, the user is not bothered with too many options when they are not applicable. You will even notice that even amongst the few actions that are displayed right now, the Close all tabs option is disabled because it is not applicable because we do not have any tabs open. This really makes the app user-friendly for your users.

Course Summary
So I hope by now you have learned a lot about the menus that can be created in your Android apps. Let us quickly summarize what we learned through this course. We started by looking at different types of menus. We saw what options menus are, how to create them, and what they are used for. We also looked at the two different types of contextual menus: the floating contextual menu and the action mode contextual menu. And then we looked at the pop-up menus, which although looks very much like contextual menus, are really for a different purpose. Then we had a quick overview of the differences between the different menu types; for example, options menus are used for the commands that are applicable to the activity or the app as a whole. Contextual menus are for commands that are very specific to a selection that the user makes on the current activity. And pop-up menus are generally used to display extensions or commands that are in you contextual option menus. We also looked at some advanced menus. We looked at batch contextual actions that we could take on multiple items in a list view via action mode menus, We looked at how to clear checkable menu items and save the user selection. And then we looked at how to create intent-based menu items using which we can display commands from another activity or directly connect our apps to other activities by dynamically adding menu items based on the intent filters defined in our own apps or other apps. And finally, we looked at a lot of design guidelines and best practices that you should use when designing the menus in your Android apps. So I hope now you know a great deal about menus and will be able to build your apps with great menus in them. Thank you.

Course author
Author: Viral Patel	
Viral Patel
Viral Patel, a Senior Software Developer with 10 years of experience in the IT industry, specializes in Android Development. It started as a hobby and soon become the main stream of his work. Many...

Course info
Level
Beginner
Rating
0 stars with 1 raters
My rating
null stars

Duration
1h 4m
Released
27 Dec 2018
Share course

